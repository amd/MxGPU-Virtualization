/*
 * Copyright (c) 2014-2023 Advanced Micro Devices, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


#ifndef __AMDGV_ERROR_H__
#define __AMDGV_ERROR_H__

#include "amdgv_api.h"


/****************************************************
 * Macro for future extension
 *
 * Current error code is defined in the following:
 * unsigned 32 bits integer
 * bit [0  - 11] are subcode
 * bit [12 - 17] are category
 * bit [18 - 30] are reserved
 * bit [31]      is always 1
 *
 * Current error mask is defined in the following:
 * unsigned 64 bits integer
 * bit [0  -  59] are category mask
 * bit [60  - 63] are severity  level
 *
 ****************************************************/
/* subcode bit length, increase this one if necessary */
#define AMDGV_ERROR_SUBCODE_LENGTH  (12)

/* category bit length, should no more than 60 categories, but need 6 bits to hold */
#define AMDGV_ERROR_CATEGORY_LENGTH (6)

/* mask category bit length, this is the upper limit of category count */
#define AMDGV_ERROR_MASK_CATEGORY_LENGTH (60)

/* mask severity bit length */
#define AMDGV_ERROR_MASK_SEVERITY_LENGTH (4)

/* The length of error text should be less than this number. */
#define AMDGV_GPU_ERROR_MSG_SIZE    (256)

/* The safe length of printing out the full error message to buffer. */
#define AMDGV_GPU_ERROR_BUF_SAFE_SIZE (AMDGV_GPU_ERROR_MSG_SIZE + 120)

/* error entry flags */
#define AMDGV_GPU_ERROR_FLAG_ERROR_EXT 1

#define AMDGV_GPU_ERROR_EXT_MAX_ARGS 15

/****************************************************
 * Helper Macro
 ****************************************************/
#define AMDGV_ERROR_SUBCODE_MASK   ((1 << AMDGV_ERROR_SUBCODE_LENGTH) - 1)
#define AMDGV_ERROR_CATEGORY_MASK  ((1 << AMDGV_ERROR_CATEGORY_LENGTH) - 1)
#define AMDGV_ERROR_CATEGORY_SHIFT AMDGV_ERROR_SUBCODE_LENGTH

#define AMDGV_ERROR_MASK_SEVERITY_MASK  ((1UL << AMDGV_ERROR_MASK_SEVERITY_LENGTH) - 1)
#define AMDGV_ERROR_MASK_SEVERITY_SHIFT AMDGV_ERROR_MASK_CATEGORY_LENGTH
#define AMDGV_ERROR_MASK_CATEGORY_MASK  ((1ULL << AMDGV_ERROR_MASK_CATEGORY_LENGTH) - 1)

/* error code MSB should be set to 1 */
#define AMDGV_ERROR_CODE(cate, sub) \
	((1<<31) | \
	(((cate) & AMDGV_ERROR_CATEGORY_MASK) << AMDGV_ERROR_CATEGORY_SHIFT) | \
	((sub) & AMDGV_ERROR_SUBCODE_MASK))

#define AMDGV_ERROR_CATEGORY(code)     (((code) >> AMDGV_ERROR_CATEGORY_SHIFT) & AMDGV_ERROR_CATEGORY_MASK)
#define AMDGV_ERROR_SUBCODE(code)      ((code) & AMDGV_ERROR_SUBCODE_MASK)

#define AMDGV_ERROR_MASK_CATEGORY(mask)     ((mask) & AMDGV_ERROR_MASK_CATEGORY_MASK)
#define AMDGV_ERROR_MASK_SEVERITY(mask)     (((mask) >> AMDGV_ERROR_MASK_SEVERITY_SHIFT) & AMDGV_ERROR_MASK_SEVERITY_MASK)

#define AMDGV_ERROR_32_32(a, b)  ((((uint64_t)a) << 32) | (((uint64_t)b) & 0xFFFFFFFF))
#define AMDGV_ERROR_16_16_32(a, b, c) ((((uint64_t)a) << 48) | (((uint64_t)b) << 32) | (((uint64_t)c) & 0xFFFFFFFF))
#define AMDGV_ERROR_16_16_16_16(a, b, c, d) ((((uint64_t)a) << 48) | (((uint64_t)b) << 32) |  (((uint64_t)c) << 16) | (((uint64_t)d) & 0xFFFFFFFF))

#define AMDGV_ERROR_SYS_LOG_MSG_SIZE 512

/****************************************************
 * Function Define and Macro
 ****************************************************/
#define amdgv_put_error(idx_vf, code, data) \
	amdgv_put_event(adapt, idx_vf, code, data, __func__, __LINE__)

#define amdgv_put_error_ext(idx_vf, code, data, ...) \
	amdgv_put_event_ext(adapt, idx_vf, code, data, __func__, __LINE__, __VA_ARGS__)

#define AMDGV_ERROR_PRINT_HEADER "%s[%x:%x:%x:%x][%s][%s:%d] "

/*
* define error severity
* ERROR_HIGH : critical error, requires RMA, flash VBIOS or reboot host
* ERROR_MED : important error requires reload GIM, reset whole GPU or VF_FLR
* ERROR_LOW : less significant error requires reboot guest or log only
*        as the action will be performed by driver itself
* WARNING : incorrect event happened but no action is required
* INFO : just notification of occurred event
*/
enum AMDGV_ERROR_SEVERITY {
	AMDGV_ERROR_SEVERITY_ERROR_HIGH,
	AMDGV_ERROR_SEVERITY_ERROR_MED,
	AMDGV_ERROR_SEVERITY_ERROR_LOW,
	AMDGV_ERROR_SEVERITY_WARNING,
	AMDGV_ERROR_SEVERITY_INFO,
};

/*
 * Please add your new cateogry at the end of this enum
 * Remember to update struct amdgv_error_list
 * in amdgv_error_subcode.c
 */
enum AMDGV_ERROR_CATEGORY {
	AMDGV_ERROR_CATEGORY_NON_USED = 0,
	AMDGV_ERROR_CATEGORY_DRIVER   = 1,
	AMDGV_ERROR_CATEGORY_RESET    = 2,
	AMDGV_ERROR_CATEGORY_SCHED    = 3,
	AMDGV_ERROR_CATEGORY_VBIOS    = 4,
	AMDGV_ERROR_CATEGORY_ECC      = 5,
	AMDGV_ERROR_CATEGORY_PP       = 6,
	AMDGV_ERROR_CATEGORY_IOV      = 7,
	AMDGV_ERROR_CATEGORY_VF       = 8,
	AMDGV_ERROR_CATEGORY_FW       = 9,
	AMDGV_ERROR_CATEGORY_GPU      = 10,
	AMDGV_ERROR_CATEGORY_GUARD    = 11,
	AMDGV_ERROR_CATEGORY_GPUMON   = 12,
	AMDGV_ERROR_CATEGORY_MMSCH    = 13,
	AMDGV_ERROR_CATEGORY_XGMI     = 14,

	AMDGV_ERROR_CATEGORY_MAX // Max category size is currently 2**6 which is 64 in total
};

#define AMDGV_START_SUBCODE(cate) AMDGV_ERROR_CODE(AMDGV_ERROR_CATEGORY_ ## cate, 0)

/*
 * Below are the error subcodes of each category.
 * Remember to populate it in amdgv_error_subcode.c
 */
enum AMDGV_ERROR_GPU {
	AMDGV_ERROR_GPU_DEVICE_LOST = AMDGV_START_SUBCODE(GPU),
	AMDGV_ERROR_GPU_NOT_SUPPORTED,
	AMDGV_ERROR_GPU_RMA,
	AMDGV_ERROR_GPU_NOT_INITIALIZED,
	AMDGV_ERROR_GPU_MMSCH_ABNORMAL_STATE,
	AMDGV_ERROR_GPU_RLCV_ABNORMAL_STATE,
	AMDGV_ERROR_GPU_SDMA_ENGINE_BUSY,
	AMDGV_ERROR_GPU_RLC_ENGINE_BUSY,
	AMDGV_ERROR_GPU_GC_ENGINE_BUSY,
	AMDGV_ERROR_GPU_HIVE_RMA,

	AMDGV_ERROR_GPU_MAX
};


enum AMDGV_ERROR_DRIVER {
	AMDGV_ERROR_DRIVER_SPIN_LOCK_BUSY = AMDGV_START_SUBCODE(DRIVER),
	AMDGV_ERROR_DRIVER_ALLOC_SYSTEM_MEM_FAIL,
	AMDGV_ERROR_DRIVER_CREATE_GFX_WORKQUEUE_FAIL,
	AMDGV_ERROR_DRIVER_CREATE_MM_WORKQUEUE_FAIL,
	AMDGV_ERROR_DRIVER_BUFFER_OVERFLOW,

	AMDGV_ERROR_DRIVER_DEV_INIT_FAIL,
	AMDGV_ERROR_DRIVER_CREATE_THREAD_FAIL,
	AMDGV_ERROR_DRIVER_NO_ACCESS_PCI_REGION,
	AMDGV_ERROR_DRIVER_MMIO_FAIL,
	AMDGV_ERROR_DRIVER_INTERRUPT_INIT_FAIL,

	AMDGV_ERROR_DRIVER_INVALID_VALUE,
	AMDGV_ERROR_DRIVER_CREATE_MUTEX_FAIL,
	AMDGV_ERROR_DRIVER_CREATE_TIMER_FAIL,
	AMDGV_ERROR_DRIVER_CREATE_EVENT_FAIL,
	AMDGV_ERROR_DRIVER_CREATE_SPIN_LOCK_FAIL,

	AMDGV_ERROR_DRIVER_ALLOC_FB_MEM_FAIL,
	AMDGV_ERROR_DRIVER_ALLOC_DMA_MEM_FAIL,
	AMDGV_ERROR_DRIVER_NO_FB_MANAGER,
	AMDGV_ERROR_DRIVER_HW_INIT_FAIL,
	AMDGV_ERROR_DRIVER_SW_INIT_FAIL,

	AMDGV_ERROR_DRIVER_INIT_CONFIG_ERROR,
	AMDGV_ERROR_DRIVER_ERROR_LOGGING_FAILED,
	AMDGV_ERROR_DRIVER_CREATE_RWLOCK_FAIL,
	AMDGV_ERROR_DRIVER_CREATE_RWSEMA_FAIL,
	AMDGV_ERROR_DRIVER_GET_READ_LOCK_FAIL,

	AMDGV_ERROR_DRIVER_GET_WRITE_LOCK_FAIL,
	AMDGV_ERROR_DRIVER_GET_READ_SEMA_FAIL,
	AMDGV_ERROR_DRIVER_GET_WRITE_SEMA_FAIL,

	AMDGV_ERROR_DRIVER_DIAG_DATA_INIT_FAIL,
	AMDGV_ERROR_DRIVER_DIAG_DATA_MEM_REQ_FAIL,
	AMDGV_ERROR_DRIVER_DIAG_DATA_VADDR_REQ_FAIL,
	AMDGV_ERROR_DRIVER_DIAG_DATA_BUS_ADDR_REQ_FAIL,

	AMDGV_ERROR_DRIVER_HRTIMER_START_FAIL,
	AMDGV_ERROR_DRIVER_CREATE_DRIVER_FILE_FAIL,
	AMDGV_ERROR_DRIVER_CREATE_DEVICE_FILE_FAIL,
	AMDGV_ERROR_DRIVER_CREATE_DEBUGFS_FILE_FAIL,
	AMDGV_ERROR_DRIVER_CREATE_DEBUGFS_DIR_FAIL,

	AMDGV_ERROR_DRIVER_PCI_ENABLE_DEVICE_FAIL,
	AMDGV_ERROR_DRIVER_FB_MAP_FAIL,
	AMDGV_ERROR_DRIVER_DOORBELL_MAP_FAIL,
	AMDGV_ERROR_DRIVER_PCI_REGISTER_DRIVER_FAIL,
	AMDGV_ERROR_DRIVER_VF_RESIZE_BAR_FAIL,

	AMDGV_ERROR_DRIVER_ALLOC_IOVA_ALIGN_FAIL,

	AMDGV_ERROR_DRIVER_ROM_MAP_FAIL,

	AMDGV_ERROR_DRIVER_FULL_ACCESS_TIMEOUT,

	AMDGV_ERROR_DRIVER_MAX
};


enum AMDGV_ERROR_FW {
	AMDGV_ERROR_FW_CMD_ALLOC_BUF_FAIL = AMDGV_START_SUBCODE(FW),
	AMDGV_ERROR_FW_CMD_BUF_PREP_FAIL,
	AMDGV_ERROR_FW_RING_INIT_FAIL,
	AMDGV_ERROR_FW_UCODE_APPLY_SECURITY_POLICY_FAIL,
	AMDGV_ERROR_FW_START_RING_FAIL,

	AMDGV_ERROR_FW_UCODE_LOAD_FAIL,
	AMDGV_ERROR_FW_EXIT_FAIL,
	AMDGV_ERROR_FW_INIT_FAIL,
	AMDGV_ERROR_FW_CMD_SUBMIT_FAIL,
	AMDGV_ERROR_FW_CMD_FENCE_WAIT_FAIL,

	AMDGV_ERROR_FW_TMR_LOAD_FAIL,
	AMDGV_ERROR_FW_TOC_LOAD_FAIL,
	AMDGV_ERROR_FW_RAS_LOAD_FAIL,
	AMDGV_ERROR_FW_RAS_UNLOAD_FAIL,
	AMDGV_ERROR_FW_RAS_TA_INVOKE_FAIL,
	AMDGV_ERROR_FW_RAS_TA_ERR_INJECT_FAIL,
	AMDGV_ERROR_FW_RAS_TA_ENABLE_RAS_FEATURE_FAIL,

	AMDGV_ERROR_FW_ASD_LOAD_FAIL,
	AMDGV_ERROR_FW_ASD_UNLOAD_FAIL,
	AMDGV_ERROR_FW_AUTOLOAD_FAIL,
	AMDGV_ERROR_FW_VFGATE_FAIL,
	AMDGV_ERROR_FW_XGMI_LOAD_FAIL,

	AMDGV_ERROR_FW_XGMI_UNLOAD_FAIL,
	AMDGV_ERROR_FW_XGMI_TA_INVOKE_FAIL,

	AMDGV_ERROR_FW_TMR_INIT_FAIL,
	AMDGV_ERROR_FW_NOT_SUPPORTED_FEATURE,
	AMDGV_ERROR_FW_GET_PSP_TRACELOG_FAIL,

	AMDGV_ERROR_FW_SET_SNAPSHOT_ADDR_FAIL,
	AMDGV_ERROR_FW_SNAPSHOT_TRIGGER_FAIL,

	AMDGV_ERROR_FW_MIGRATION_GET_PSP_INFO_FAIL,
	AMDGV_ERROR_FW_MIGRATION_EXPORT_FAIL,
	AMDGV_ERROR_FW_MIGRATION_IMPORT_FAIL,

	AMDGV_ERROR_FW_BL_FAIL,
	AMDGV_ERROR_FW_RAS_BOOT_FAIL,

	AMDGV_ERROR_FW_MAILBOX_ERROR,

	AMDGV_ERROR_FW_RAS_MEM_TRAIN_FAIL,
	AMDGV_ERROR_FW_RAS_FW_LOAD_FAIL,
	AMDGV_ERROR_FW_RAS_WAFL_LINK_TRAIN_FAIL,
	AMDGV_ERROR_FW_RAS_XGMI_LINK_TRAIN_FAIL,
	AMDGV_ERROR_FW_RAS_USR_CP_LINK_TRAIN_FAIL,
	AMDGV_ERROR_FW_RAS_USR_DP_LINK_TRAIN_FAIL,
	AMDGV_ERROR_FW_RAS_HBM_MEM_TEST_FAIL,
	AMDGV_ERROR_FW_RAS_HBM_BIST_TEST_FAIL,
	AMDGV_ERROR_FW_RAS_BOOT_REG_READ_FAIL,

	AMDGV_ERROR_FW_MAX
};


enum AMDGV_ERROR_RESET {
	AMDGV_ERROR_RESET_GPU = AMDGV_START_SUBCODE(RESET),
	AMDGV_ERROR_RESET_GPU_FAILED,
	AMDGV_ERROR_RESET_FLR,
	AMDGV_ERROR_RESET_FLR_FAILED,
	AMDGV_ERROR_RESET_GPU_HIVE_FAILED,

	AMDGV_ERROR_RESET_MAX
};


enum AMDGV_ERROR_IOV {
	AMDGV_ERROR_IOV_NO_GPU_IOV_CAP = AMDGV_START_SUBCODE(IOV),
	AMDGV_ERROR_IOV_ASIC_NO_SRIOV_SUPPORT,
	AMDGV_ERROR_IOV_ENABLE_SRIOV_FAIL,
	AMDGV_ERROR_IOV_CMD_TIMEOUT,
	AMDGV_ERROR_IOV_CMD_ERROR,

	AMDGV_ERROR_IOV_INIT_IV_RING_FAIL,
	AMDGV_ERROR_IOV_SRIOV_STRIDE_ERROR,
	AMDGV_ERROR_IOV_WS_SAVE_TIMEOUT,
	AMDGV_ERROR_IOV_WS_IDLE_TIMEOUT,
	AMDGV_ERROR_IOV_WS_RUN_TIMEOUT,
	AMDGV_ERROR_IOV_WS_LOAD_TIMEOUT,
	AMDGV_ERROR_IOV_WS_SHUTDOWN_TIMEOUT,
	AMDGV_ERROR_IOV_WS_ALREADY_SHUTDOWN,
	AMDGV_ERROR_IOV_WS_INFINITE_LOOP,
	AMDGV_ERROR_IOV_WS_REENTRANT_ERROR,

	AMDGV_ERROR_IOV_MAX
};


enum AMDGV_ERROR_ECC {
	AMDGV_ERROR_ECC_UCE = AMDGV_START_SUBCODE(ECC),
	AMDGV_ERROR_ECC_CE,
	AMDGV_ERROR_ECC_IN_PF_FB,
	AMDGV_ERROR_ECC_IN_CRI_REG,
	AMDGV_ERROR_ECC_IN_VF_CRI,
	AMDGV_ERROR_ECC_REACH_THD,
	AMDGV_ERROR_ECC_VF_CE,
	AMDGV_ERROR_ECC_VF_UE,
	AMDGV_ERROR_ECC_IN_SAME_ROW,
	AMDGV_ERROR_ECC_UMC_UE,
	AMDGV_ERROR_ECC_GFX_CE,
	AMDGV_ERROR_ECC_GFX_UE,
	AMDGV_ERROR_ECC_SDMA_CE,
	AMDGV_ERROR_ECC_SDMA_UE,
	AMDGV_ERROR_ECC_GFX_CE_TOTAL,
	AMDGV_ERROR_ECC_GFX_UE_TOTAL,
	AMDGV_ERROR_ECC_SDMA_CE_TOTAL,
	AMDGV_ERROR_ECC_SDMA_UE_TOTAL,
	AMDGV_ERROR_ECC_UMC_CE_TOTAL,
	AMDGV_ERROR_ECC_UMC_UE_TOTAL,
	AMDGV_ERROR_ECC_MMHUB_CE,
	AMDGV_ERROR_ECC_MMHUB_UE,
	AMDGV_ERROR_ECC_MMHUB_CE_TOTAL,
	AMDGV_ERROR_ECC_MMHUB_UE_TOTAL,
	AMDGV_ERROR_ECC_XGMI_WAFL_CE,
	AMDGV_ERROR_ECC_XGMI_WAFL_UE,
	AMDGV_ERROR_ECC_XGMI_WAFL_CE_TOTAL,
	AMDGV_ERROR_ECC_XGMI_WAFL_UE_TOTAL,
	AMDGV_ERROR_ECC_FATAL_ERROR,
	AMDGV_ERROR_ECC_POISON_CONSUMPTION,
	AMDGV_ERROR_ECC_ACA_DUMP,
	AMDGV_ERROR_ECC_WRONG_SOCKET_ID,
	AMDGV_ERROR_ECC_ACA_UNKNOWN_BLOCK_INSTANCE,
	AMDGV_ERROR_ECC_UNKNOWN_CHIPLET_CE,
	AMDGV_ERROR_ECC_UNKNOWN_CHIPLET_UE,
	AMDGV_ERROR_ECC_UMC_CHIPLET_CE,
	AMDGV_ERROR_ECC_UMC_CHIPLET_UE,
	AMDGV_ERROR_ECC_GFX_CHIPLET_CE,
	AMDGV_ERROR_ECC_GFX_CHIPLET_UE,
	AMDGV_ERROR_ECC_SDMA_CHIPLET_CE,
	AMDGV_ERROR_ECC_SDMA_CHIPLET_UE,
	AMDGV_ERROR_ECC_MMHUB_CHIPLET_CE,
	AMDGV_ERROR_ECC_MMHUB_CHIPLET_UE,
	AMDGV_ERROR_ECC_XGMI_WAFL_CHIPLET_CE,
	AMDGV_ERROR_ECC_XGMI_WAFL_CHIPLET_UE,
	AMDGV_ERROR_ECC_BAD_PAGE_ENTRIES_FOUND,
	AMDGV_ERROR_ECC_UMC_DE,
	AMDGV_ERROR_ECC_UMC_DE_TOTAL,
	AMDGV_ERROR_ECC_UNKNOWN,
	AMDGV_ERROR_ECC_EEPROM_REACH_THD,
	AMDGV_ERROR_ECC_UMC_CHIPLET_DE,
	AMDGV_ERROR_ECC_UNKNOWN_CHIPLET_DE,
	AMDGV_ERROR_ECC_EEPROM_CHK_MISMATCH,
	AMDGV_ERROR_ECC_EEPROM_RESET,
	AMDGV_ERROR_ECC_EEPROM_RESET_FAILED,
	AMDGV_ERROR_ECC_EEPROM_APPEND,
	AMDGV_ERROR_ECC_THD_CHANGED,
	AMDGV_ERROR_ECC_DUP_ENTRIES,
	AMDGV_ERROR_ECC_EEPROM_WRONG_HDR,
	AMDGV_ERROR_ECC_EEPROM_WRONG_VER,
	AMDGV_ERROR_ECC_BAD_PAGE_APPEND,

	AMDGV_ERROR_ECC_MAX
};


enum AMDGV_ERROR_PP {
	AMDGV_ERROR_PP_SET_DPM_POLICY_FAIL = AMDGV_START_SUBCODE(PP),
	AMDGV_ERROR_PP_ACTIVATE_DPM_POLICY_FAIL,
	AMDGV_ERROR_PP_I2C_SLAVE_NOT_PRESENT,
	AMDGV_ERROR_PP_THROTTLER_EVENT,

	AMDGV_ERROR_PP_MAX
};


enum AMDGV_ERROR_SCHED {
	AMDGV_ERROR_SCHED_WORLD_SWITCH_FAIL = AMDGV_START_SUBCODE(SCHED),
	AMDGV_ERROR_SCHED_DISABLE_AUTO_HW_SWITCH_FAIL,
	AMDGV_ERROR_SCHED_ENABLE_AUTO_HW_SWITCH_FAIL,
	AMDGV_ERROR_SCHED_GFX_SAVE_REG_FAIL,
	AMDGV_ERROR_SCHED_GFX_IDLE_REG_FAIL,

	AMDGV_ERROR_SCHED_GFX_RUN_REG_FAIL,
	AMDGV_ERROR_SCHED_GFX_LOAD_REG_FAIL,
	AMDGV_ERROR_SCHED_GFX_INIT_REG_FAIL,
	AMDGV_ERROR_SCHED_MM_SAVE_REG_FAIL,
	AMDGV_ERROR_SCHED_MM_IDLE_REG_FAIL,

	AMDGV_ERROR_SCHED_MM_RUN_REG_FAIL,
	AMDGV_ERROR_SCHED_MM_LOAD_REG_FAIL,
	AMDGV_ERROR_SCHED_MM_INIT_REG_FAIL,
	AMDGV_ERROR_SCHED_INIT_GPU_FAIL,
	AMDGV_ERROR_SCHED_RUN_GPU_FAIL,

	AMDGV_ERROR_SCHED_SAVE_GPU_STATE_FAIL,
	AMDGV_ERROR_SCHED_LOAD_GPU_STATE_FAIL,
	AMDGV_ERROR_SCHED_IDLE_GPU_FAIL,
	AMDGV_ERROR_SCHED_FINI_GPU_FAIL,
	AMDGV_ERROR_SCHED_DEAD_VF,

	AMDGV_ERROR_SCHED_EVENT_QUEUE_FULL,
	AMDGV_ERROR_SCHED_SHUTDOWN_VF_FAIL,
	AMDGV_ERROR_SCHED_RESET_VF_NUM_FAIL,
	AMDGV_ERROR_SCHED_IGNORE_EVENT,
	AMDGV_ERROR_SCHED_PF_SWITCH_FAIL,

	AMDGV_ERROR_SCHED_MAX
};


enum AMDGV_ERROR_VF {
	AMDGV_ERROR_VF_ATOMBIOS_INIT_FAIL = AMDGV_START_SUBCODE(VF),
	AMDGV_ERROR_VF_NO_VBIOS,
	AMDGV_ERROR_VF_GPU_POST_ERROR,
	AMDGV_ERROR_VF_ATOMBIOS_GET_CLOCK_FAIL,
	AMDGV_ERROR_VF_FENCE_INIT_FAIL,

	AMDGV_ERROR_VF_AMDGPU_INIT_FAIL,
	AMDGV_ERROR_VF_IB_INIT_FAIL,
	AMDGV_ERROR_VF_AMDGPU_LATE_INIT_FAIL,
	AMDGV_ERROR_VF_ASIC_RESUME_FAIL,
	AMDGV_ERROR_VF_GPU_RESET_FAIL,

	AMDGV_ERROR_VF_MAX
};


enum AMDGV_ERROR_VBIOS {
	AMDGV_ERROR_VBIOS_INVALID = AMDGV_START_SUBCODE(VBIOS),
	AMDGV_ERROR_VBIOS_IMAGE_MISSING,
	AMDGV_ERROR_VBIOS_CHECKSUM_ERR,
	AMDGV_ERROR_VBIOS_POST_FAIL,
	AMDGV_ERROR_VBIOS_READ_FAIL,

	AMDGV_ERROR_VBIOS_READ_IMG_HEADER_FAIL,
	AMDGV_ERROR_VBIOS_READ_IMG_SIZE_FAIL,
	AMDGV_ERROR_VBIOS_GET_FW_INFO_FAIL,
	AMDGV_ERROR_VBIOS_GET_TBL_REVISION_FAIL,
	AMDGV_ERROR_VBIOS_PARSER_TBL_FAIL,

	AMDGV_ERROR_VBIOS_IP_DISCOVERY_FAIL,
	AMDGV_ERROR_VBIOS_TIMEOUT,

	AMDGV_ERROR_VBIOS_IP_DISCOVERY_BINARY_CHECKSUM_FAIL,
	AMDGV_ERROR_VBIOS_IP_DISCOVERY_TABLE_CHECKSUM_FAIL,
	AMDGV_ERROR_VBIOS_MAX
};

enum AMDGV_ERROR_GUARD {
	AMDGV_ERROR_GUARD_RESET_FAIL = AMDGV_START_SUBCODE(GUARD),
	AMDGV_ERROR_GUARD_EVENT_OVERFLOW,

	AMDGV_ERROR_GUARD_MAX
};

enum AMDGV_ERROR_GPUMON {
	AMDGV_ERROR_GPUMON_INVALID_OPTION = AMDGV_START_SUBCODE(GPUMON),
	AMDGV_ERROR_GPUMON_INVALID_VF_INDEX,
	AMDGV_ERROR_GPUMON_INVALID_FB_SIZE,
	AMDGV_ERROR_GPUMON_NO_SUITABLE_SPACE,
	AMDGV_ERROR_GPUMON_NO_AVAILABLE_SLOT,

	AMDGV_ERROR_GPUMON_OVERSIZE_ALLOCATION,
	AMDGV_ERROR_GPUMON_OVERLAPPING_FB,
	AMDGV_ERROR_GPUMON_INVALID_GFX_TIMESLICE,
	AMDGV_ERROR_GPUMON_INVALID_MM_TIMESLICE,
	AMDGV_ERROR_GPUMON_INVALID_GFX_PART,

	AMDGV_ERROR_GPUMON_VF_BUSY,
	AMDGV_ERROR_GPUMON_INVALID_VF_NUM,
	AMDGV_ERROR_GPUMON_NOT_SUPPORTED,
	AMDGV_ERROR_GPUMON_SET_ALREADY,
	AMDGV_ERROR_GPUMON_INVALID_MODE,

	AMDGV_ERROR_GPUMON_MAX
};

enum AMDGV_ERROR_MMSCH {
	AMDGV_ERROR_MMSCH_IGNORED_JOB = AMDGV_START_SUBCODE(MMSCH),
	AMDGV_ERROR_MMSCH_UNSUPPORTED_VCN_FW,

	AMDGV_ERROR_MMSCH_MAX
};

enum AMDGV_ERROR_XGMI {
	AMDGV_ERROR_XGMI_TOPOLOGY_UPDATE_FAILED = AMDGV_START_SUBCODE(XGMI),
	AMDGV_ERROR_XGMI_TOPOLOGY_HW_INIT_UPDATE,
	AMDGV_ERROR_XGMI_TOPOLOGY_UPDATE_DONE,
	AMDGV_ERROR_XGMI_FB_SHARING_SETTING_ERROR,
	AMDGV_ERROR_XGMI_FB_SHARING_SETTING_RESET,

	AMDGV_ERROR_XGMI_MAX
};

enum amdgv_bp_msg_type {
	AMDGV_BP_MSG_INVALID,
	AMDGV_BP_MSG_IN_PF_FB,
	AMDGV_BP_MSG_IN_CRITICAL_REGION,
	AMDGV_BP_MSG_IN_VF_CRITICAL_REGION,
	AMDGV_BP_MSG_IN_SAME_ROW,
	AMDGV_BP_MSG_RECORD_THRESHOLD_REACHED,
};

#undef AMDGV_START_SUBCODE

/**
 * Information captured for each error from a SR-IOV GPU device
 *
 * @timestamp: Time stamp (in nanoseconds) when the error happened
 * @error_code: unique error code that describes the type of error. This
 *  numeric code can be used as an index into a string table to obtain
 *  a human readable description of the error. The high 4 bits indicates the
 *  error category, such as GIM, PF, VF, VBIOS, etc. The low 12 bits indicates
 * the error index in the sub-category error text list.
 * @error_level: indicates the severity of the error
 * @vf_idx: PF or VF function_index
 * @error_data: Data value associated with the specific error.
 * @error_location: Code address where the error was originally captured.
 */
struct amdgv_error_entry {
	uint64_t timestamp;
	uint32_t error_code;
	uint8_t  error_level;
	uint32_t error_flags;
	uint32_t vf_idx;
	uint64_t error_data;
	uint64_t error_location;
	uint64_t error_data_ext[AMDGV_GPU_ERROR_EXT_MAX_ARGS];
};

struct amdgv_error_notifier;

static const int default_filter_table[] = {
	AMDGV_ERROR_IOV_CMD_TIMEOUT,
	AMDGV_ERROR_RESET_FLR,
};

int amdgv_error_get_error_text(uint32_t error_code, uint64_t data, char *buf, uint32_t size);
int amdgv_error_get_error_text_ext(uint32_t error_code, uint64_t data, char *buf, uint32_t size, uint64_t *data_ext);

void amdgv_put_event(amdgv_dev_t dev, uint32_t idx_vf, uint32_t error_code,
		     uint64_t error_data, const char *func_name, uint32_t line_num);
void amdgv_put_event_ext(amdgv_dev_t dev, uint32_t idx_vf, uint32_t error_code,
		     uint64_t error_data, const char *func_name, uint32_t line_num, ...);

int amdgv_error_get_error(amdgv_dev_t dev, struct amdgv_error_notifier *notifier,
			  struct amdgv_error_entry **error_entry);

int amdgv_error_is_pending(amdgv_dev_t dev, struct amdgv_error_notifier *notifier);

void amdgv_error_log_put_test_entry(amdgv_dev_t dev, int category);

int amdgv_error_alloc_new_notifier(amdgv_dev_t dev, uint64_t event_mask, void *priv,
				   struct amdgv_error_notifier **notifier);

void amdgv_error_delete_notifier(amdgv_dev_t dev, struct amdgv_error_notifier *notifier);

int amdgv_error_dump_stack_filter_set(amdgv_dev_t dev, uint32_t code, bool add_enter);
void amdgv_initialize_default_filters(amdgv_dev_t dev);

#endif
