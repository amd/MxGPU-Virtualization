#!/usr/bin/env python3

#
# Copyright (c) 2022 Advanced Micro Devices, Inc. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import ctypes
import re
from enum import IntEnum, Enum
from collections.abc import Iterable


from . import amdsmi_wrapper
from .amdsmi_exception import *


class AmdSmiTemperatureType(IntEnum):
    EDGE = amdsmi_wrapper.AMDSMI_TEMPERATURE_TYPE_EDGE
    HOTSPOT = amdsmi_wrapper.AMDSMI_TEMPERATURE_TYPE_HOTSPOT
    JUNCTION = amdsmi_wrapper.AMDSMI_TEMPERATURE_TYPE_JUNCTION
    VRAM = amdsmi_wrapper.AMDSMI_TEMPERATURE_TYPE_VRAM
    HBM_0 = amdsmi_wrapper.AMDSMI_TEMPERATURE_TYPE_HBM_0
    HBM_1 = amdsmi_wrapper.AMDSMI_TEMPERATURE_TYPE_HBM_1
    HBM_2 = amdsmi_wrapper.AMDSMI_TEMPERATURE_TYPE_HBM_2
    HBM_3 = amdsmi_wrapper.AMDSMI_TEMPERATURE_TYPE_HBM_3
    PLX = amdsmi_wrapper.AMDSMI_TEMPERATURE_TYPE_PLX

class AmdSmiTemperatureMetric(IntEnum):
    CURRENT = amdsmi_wrapper.AMDSMI_TEMP_CURRENT
    MAX = amdsmi_wrapper.AMDSMI_TEMP_MAX
    MIN = amdsmi_wrapper.AMDSMI_TEMP_MIN
    MAX_HYST = amdsmi_wrapper.AMDSMI_TEMP_MAX_HYST
    MIN_HYST = amdsmi_wrapper.AMDSMI_TEMP_MIN_HYST
    CRITICAL = amdsmi_wrapper.AMDSMI_TEMP_CRITICAL
    CRITICAL_HYST = amdsmi_wrapper.AMDSMI_TEMP_CRITICAL_HYST
    EMERGENCY = amdsmi_wrapper.AMDSMI_TEMP_EMERGENCY
    EMERGENCY_HYST = amdsmi_wrapper.AMDSMI_TEMP_EMERGENCY_HYST
    CRIT_MIN = amdsmi_wrapper.AMDSMI_TEMP_CRIT_MIN
    CRIT_MIN_HYST = amdsmi_wrapper.AMDSMI_TEMP_CRIT_MIN_HYST
    OFFSET = amdsmi_wrapper.AMDSMI_TEMP_OFFSET
    LOWEST = amdsmi_wrapper.AMDSMI_TEMP_LOWEST
    HIGHEST = amdsmi_wrapper.AMDSMI_TEMP_HIGHEST
    SHUTDOWN = amdsmi_wrapper.AMDSMI_TEMP_SHUTDOWN

class AmdSmiClkType(IntEnum):
    SYS = amdsmi_wrapper.AMDSMI_CLK_TYPE_SYS
    GFX = amdsmi_wrapper.AMDSMI_CLK_TYPE_GFX
    DF = amdsmi_wrapper.AMDSMI_CLK_TYPE_DF
    DCEF = amdsmi_wrapper.AMDSMI_CLK_TYPE_DCEF
    SOC = amdsmi_wrapper.AMDSMI_CLK_TYPE_SOC
    MEM = amdsmi_wrapper.AMDSMI_CLK_TYPE_MEM
    PCIE = amdsmi_wrapper.AMDSMI_CLK_TYPE_PCIE
    VCLK0 = amdsmi_wrapper.AMDSMI_CLK_TYPE_VCLK0
    VCLK1 = amdsmi_wrapper.AMDSMI_CLK_TYPE_VCLK1
    DCLK0 = amdsmi_wrapper.AMDSMI_CLK_TYPE_DCLK0
    DCLK1 = amdsmi_wrapper.AMDSMI_CLK_TYPE_DCLK1


class AmdSmiVfState(IntEnum):
    UNAVAILABLE = amdsmi_wrapper.AMDSMI_VF_STATE_UNAVAILABLE
    AVAILABLE = amdsmi_wrapper.AMDSMI_VF_STATE_AVAILABLE
    ACTIVE = amdsmi_wrapper.AMDSMI_VF_STATE_ACTIVE
    SUSPENDED = amdsmi_wrapper.AMDSMI_VF_STATE_SUSPENDED
    FULLACCESS = amdsmi_wrapper.AMDSMI_VF_STATE_FULLACCESS
    DEFAULT_AVAILABLE = amdsmi_wrapper.AMDSMI_VF_STATE_DEFAULT_AVAILABLE


class AmdSmiGuardType(IntEnum):
    FLR = amdsmi_wrapper.AMDSMI_GUARD_EVENT_FLR
    EXCLUSIVE_MOD = amdsmi_wrapper.AMDSMI_GUARD_EVENT_EXCLUSIVE_MOD
    EXCLUSIVE_TIMEOUT = amdsmi_wrapper.AMDSMI_GUARD_EVENT_EXCLUSIVE_TIMEOUT
    ALL_INT = amdsmi_wrapper.AMDSMI_GUARD_EVENT_ALL_INT


class AmdSmiGuardState(IntEnum):
    NORMAL = amdsmi_wrapper.AMDSMI_GUARD_STATE_NORMAL
    FULL = amdsmi_wrapper.AMDSMI_GUARD_STATE_FULL
    OVERFLOW = amdsmi_wrapper.AMDSMI_GUARD_STATE_OVERFLOW


class AmdSmiVramType(IntEnum):
    UNKNOWN = amdsmi_wrapper.AMDSMI_VRAM_TYPE_UNKNOWN
    # HBM
    HBM = amdsmi_wrapper.AMDSMI_VRAM_TYPE_HBM
    HBM2 = amdsmi_wrapper.AMDSMI_VRAM_TYPE_HBM2
    HBM2E = amdsmi_wrapper.AMDSMI_VRAM_TYPE_HBM2E
    HBM3 = amdsmi_wrapper.AMDSMI_VRAM_TYPE_HBM3
    # DDR
    DDR2 = amdsmi_wrapper.AMDSMI_VRAM_TYPE_DDR2
    DDR3 = amdsmi_wrapper.AMDSMI_VRAM_TYPE_DDR3
    DDR4 = amdsmi_wrapper.AMDSMI_VRAM_TYPE_DDR4
    # GDDR
    GDDR1 = amdsmi_wrapper.AMDSMI_VRAM_TYPE_GDDR1
    GDDR2 = amdsmi_wrapper.AMDSMI_VRAM_TYPE_GDDR2
    GDDR3 = amdsmi_wrapper.AMDSMI_VRAM_TYPE_GDDR3
    GDDR4 = amdsmi_wrapper.AMDSMI_VRAM_TYPE_GDDR4
    GDDR5 = amdsmi_wrapper.AMDSMI_VRAM_TYPE_GDDR5
    GDDR6 = amdsmi_wrapper.AMDSMI_VRAM_TYPE_GDDR6
    GDDR7 = amdsmi_wrapper.AMDSMI_VRAM_TYPE_GDDR7


class AmdSmiVramVendor(IntEnum):
    SAMSUNG = amdsmi_wrapper.AMDSMI_VRAM_VENDOR_SAMSUNG
    INFINEON = amdsmi_wrapper.AMDSMI_VRAM_VENDOR_INFINEON
    ELPIDA = amdsmi_wrapper.AMDSMI_VRAM_VENDOR_ELPIDA
    ETRON = amdsmi_wrapper.AMDSMI_VRAM_VENDOR_ETRON
    NANYA = amdsmi_wrapper.AMDSMI_VRAM_VENDOR_NANYA
    HYNIX = amdsmi_wrapper.AMDSMI_VRAM_VENDOR_HYNIX
    MOSEL = amdsmi_wrapper.AMDSMI_VRAM_VENDOR_MOSEL
    WINBOND = amdsmi_wrapper.AMDSMI_VRAM_VENDOR_WINBOND
    ESMT = amdsmi_wrapper.AMDSMI_VRAM_VENDOR_ESMT
    MICRON = amdsmi_wrapper.AMDSMI_VRAM_VENDOR_MICRON
    UNKNOWN = amdsmi_wrapper.AMDSMI_VRAM_VENDOR_UNKNOWN


class AmdSmiCacheProperty(IntEnum):
    ENABLED = amdsmi_wrapper.AMDSMI_CACHE_PROPERTY_ENABLED
    DATA_CACHE = amdsmi_wrapper.AMDSMI_CACHE_PROPERTY_DATA_CACHE
    INST_CACHE = amdsmi_wrapper.AMDSMI_CACHE_PROPERTY_INST_CACHE
    CPU_CACHE = amdsmi_wrapper.AMDSMI_CACHE_PROPERTY_CPU_CACHE
    SIMD_CACHE = amdsmi_wrapper.AMDSMI_CACHE_PROPERTY_SIMD_CACHE


class AmdSmiFwBlock(IntEnum):
    FW_ID_SMU = amdsmi_wrapper.AMDSMI_FW_ID_SMU
    FW_ID_CP_CE = amdsmi_wrapper.AMDSMI_FW_ID_CP_CE
    FW_ID_CP_PFP = amdsmi_wrapper.AMDSMI_FW_ID_CP_PFP
    FW_ID_CP_ME = amdsmi_wrapper.AMDSMI_FW_ID_CP_ME
    FW_ID_CP_MEC_JT1 = amdsmi_wrapper.AMDSMI_FW_ID_CP_MEC_JT1
    FW_ID_CP_MEC_JT2 = amdsmi_wrapper.AMDSMI_FW_ID_CP_MEC_JT2
    FW_ID_CP_MEC1 = amdsmi_wrapper.AMDSMI_FW_ID_CP_MEC1
    FW_ID_CP_MEC2 = amdsmi_wrapper.AMDSMI_FW_ID_CP_MEC2
    FW_ID_RLC = amdsmi_wrapper.AMDSMI_FW_ID_RLC
    FW_ID_SDMA0 = amdsmi_wrapper.AMDSMI_FW_ID_SDMA0
    FW_ID_SDMA1 = amdsmi_wrapper.AMDSMI_FW_ID_SDMA1
    FW_ID_SDMA2 = amdsmi_wrapper.AMDSMI_FW_ID_SDMA2
    FW_ID_SDMA3 = amdsmi_wrapper.AMDSMI_FW_ID_SDMA3
    FW_ID_SDMA4 = amdsmi_wrapper.AMDSMI_FW_ID_SDMA4
    FW_ID_SDMA5 = amdsmi_wrapper.AMDSMI_FW_ID_SDMA5
    FW_ID_SDMA6 = amdsmi_wrapper.AMDSMI_FW_ID_SDMA6
    FW_ID_SDMA7 = amdsmi_wrapper.AMDSMI_FW_ID_SDMA7
    FW_ID_VCN = amdsmi_wrapper.AMDSMI_FW_ID_VCN
    FW_ID_UVD = amdsmi_wrapper.AMDSMI_FW_ID_UVD
    FW_ID_VCE = amdsmi_wrapper.AMDSMI_FW_ID_VCE
    FW_ID_ISP = amdsmi_wrapper.AMDSMI_FW_ID_ISP
    FW_ID_DMCU_ERAM = amdsmi_wrapper.AMDSMI_FW_ID_DMCU_ERAM
    FW_ID_DMCU_ISR = amdsmi_wrapper.AMDSMI_FW_ID_DMCU_ISR
    FW_ID_RLC_RESTORE_LIST_GPM_MEM = amdsmi_wrapper.AMDSMI_FW_ID_RLC_RESTORE_LIST_GPM_MEM
    FW_ID_RLC_RESTORE_LIST_SRM_MEM = amdsmi_wrapper.AMDSMI_FW_ID_RLC_RESTORE_LIST_SRM_MEM
    FW_ID_RLC_RESTORE_LIST_CNTL = amdsmi_wrapper.AMDSMI_FW_ID_RLC_RESTORE_LIST_CNTL
    FW_ID_RLC_V = amdsmi_wrapper.AMDSMI_FW_ID_RLC_V
    FW_ID_MMSCH = amdsmi_wrapper.AMDSMI_FW_ID_MMSCH
    FW_ID_PSP_SYSDRV = amdsmi_wrapper.AMDSMI_FW_ID_PSP_SYSDRV
    FW_ID_PSP_SOSDRV = amdsmi_wrapper.AMDSMI_FW_ID_PSP_SOSDRV
    FW_ID_PSP_TOC = amdsmi_wrapper.AMDSMI_FW_ID_PSP_TOC
    FW_ID_PSP_KEYDB = amdsmi_wrapper.AMDSMI_FW_ID_PSP_KEYDB
    FW_ID_DFC = amdsmi_wrapper.AMDSMI_FW_ID_DFC
    FW_ID_PSP_SPL = amdsmi_wrapper.AMDSMI_FW_ID_PSP_SPL
    FW_ID_DRV_CAP = amdsmi_wrapper.AMDSMI_FW_ID_DRV_CAP
    FW_ID_MC = amdsmi_wrapper.AMDSMI_FW_ID_MC
    FW_ID_PSP_BL = amdsmi_wrapper.AMDSMI_FW_ID_PSP_BL
    FW_ID_CP_PM4 = amdsmi_wrapper.AMDSMI_FW_ID_CP_PM4
    FW_ID_RLC_P = amdsmi_wrapper.AMDSMI_FW_ID_RLC_P
    FW_ID_SEC_POLICY_STAGE2 = amdsmi_wrapper.AMDSMI_FW_ID_SEC_POLICY_STAGE2
    FW_ID_REG_ACCESS_WHITELIST = amdsmi_wrapper.AMDSMI_FW_ID_REG_ACCESS_WHITELIST
    FW_ID_IMU_DRAM = amdsmi_wrapper.AMDSMI_FW_ID_IMU_DRAM
    FW_ID_IMU_IRAM = amdsmi_wrapper.AMDSMI_FW_ID_IMU_IRAM
    FW_ID_SDMA_TH0 = amdsmi_wrapper.AMDSMI_FW_ID_SDMA_TH0
    FW_ID_SDMA_TH1 = amdsmi_wrapper.AMDSMI_FW_ID_SDMA_TH1
    FW_ID_CP_MES = amdsmi_wrapper.AMDSMI_FW_ID_CP_MES
    FW_ID_MES_STACK = amdsmi_wrapper.AMDSMI_FW_ID_MES_STACK
    FW_ID_MES_THREAD1 = amdsmi_wrapper.AMDSMI_FW_ID_MES_THREAD1
    FW_ID_MES_THREAD1_STACK = amdsmi_wrapper.AMDSMI_FW_ID_MES_THREAD1_STACK
    FW_ID_RLX6 = amdsmi_wrapper.AMDSMI_FW_ID_RLX6
    FW_ID_RLX6_DRAM_BOOT = amdsmi_wrapper.AMDSMI_FW_ID_RLX6_DRAM_BOOT
    FW_ID_RS64_ME = amdsmi_wrapper.AMDSMI_FW_ID_RS64_ME
    FW_ID_RS64_ME_P0_DATA = amdsmi_wrapper.AMDSMI_FW_ID_RS64_ME_P0_DATA
    FW_ID_RS64_ME_P1_DATA = amdsmi_wrapper.AMDSMI_FW_ID_RS64_ME_P1_DATA
    FW_ID_RS64_PFP = amdsmi_wrapper.AMDSMI_FW_ID_RS64_PFP
    FW_ID_RS64_PFP_P0_DATA = amdsmi_wrapper.AMDSMI_FW_ID_RS64_PFP_P0_DATA
    FW_ID_RS64_PFP_P1_DATA = amdsmi_wrapper.AMDSMI_FW_ID_RS64_PFP_P1_DATA
    FW_ID_RS64_MEC = amdsmi_wrapper.AMDSMI_FW_ID_RS64_MEC
    FW_ID_RS64_MEC_P0_DATA = amdsmi_wrapper.AMDSMI_FW_ID_RS64_MEC_P0_DATA
    FW_ID_RS64_MEC_P1_DATA = amdsmi_wrapper.AMDSMI_FW_ID_RS64_MEC_P1_DATA
    FW_ID_RS64_MEC_P2_DATA = amdsmi_wrapper.AMDSMI_FW_ID_RS64_MEC_P2_DATA
    FW_ID_RS64_MEC_P3_DATA = amdsmi_wrapper.AMDSMI_FW_ID_RS64_MEC_P3_DATA
    FW_ID_PPTABLE = amdsmi_wrapper.AMDSMI_FW_ID_PPTABLE
    FW_ID_PSP_SOC = amdsmi_wrapper.AMDSMI_FW_ID_PSP_SOC
    FW_ID_PSP_DBG = amdsmi_wrapper.AMDSMI_FW_ID_PSP_DBG
    FW_ID_PSP_INTF = amdsmi_wrapper.AMDSMI_FW_ID_PSP_INTF
    FW_ID_RLX6_CORE1 = amdsmi_wrapper.AMDSMI_FW_ID_RLX6_CORE1
    FW_ID_RLX6_DRAM_BOOT_CORE1 = amdsmi_wrapper.AMDSMI_FW_ID_RLX6_DRAM_BOOT_CORE1
    FW_ID_RLCV_LX7 = amdsmi_wrapper.AMDSMI_FW_ID_RLCV_LX7
    FW_ID_RLC_SAVE_RESTORE_LIST = amdsmi_wrapper.AMDSMI_FW_ID_RLC_SAVE_RESTORE_LIST
    FW_ID_ASD = amdsmi_wrapper.AMDSMI_FW_ID_ASD
    FW_ID_TA_RAS = amdsmi_wrapper.AMDSMI_FW_ID_TA_RAS
    FW_ID_XGMI = amdsmi_wrapper.AMDSMI_FW_ID_XGMI
    FW_ID_RLC_SRLG = amdsmi_wrapper.AMDSMI_FW_ID_RLC_SRLG
    FW_ID_RLC_SRLS = amdsmi_wrapper.AMDSMI_FW_ID_RLC_SRLS
    FW_ID_SMC = amdsmi_wrapper.AMDSMI_FW_ID_SMC
    FW_ID_DMCU = amdsmi_wrapper.AMDSMI_FW_ID_DMCU
    FW_ID_PSP_RAS = amdsmi_wrapper.AMDSMI_FW_ID_PSP_RAS
    FW_ID_P2S_TABLE = amdsmi_wrapper.AMDSMI_FW_ID_P2S_TABLE


class AmdSmiEventCategory(IntEnum):
    NOT_USED = amdsmi_wrapper.AMDSMI_EVENT_CATEGORY_NON_USED
    DRIVER = amdsmi_wrapper.AMDSMI_EVENT_CATEGORY_DRIVER
    RESET = amdsmi_wrapper.AMDSMI_EVENT_CATEGORY_RESET
    SCHED = amdsmi_wrapper.AMDSMI_EVENT_CATEGORY_SCHED
    VBIOS = amdsmi_wrapper.AMDSMI_EVENT_CATEGORY_VBIOS
    ECC = amdsmi_wrapper.AMDSMI_EVENT_CATEGORY_ECC
    PP = amdsmi_wrapper.AMDSMI_EVENT_CATEGORY_PP
    IOV = amdsmi_wrapper.AMDSMI_EVENT_CATEGORY_IOV
    VF = amdsmi_wrapper.AMDSMI_EVENT_CATEGORY_VF
    FW = amdsmi_wrapper.AMDSMI_EVENT_CATEGORY_FW
    GPU = amdsmi_wrapper.AMDSMI_EVENT_CATEGORY_GPU
    GUARD = amdsmi_wrapper.AMDSMI_EVENT_CATEGORY_GUARD
    GPUMON = amdsmi_wrapper.AMDSMI_EVENT_CATEGORY_GPUMON
    MMSCH = amdsmi_wrapper.AMDSMI_EVENT_CATEGORY_MMSCH
    XGMI = amdsmi_wrapper.AMDSMI_EVENT_CATEGORY_XGMI
    ALL = amdsmi_wrapper.AMDSMI_EVENT_CATEGORY__MAX


class AmdSmiEventSeverity(IntEnum):
    HIGH = 0
    MED = 1
    LOW = 2
    WARN = 3
    INFO = 4
    ALL = 5


class AmdSmiVfConfigFlags(IntEnum):
    FB_SIZE_SET = amdsmi_wrapper.AMDSMI_VF_CONFIG_FB_SIZE_SET
    FB_OFFSET_SET = amdsmi_wrapper.AMDSMI_VF_CONFIG_FB_OFFSET_SET
    GFX_TIMESLICE_US_SET = amdsmi_wrapper.AMDSMI_VF_CONFIG_GFX_TIMESLICE_US_SET
    ENG_COMPUTE_BW_SET = amdsmi_wrapper.AMDSMI_VF_CONFIG_ENG_COMPUTE_BW_SET
    GUARD_THRESHOLD_FLR_SET = amdsmi_wrapper.AMDSMI_VF_CONFIG_GUARD_THRESHOLD_FLR_SET
    GUARD_THRESHOLD_EXCL_MOD_SET = amdsmi_wrapper.AMDSMI_VF_CONFIG_GUARD_THRESHOLD_EXCL_MOD_SET
    GUARD_THRESHOLD_EXCL_TIMEOUT_SET = amdsmi_wrapper.AMDSMI_VF_CONFIG_GUARD_THRESHOLD_EXCL_TIMEOUT_SET
    GUARD_THRESHOLD_ALL_INT_SET = amdsmi_wrapper.AMDSMI_VF_CONFIG_GUARD_THRESHOLD_ALL_INT_SET
    ENG_ENCODE_BW_UVD_SET = amdsmi_wrapper.AMDSMI_VF_CONFIG_ENG_ENCODE_BW_UVD_SET
    ENG_ENCODE_BW_VCE_SET = amdsmi_wrapper.AMDSMI_VF_CONFIG_ENG_ENCODE_BW_VCE_SET
    ENG_ENCODE_BW_UVD1_SET = amdsmi_wrapper.AMDSMI_VF_CONFIG_ENG_ENCODE_BW_UVD1_SET
    ENG_ENCODE_BW_VCN_SET = amdsmi_wrapper.AMDSMI_VF_CONFIG_ENG_ENCODE_BW_VCN_SET
    ENG_ENCODE_BW_VCN1_SET = amdsmi_wrapper.AMDSMI_VF_CONFIG_ENG_ENCODE_BW_VCN1_SET


class AmdSmiEventCategoryGpu(Enum):
    GPU_DEVICE_LOST = amdsmi_wrapper.AMDSMI_EVENT_GPU_DEVICE_LOST
    GPU_NOT_SUPPORTED = amdsmi_wrapper.AMDSMI_EVENT_GPU_NOT_SUPPORTED
    GPU_RMA = amdsmi_wrapper.AMDSMI_EVENT_GPU_RMA
    GPU_NOT_INITIALIZED = amdsmi_wrapper.AMDSMI_EVENT_GPU_NOT_INITIALIZED
    GPU_MMSCH_ABNORMAL_STATE = amdsmi_wrapper.AMDSMI_EVENT_GPU_MMSCH_ABNORMAL_STATE
    GPU_RLCV_ABNORMAL_STATE = amdsmi_wrapper.AMDSMI_EVENT_GPU_RLCV_ABNORMAL_STATE
    GPU_SDMA_ENGINE_BUSY = amdsmi_wrapper.AMDSMI_EVENT_GPU_SDMA_ENGINE_BUSY
    GPU_RLC_ENGINE_BUSY = amdsmi_wrapper.AMDSMI_EVENT_GPU_RLC_ENGINE_BUSY
    GPU_GC_ENGINE_BUSY = amdsmi_wrapper.AMDSMI_EVENT_GPU_GC_ENGINE_BUSY


class AmdSmiEventCategoryDriver(Enum):
    DRIVER_SPIN_LOCK_BUSY = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_SPIN_LOCK_BUSY
    DRIVER_ALLOC_SYSTEM_MEM_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_ALLOC_SYSTEM_MEM_FAIL
    DRIVER_CREATE_GFX_WORKQUEUE_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_CREATE_GFX_WORKQUEUE_FAIL
    DRIVER_CREATE_MM_WORKQUEUE_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_CREATE_MM_WORKQUEUE_FAIL
    DRIVER_BUFFER_OVERFLOW = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_BUFFER_OVERFLOW
    DRIVER_DEV_INIT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_DEV_INIT_FAIL
    DRIVER_CREATE_THREAD_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_CREATE_THREAD_FAIL
    DRIVER_NO_ACCESS_PCI_REGION = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_NO_ACCESS_PCI_REGION
    DRIVER_MMIO_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_MMIO_FAIL
    DRIVER_INTERRUPT_INIT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_INTERRUPT_INIT_FAIL
    DRIVER_INVALID_VALUE = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_INVALID_VALUE
    DRIVER_CREATE_MUTEX_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_CREATE_MUTEX_FAIL
    DRIVER_CREATE_TIMER_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_CREATE_TIMER_FAIL
    DRIVER_CREATE_EVENT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_CREATE_EVENT_FAIL
    DRIVER_CREATE_SPIN_LOCK_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_CREATE_SPIN_LOCK_FAIL
    DRIVER_ALLOC_FB_MEM_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_ALLOC_FB_MEM_FAIL
    DRIVER_ALLOC_DMA_MEM_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_ALLOC_DMA_MEM_FAIL
    DRIVER_NO_FB_MANAGER = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_NO_FB_MANAGER
    DRIVER_HW_INIT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_HW_INIT_FAIL
    DRIVER_SW_INIT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_SW_INIT_FAIL
    DRIVER_INIT_CONFIG_ERROR = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_INIT_CONFIG_ERROR
    DRIVER_ERROR_LOGGING_FAILED = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_ERROR_LOGGING_FAILED
    DRIVER_CREATE_RWLOCK_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_CREATE_RWLOCK_FAIL
    DRIVER_CREATE_RWSEMA_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_CREATE_RWSEMA_FAIL
    DRIVER_GET_READ_LOCK_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_GET_READ_LOCK_FAIL
    DRIVER_GET_WRITE_LOCK_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_GET_WRITE_LOCK_FAIL
    DRIVER_GET_READ_SEMA_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_GET_READ_SEMA_FAIL
    DRIVER_GET_WRITE_SEMA_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_GET_WRITE_SEMA_FAIL
    DRIVER_DIAG_DATA_INIT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_DIAG_DATA_INIT_FAIL
    DRIVER_DIAG_DATA_MEM_REQ_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_DIAG_DATA_MEM_REQ_FAIL
    DRIVER_DIAG_DATA_VADDR_REQ_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_DIAG_DATA_VADDR_REQ_FAIL
    DRIVER_DIAG_DATA_BUS_ADDR_REQ_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_DIAG_DATA_BUS_ADDR_REQ_FAIL
    DRIVER_HRTIMER_START_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_HRTIMER_START_FAIL
    DRIVER_CREATE_DRIVER_FILE_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_CREATE_DRIVER_FILE_FAIL
    DRIVER_CREATE_DEVICE_FILE_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_CREATE_DEVICE_FILE_FAIL
    DRIVER_CREATE_DEBUGFS_FILE_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_CREATE_DEBUGFS_FILE_FAIL
    DRIVER_CREATE_DEBUGFS_DIR_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_CREATE_DEBUGFS_DIR_FAIL
    DRIVER_PCI_ENABLE_DEVICE_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_PCI_ENABLE_DEVICE_FAIL
    DRIVER_FB_MAP_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_FB_MAP_FAIL
    DRIVER_DOORBELL_MAP_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_DOORBELL_MAP_FAIL
    DRIVER_PCI_REGISTER_DRIVER_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_PCI_REGISTER_DRIVER_FAIL
    DRIVER_ALLOC_IOVA_ALIGN_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_ALLOC_IOVA_ALIGN_FAIL
    DRIVER_ROM_MAP_FAIL = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_ROM_MAP_FAIL
    DRIVER_FULL_ACCESS_TIMEOUT = amdsmi_wrapper.AMDSMI_EVENT_DRIVER_FULL_ACCESS_TIMEOUT


class AmdSmiEventCategoryFw(Enum):
    FW_CMD_ALLOC_BUF_FAIL  = amdsmi_wrapper.AMDSMI_EVENT_FW_CMD_ALLOC_BUF_FAIL
    FW_CMD_BUF_PREP_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_CMD_BUF_PREP_FAIL
    FW_RING_INIT_FAIL =  amdsmi_wrapper.AMDSMI_EVENT_FW_RING_INIT_FAIL
    FW_FW_APPLY_SECURITY_POLICY_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_FW_APPLY_SECURITY_POLICY_FAIL
    FW_START_RING_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_START_RING_FAIL
    FW_FW_LOAD_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_FW_LOAD_FAIL
    FW_EXIT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_EXIT_FAIL
    FW_INIT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_INIT_FAIL
    FW_CMD_SUBMIT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_CMD_SUBMIT_FAIL
    FW_CMD_FENCE_WAIT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_CMD_FENCE_WAIT_FAIL
    FW_TMR_LOAD_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_TMR_LOAD_FAIL
    FW_TOC_LOAD_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_TOC_LOAD_FAIL
    FW_RAS_LOAD_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_RAS_LOAD_FAIL
    FW_RAS_UNLOAD_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_RAS_UNLOAD_FAIL
    FW_RAS_TA_INVOKE_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_RAS_TA_INVOKE_FAIL
    FW_RAS_TA_ERR_INJECT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_RAS_TA_ERR_INJECT_FAIL
    FW_ASD_LOAD_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_ASD_LOAD_FAIL
    FW_ASD_UNLOAD_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_ASD_UNLOAD_FAIL
    FW_AUTOLOAD_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_AUTOLOAD_FAIL
    FW_VFGATE_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_VFGATE_FAIL
    FW_XGMI_LOAD_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_XGMI_LOAD_FAIL
    FW_XGMI_UNLOAD_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_XGMI_UNLOAD_FAIL
    FW_XGMI_TA_INVOKE_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_XGMI_TA_INVOKE_FAIL
    FW_TMR_INIT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_TMR_INIT_FAIL
    FW_NOT_SUPPORTED_FEATURE = amdsmi_wrapper.AMDSMI_EVENT_FW_NOT_SUPPORTED_FEATURE
    FW_GET_PSP_TRACELOG_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_GET_PSP_TRACELOG_FAIL
    FW_SET_SNAPSHOT_ADDR_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_SET_SNAPSHOT_ADDR_FAIL
    FW_SNAPSHOT_TRIGGER_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_SNAPSHOT_TRIGGER_FAIL
    FW_MIGRATION_GET_PSP_INFO_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_MIGRATION_GET_PSP_INFO_FAIL
    FW_MIGRATION_EXPORT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_MIGRATION_EXPORT_FAIL
    FW_MIGRATION_IMPORT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_MIGRATION_IMPORT_FAIL
    FW_BL_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_BL_FAIL
    FW_RAS_BOOT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_FW_RAS_BOOT_FAIL
    FW_MAILBOX_ERROR = amdsmi_wrapper.AMDSMI_EVENT_FW_MAILBOX_ERROR


class AmdSmiEventCategoryReset(Enum):
    RESET_GPU = amdsmi_wrapper.AMDSMI_EVENT_RESET_GPU
    RESET_GPU_FAILED = amdsmi_wrapper.AMDSMI_EVENT_RESET_GPU_FAILED
    RESET_FLR = amdsmi_wrapper.AMDSMI_EVENT_RESET_FLR
    RESET_FLR_FAILED = amdsmi_wrapper.AMDSMI_EVENT_RESET_FLR_FAILED


class AmdSmiEventCategoryIOV(Enum):
    IOV_NO_GPU_IOV_CAP = amdsmi_wrapper.AMDSMI_EVENT_IOV_NO_GPU_IOV_CAP
    IOV_ASIC_NO_SRIOV_SUPPORT = amdsmi_wrapper.AMDSMI_EVENT_IOV_ASIC_NO_SRIOV_SUPPORT
    IOV_ENABLE_SRIOV_FAIL = amdsmi_wrapper.AMDSMI_EVENT_IOV_ENABLE_SRIOV_FAIL
    IOV_CMD_TIMEOUT = amdsmi_wrapper.AMDSMI_EVENT_IOV_CMD_TIMEOUT
    IOV_CMD_ERROR = amdsmi_wrapper.AMDSMI_EVENT_IOV_CMD_ERROR
    IOV_INIT_IV_RING_FAIL = amdsmi_wrapper.AMDSMI_EVENT_IOV_INIT_IV_RING_FAIL
    IOV_SRIOV_STRIDE_ERROR= amdsmi_wrapper.AMDSMI_EVENT_IOV_SRIOV_STRIDE_ERROR
    IOV_WS_SAVE_TIMEOUT = amdsmi_wrapper.AMDSMI_EVENT_IOV_WS_SAVE_TIMEOUT
    IOV_WS_IDLE_TIMEOUT = amdsmi_wrapper.AMDSMI_EVENT_IOV_WS_IDLE_TIMEOUT
    IOV_WS_RUN_TIMEOUT = amdsmi_wrapper.AMDSMI_EVENT_IOV_WS_RUN_TIMEOUT
    IOV_WS_LOAD_TIMEOUT = amdsmi_wrapper.AMDSMI_EVENT_IOV_WS_LOAD_TIMEOUT
    IOV_WS_SHUTDOWN_TIMEOUT = amdsmi_wrapper.AMDSMI_EVENT_IOV_WS_SHUTDOWN_TIMEOUT
    IOV_WS_ALREADY_SHUTDOWN = amdsmi_wrapper.AMDSMI_EVENT_IOV_WS_ALREADY_SHUTDOWN
    IOV_WS_INFINITE_LOOP = amdsmi_wrapper.AMDSMI_EVENT_IOV_WS_INFINITE_LOOP
    IOV_WS_REENTRANT_ERROR = amdsmi_wrapper.AMDSMI_EVENT_IOV_WS_REENTRANT_ERROR


class AmdSmiEventCategoryEcc(Enum):
    ECC_UCE = amdsmi_wrapper.AMDSMI_EVENT_ECC_UCE
    ECC_CE = amdsmi_wrapper.AMDSMI_EVENT_ECC_CE
    ECC_IN_PF_FB = amdsmi_wrapper.AMDSMI_EVENT_ECC_IN_PF_FB
    ECC_IN_CRI_REG = amdsmi_wrapper.AMDSMI_EVENT_ECC_IN_CRI_REG
    ECC_IN_VF_CRI = amdsmi_wrapper.AMDSMI_EVENT_ECC_IN_VF_CRI
    ECC_REACH_THD = amdsmi_wrapper.AMDSMI_EVENT_ECC_REACH_THD
    ECC_VF_CE = amdsmi_wrapper.AMDSMI_EVENT_ECC_VF_CE
    ECC_VF_UE = amdsmi_wrapper.AMDSMI_EVENT_ECC_VF_UE
    ECC_IN_SAME_ROW = amdsmi_wrapper.AMDSMI_EVENT_ECC_IN_SAME_ROW
    ECC_UMC_UE = amdsmi_wrapper.AMDSMI_EVENT_ECC_UMC_UE
    ECC_GFX_CE = amdsmi_wrapper.AMDSMI_EVENT_ECC_GFX_CE
    ECC_GFX_UE = amdsmi_wrapper.AMDSMI_EVENT_ECC_GFX_UE
    ECC_SDMA_CE = amdsmi_wrapper.AMDSMI_EVENT_ECC_SDMA_CE
    ECC_SDMA_UE = amdsmi_wrapper.AMDSMI_EVENT_ECC_SDMA_UE
    ECC_GFX_CE_TOTAL = amdsmi_wrapper.AMDSMI_EVENT_ECC_GFX_CE_TOTAL
    ECC_GFX_UE_TOTAL = amdsmi_wrapper.AMDSMI_EVENT_ECC_GFX_UE_TOTAL
    ECC_SDMA_CE_TOTAL = amdsmi_wrapper.AMDSMI_EVENT_ECC_SDMA_CE_TOTAL
    ECC_SDMA_UE_TOTAL = amdsmi_wrapper.AMDSMI_EVENT_ECC_SDMA_UE_TOTAL
    ECC_UMC_CE_TOTAL = amdsmi_wrapper.AMDSMI_EVENT_ECC_UMC_CE_TOTAL
    ECC_UMC_UE_TOTAL = amdsmi_wrapper.AMDSMI_EVENT_ECC_UMC_UE_TOTAL
    ECC_MMHUB_CE = amdsmi_wrapper.AMDSMI_EVENT_ECC_MMHUB_CE
    ECC_MMHUB_UE = amdsmi_wrapper.AMDSMI_EVENT_ECC_MMHUB_UE
    ECC_MMHUB_CE_TOTAL = amdsmi_wrapper.AMDSMI_EVENT_ECC_MMHUB_CE_TOTAL
    ECC_MMHUB_UE_TOTAL = amdsmi_wrapper.AMDSMI_EVENT_ECC_MMHUB_UE_TOTAL
    ECC_XGMI_WAFL_CE = amdsmi_wrapper.AMDSMI_EVENT_ECC_XGMI_WAFL_CE
    ECC_XGMI_WAFL_UE = amdsmi_wrapper.AMDSMI_EVENT_ECC_XGMI_WAFL_UE
    ECC_XGMI_WAFL_CE_TOTAL = amdsmi_wrapper.AMDSMI_EVENT_ECC_XGMI_WAFL_CE_TOTAL
    ECC_XGMI_WAFL_UE_TOTAL = amdsmi_wrapper.AMDSMI_EVENT_ECC_XGMI_WAFL_UE_TOTAL
    ECC_FATAL_ERROR = amdsmi_wrapper.AMDSMI_EVENT_ECC_FATAL_ERROR
    ECC_POISON_CONSUMPTION = amdsmi_wrapper.AMDSMI_EVENT_ECC_POISON_CONSUMPTION
    ECC_ACA_DUMP = amdsmi_wrapper.AMDSMI_EVENT_ECC_ACA_DUMP
    ECC_WRONG_SOCKET_ID = amdsmi_wrapper.AMDSMI_EVENT_ECC_WRONG_SOCKET_ID
    ECC_ACA_UNKNOWN_BLOCK_INSTANCE = amdsmi_wrapper.AMDSMI_EVENT_ECC_ACA_UNKNOWN_BLOCK_INSTANCE
    ECC_UNKNOWN_CHIPLET_CE = amdsmi_wrapper.AMDSMI_EVENT_ECC_UNKNOWN_CHIPLET_CE
    ECC_UNKNOWN_CHIPLET_UE = amdsmi_wrapper.AMDSMI_EVENT_ECC_UNKNOWN_CHIPLET_UE
    ECC_UMC_CHIPLET_CE = amdsmi_wrapper.AMDSMI_EVENT_ECC_UMC_CHIPLET_CE
    ECC_UMC_CHIPLET_UE = amdsmi_wrapper.AMDSMI_EVENT_ECC_UMC_CHIPLET_UE
    ECC_GFX_CHIPLET_CE = amdsmi_wrapper.AMDSMI_EVENT_ECC_GFX_CHIPLET_CE
    ECC_GFX_CHIPLET_UE = amdsmi_wrapper.AMDSMI_EVENT_ECC_GFX_CHIPLET_UE
    ECC_SDMA_CHIPLET_CE = amdsmi_wrapper.AMDSMI_EVENT_ECC_SDMA_CHIPLET_CE
    ECC_SDMA_CHIPLET_UE = amdsmi_wrapper.AMDSMI_EVENT_ECC_SDMA_CHIPLET_UE
    ECC_MMHUB_CHIPLET_CE = amdsmi_wrapper.AMDSMI_EVENT_ECC_MMHUB_CHIPLET_CE
    ECC_MMHUB_CHIPLET_UE = amdsmi_wrapper.AMDSMI_EVENT_ECC_MMHUB_CHIPLET_UE
    ECC_XGMI_WAFL_CHIPLET_CE = amdsmi_wrapper.AMDSMI_EVENT_ECC_XGMI_WAFL_CHIPLET_CE
    ECC_XGMI_WAFL_CHIPLET_UE = amdsmi_wrapper.AMDSMI_EVENT_ECC_XGMI_WAFL_CHIPLET_UE
    ECC_EEPROM_ENTRIES_FOUND = amdsmi_wrapper.AMDSMI_EVENT_ECC_EEPROM_ENTRIES_FOUND
    ECC_UMC_DE = amdsmi_wrapper.AMDSMI_EVENT_ECC_UMC_DE
    ECC_UMC_DE_TOTAL = amdsmi_wrapper.AMDSMI_EVENT_ECC_UMC_DE_TOTAL
    ECC_UNKNOWN = amdsmi_wrapper.AMDSMI_EVENT_ECC_UNKNOWN
    ECC_EEPROM_REACH_THD = amdsmi_wrapper.AMDSMI_EVENT_ECC_EEPROM_REACH_THD
    ECC_UMC_CHIPLET_DE = amdsmi_wrapper.AMDSMI_EVENT_ECC_UMC_CHIPLET_DE
    ECC_UNKNOWN_CHIPLET_DE = amdsmi_wrapper.AMDSMI_EVENT_ECC_UNKNOWN_CHIPLET_DE
    ECC_EEPROM_CHK_MISMATCH = amdsmi_wrapper.AMDSMI_EVENT_ECC_EEPROM_CHK_MISMATCH
    ECC_EEPROM_RESET = amdsmi_wrapper.AMDSMI_EVENT_ECC_EEPROM_RESET
    ECC_EEPROM_RESET_FAILED = amdsmi_wrapper.AMDSMI_EVENT_ECC_EEPROM_RESET_FAILED
    ECC_EEPROM_APPEND = amdsmi_wrapper.AMDSMI_EVENT_ECC_EEPROM_APPEND
    ECC_THD_CHANGED = amdsmi_wrapper.AMDSMI_EVENT_ECC_THD_CHANGED
    ECC_DUP_ENTRIES = amdsmi_wrapper.AMDSMI_EVENT_ECC_DUP_ENTRIES
    ECC_EEPROM_WRONG_HDR = amdsmi_wrapper.AMDSMI_EVENT_ECC_EEPROM_WRONG_HDR
    ECC_EEPROM_WRONG_VER = amdsmi_wrapper.AMDSMI_EVENT_ECC_EEPROM_WRONG_VER

class AmdSmiEventCategoryPP(Enum):
    PP_SET_DPM_POLICY_FAIL = amdsmi_wrapper.AMDSMI_EVENT_PP_SET_DPM_POLICY_FAIL
    PP_ACTIVATE_DPM_POLICY_FAIL = amdsmi_wrapper.AMDSMI_EVENT_PP_ACTIVATE_DPM_POLICY_FAIL
    PP_I2C_SLAVE_NOT_PRESENT = amdsmi_wrapper.AMDSMI_EVENT_PP_I2C_SLAVE_NOT_PRESENT
    PP_THROTTLER_EVENT = amdsmi_wrapper.AMDSMI_EVENT_PP_THROTTLER_EVENT


class AmdSmiEventCategorySched(Enum):
    SCHED_WORLD_SWITCH_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_WORLD_SWITCH_FAIL
    SCHED_DISABLE_AUTO_HW_SWITCH_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_DISABLE_AUTO_HW_SWITCH_FAIL
    SCHED_ENABLE_AUTO_HW_SWITCH_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_ENABLE_AUTO_HW_SWITCH_FAIL
    SCHED_GFX_SAVE_REG_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_GFX_SAVE_REG_FAIL
    SCHED_GFX_IDLE_REG_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_GFX_IDLE_REG_FAIL
    SCHED_GFX_RUN_REG_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_GFX_RUN_REG_FAIL
    SCHED_GFX_LOAD_REG_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_GFX_LOAD_REG_FAIL
    SCHED_GFX_INIT_REG_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_GFX_INIT_REG_FAIL
    SCHED_MM_SAVE_REG_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_MM_SAVE_REG_FAIL
    SCHED_MM_IDLE_REG_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_MM_IDLE_REG_FAIL
    SCHED_MM_RUN_REG_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_MM_RUN_REG_FAIL
    SCHED_MM_LOAD_REG_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_MM_LOAD_REG_FAIL
    SCHED_MM_INIT_REG_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_MM_INIT_REG_FAIL
    SCHED_INIT_GPU_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_INIT_GPU_FAIL
    SCHED_RUN_GPU_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_RUN_GPU_FAIL
    SCHED_SAVE_GPU_STATE_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_SAVE_GPU_STATE_FAIL
    SCHED_LOAD_GPU_STATE_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_LOAD_GPU_STATE_FAIL
    SCHED_IDLE_GPU_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_IDLE_GPU_FAIL
    SCHED_FINI_GPU_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_FINI_GPU_FAIL
    SCHED_DEAD_VF = amdsmi_wrapper.AMDSMI_EVENT_SCHED_DEAD_VF
    SCHED_EVENT_QUEUE_FULL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_EVENT_QUEUE_FULL
    SCHED_SHUTDOWN_VF_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_SHUTDOWN_VF_FAIL
    SCHED_RESET_VF_NUM_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_RESET_VF_NUM_FAIL
    SCHED_IGNORE_EVENT = amdsmi_wrapper.AMDSMI_EVENT_SCHED_IGNORE_EVENT
    SCHED_PF_SWITCH_FAIL = amdsmi_wrapper.AMDSMI_EVENT_SCHED_PF_SWITCH_FAIL


class AmdSmiEventCategoryVf(Enum):
    VF_ATOMBIOS_INIT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VF_ATOMBIOS_INIT_FAIL
    VF_NO_VBIOS = amdsmi_wrapper.AMDSMI_EVENT_VF_NO_VBIOS
    VF_GPU_POST_ERROR = amdsmi_wrapper.AMDSMI_EVENT_VF_GPU_POST_ERROR
    VF_ATOMBIOS_GET_CLOCK_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VF_ATOMBIOS_GET_CLOCK_FAIL
    VF_FENCE_INIT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VF_FENCE_INIT_FAIL
    VF_AMDGPU_INIT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VF_AMDGPU_INIT_FAIL
    VF_IB_INIT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VF_IB_INIT_FAIL
    VF_AMDGPU_LATE_INIT_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VF_AMDGPU_LATE_INIT_FAIL
    VF_ASIC_RESUME_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VF_ASIC_RESUME_FAIL
    VF_GPU_RESET_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VF_GPU_RESET_FAIL


class AmdSmiEventCategoryVbios(Enum):
    VBIOS_INVALID = amdsmi_wrapper.AMDSMI_EVENT_VBIOS_INVALID
    VBIOS_IMAGE_MISSING = amdsmi_wrapper.AMDSMI_EVENT_VBIOS_IMAGE_MISSING
    VBIOS_CHECKSUM_ERR = amdsmi_wrapper.AMDSMI_EVENT_VBIOS_CHECKSUM_ERR
    VBIOS_POST_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VBIOS_POST_FAIL
    VBIOS_READ_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VBIOS_READ_FAIL
    VBIOS_READ_IMG_HEADER_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VBIOS_READ_IMG_HEADER_FAIL
    VBIOS_READ_IMG_SIZE_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VBIOS_READ_IMG_SIZE_FAIL
    VBIOS_GET_FW_INFO_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VBIOS_GET_FW_INFO_FAIL
    VBIOS_GET_TBL_REVISION_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VBIOS_GET_TBL_REVISION_FAIL
    VBIOS_PARSER_TBL_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VBIOS_PARSER_TBL_FAIL
    VBIOS_IP_DISCOVERY_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VBIOS_IP_DISCOVERY_FAIL
    VBIOS_TIMEOUT = amdsmi_wrapper.AMDSMI_EVENT_VBIOS_TIMEOUT
    VBIOS_HASH_INVALID = amdsmi_wrapper.AMDSMI_EVENT_VBIOS_HASH_INVALID
    VBIOS_HASH_UPDATED = amdsmi_wrapper.AMDSMI_EVENT_VBIOS_HASH_UPDATED
    VBIOS_IP_DISCOVERY_BINARY_CHECKSUM_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VBIOS_IP_DISCOVERY_BINARY_CHECKSUM_FAIL
    VBIOS_IP_DISCOVERY_TABLE_CHECKSUM_FAIL = amdsmi_wrapper.AMDSMI_EVENT_VBIOS_IP_DISCOVERY_TABLE_CHECKSUM_FAIL


class AmdSmiEventCategoryGuard(Enum):
    GUARD_RESET_FAIL = amdsmi_wrapper.AMDSMI_EVENT_GUARD_RESET_FAIL
    GUARD_EVENT_OVERFLOW = amdsmi_wrapper.AMDSMI_EVENT_GUARD_EVENT_OVERFLOW


class AmdSmiEventCategoryGpumon(Enum):
    GPUMON_INVALID_OPTION = amdsmi_wrapper.AMDSMI_EVENT_GPUMON_INVALID_OPTION
    GPUMON_INVALID_VF_INDEX = amdsmi_wrapper.AMDSMI_EVENT_GPUMON_INVALID_VF_INDEX
    GPUMON_INVALID_FB_SIZE = amdsmi_wrapper.AMDSMI_EVENT_GPUMON_INVALID_FB_SIZE
    GPUMON_NO_SUITABLE_SPACE = amdsmi_wrapper.AMDSMI_EVENT_GPUMON_NO_SUITABLE_SPACE
    GPUMON_NO_AVAILABLE_SLOT = amdsmi_wrapper.AMDSMI_EVENT_GPUMON_NO_AVAILABLE_SLOT
    GPUMON_OVERSIZE_ALLOCATION = amdsmi_wrapper.AMDSMI_EVENT_GPUMON_OVERSIZE_ALLOCATION
    GPUMON_OVERLAPPING_FB = amdsmi_wrapper.AMDSMI_EVENT_GPUMON_OVERLAPPING_FB
    GPUMON_INVALID_GFX_TIMESLICE = amdsmi_wrapper.AMDSMI_EVENT_GPUMON_INVALID_GFX_TIMESLICE
    GPUMON_INVALID_MM_TIMESLICE = amdsmi_wrapper.AMDSMI_EVENT_GPUMON_INVALID_MM_TIMESLICE
    GPUMON_INVALID_GFX_PART = amdsmi_wrapper.AMDSMI_EVENT_GPUMON_INVALID_GFX_PART
    GPUMON_VF_BUSY = amdsmi_wrapper.AMDSMI_EVENT_GPUMON_VF_BUSY
    GPUMON_INVALID_VF_NUM = amdsmi_wrapper.AMDSMI_EVENT_GPUMON_INVALID_VF_NUM
    GPUMON_NOT_SUPPORTED = amdsmi_wrapper.AMDSMI_EVENT_GPUMON_NOT_SUPPORTED


class AmdSmiEventCategoryMmsch(Enum):
    MMSCH_IGNORED_JOB = amdsmi_wrapper.AMDSMI_EVENT_MMSCH_IGNORED_JOB
    MMSCH_UNSUPPORTED_VCN_FW = amdsmi_wrapper.AMDSMI_EVENT_MMSCH_UNSUPPORTED_VCN_FW


class AmdSmiEventCategoryXgmi(Enum):
    XGMI_TOPOLOGY_UPDATE_FAILED = amdsmi_wrapper.AMDSMI_EVENT_XGMI_TOPOLOGY_UPDATE_FAILED
    XGMI_TOPOLOGY_HW_INIT_UPDATE = amdsmi_wrapper.AMDSMI_EVENT_XGMI_TOPOLOGY_HW_INIT_UPDATE
    XGMI_TOPOLOGY_UPDATE_DONE = amdsmi_wrapper.AMDSMI_EVENT_XGMI_TOPOLOGY_UPDATE_DONE
    XGMI_FB_SHARING_SETTING_ERROR = amdsmi_wrapper.AMDSMI_EVENT_XGMI_FB_SHARING_SETTING_ERROR
    XGMI_FB_SHARING_SETTING_RESET = amdsmi_wrapper.AMDSMI_EVENT_XGMI_FB_SHARING_SETTING_RESET


class AmdSmiGuestFwName(IntEnum):
    VCE = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_VCE
    UVD = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_UVD
    MC = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_MC
    ME = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_ME
    PFP = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_PFP
    CE = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_CE
    RLC = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_RLC
    RLC_SRLC = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_RLC_SRLC
    RLC_SRLG = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_RLC_SRLG
    RLC_SRLS = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_RLC_SRLS
    MEC = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_MEC
    MEC2 = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_MEC2
    SOS = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_SOS
    ASD = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_ASD
    TA_RAS = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_TA_RAS
    TA_XGMI = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_TA_XGMI
    SMC = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_SMC
    SDMA = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_SDMA
    SDMA2 = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_SDMA2
    VCN = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_VCN
    DMCU = amdsmi_wrapper.AMDSMI_GUEST_FW_ID_DMCU


class AmdSmiGuestFwLoadStatus(IntEnum):
    OK = amdsmi_wrapper.GUEST_FW_LOAD_STATUS_OK
    OBSOLETE = amdsmi_wrapper.GUEST_FW_LOAD_STATUS_OBSOLETE_FW
    BAD_SIG = amdsmi_wrapper.GUEST_FW_LOAD_STATUS_BAD_SIG
    FW_LOAD_FAIL = amdsmi_wrapper.GUEST_FW_LOAD_STATUS_FW_LOAD_FAIL
    ERR_GENERIC = amdsmi_wrapper.GUEST_FW_LOAD_STATUS_ERR_GENERIC


class AmdSmiProfileCapabilityType(IntEnum):
    MEMORY = amdsmi_wrapper.AMDSMI_PROFILE_CAPABILITY_MEMORY
    ENCODE = amdsmi_wrapper.AMDSMI_PROFILE_CAPABILITY_ENCODE
    DECODE = amdsmi_wrapper.AMDSMI_PROFILE_CAPABILITY_DECODE
    COMPUTE = amdsmi_wrapper.AMDSMI_PROFILE_CAPABILITY_COMPUTE


class AmdSmiInitFlags(IntEnum):
    INIT_ALL_PROCESSORS = amdsmi_wrapper.AMDSMI_INIT_ALL_PROCESSORS
    INIT_AMD_CPUS = amdsmi_wrapper.AMDSMI_INIT_AMD_CPUS
    INIT_AMD_GPUS = amdsmi_wrapper.AMDSMI_INIT_AMD_GPUS
    INIT_NON_AMD_CPUS = amdsmi_wrapper.AMDSMI_INIT_NON_AMD_CPUS
    INIT_NON_AMD_GPUS = amdsmi_wrapper.AMDSMI_INIT_NON_AMD_GPUS
    INIT_AMD_APUS = amdsmi_wrapper.AMDSMI_INIT_AMD_APUS

class AmdSmiLinkType(IntEnum):
    INTERNAL = amdsmi_wrapper.AMDSMI_LINK_TYPE_INTERNAL
    XGMI = amdsmi_wrapper.AMDSMI_LINK_TYPE_XGMI
    PCIE = amdsmi_wrapper.AMDSMI_LINK_TYPE_PCIE
    NOT_APPLICABLE = amdsmi_wrapper.AMDSMI_LINK_TYPE_NOT_APPLICABLE
    UNKNOWN = amdsmi_wrapper.AMDSMI_LINK_TYPE_UNKNOWN


class AmdSmiLinkStatus(IntEnum):
    ENABLED = amdsmi_wrapper.AMDSMI_LINK_STATUS_ENABLED
    DISABLED = amdsmi_wrapper.AMDSMI_LINK_STATUS_DISABLED
    ERROR = amdsmi_wrapper.AMDSMI_LINK_STATUS_ERROR


class AmdSmiXgmiFbSharingMode(IntEnum):
    CUSTOM = amdsmi_wrapper.AMDSMI_XGMI_FB_SHARING_MODE_CUSTOM
    MODE_1 = amdsmi_wrapper.AMDSMI_XGMI_FB_SHARING_MODE_1
    MODE_2 = amdsmi_wrapper.AMDSMI_XGMI_FB_SHARING_MODE_2
    MODE_4 = amdsmi_wrapper.AMDSMI_XGMI_FB_SHARING_MODE_4
    MODE_8 = amdsmi_wrapper.AMDSMI_XGMI_FB_SHARING_MODE_8

class AmdSmiCardFormFactor(IntEnum):
    PCIE = amdsmi_wrapper.AMDSMI_CARD_FORM_FACTOR_PCIE
    OAM = amdsmi_wrapper.AMDSMI_CARD_FORM_FACTOR_OAM
    CEM = amdsmi_wrapper.AMDSMI_CARD_FORM_FACTOR_CEM
    UNKNOWN = amdsmi_wrapper.AMDSMI_CARD_FORM_FACTOR_UNKNOWN


class AmdSmiGpuBlock(IntEnum):
    UMC = amdsmi_wrapper.AMDSMI_GPU_BLOCK_UMC
    SDMA = amdsmi_wrapper.AMDSMI_GPU_BLOCK_SDMA
    GFX = amdsmi_wrapper.AMDSMI_GPU_BLOCK_GFX
    MMHUB = amdsmi_wrapper.AMDSMI_GPU_BLOCK_MMHUB
    ATHUB = amdsmi_wrapper.AMDSMI_GPU_BLOCK_ATHUB
    PCIE_BIF = amdsmi_wrapper.AMDSMI_GPU_BLOCK_PCIE_BIF
    HDP = amdsmi_wrapper.AMDSMI_GPU_BLOCK_HDP
    XGMI_WAFL = amdsmi_wrapper.AMDSMI_GPU_BLOCK_XGMI_WAFL
    DF = amdsmi_wrapper.AMDSMI_GPU_BLOCK_DF
    SMN = amdsmi_wrapper.AMDSMI_GPU_BLOCK_SMN
    SEM = amdsmi_wrapper.AMDSMI_GPU_BLOCK_SEM
    MP0 = amdsmi_wrapper.AMDSMI_GPU_BLOCK_MP0
    MP1 = amdsmi_wrapper.AMDSMI_GPU_BLOCK_MP1
    FUSE = amdsmi_wrapper.AMDSMI_GPU_BLOCK_FUSE
    MCA = amdsmi_wrapper.AMDSMI_GPU_BLOCK_MCA
    VCN = amdsmi_wrapper.AMDSMI_GPU_BLOCK_VCN
    JPEG = amdsmi_wrapper.AMDSMI_GPU_BLOCK_JPEG
    IH = amdsmi_wrapper.AMDSMI_GPU_BLOCK_IH
    MPIO = amdsmi_wrapper.AMDSMI_GPU_BLOCK_MPIO


class AmdSmiEccCorrectionSchemaSupport(IntEnum):
    PARITY = amdsmi_wrapper.AMDSMI_RAS_ECC_SUPPORT_PARITY
    CORRECTABLE = amdsmi_wrapper.AMDSMI_RAS_ECC_SUPPORT_CORRECTABLE
    UNCORRECTABLE = amdsmi_wrapper.AMDSMI_RAS_ECC_SUPPORT_UNCORRECTABLE
    POISON = amdsmi_wrapper.AMDSMI_RAS_ECC_SUPPORT_POISON


class AmdSmiMetricUnit(IntEnum):
    COUNTER = amdsmi_wrapper.AMDSMI_METRIC_UNIT_COUNTER
    UINT = amdsmi_wrapper.AMDSMI_METRIC_UNIT_UINT
    BOOL = amdsmi_wrapper.AMDSMI_METRIC_UNIT_BOOL
    MHZ = amdsmi_wrapper.AMDSMI_METRIC_UNIT_MHZ
    PERCENT = amdsmi_wrapper.AMDSMI_METRIC_UNIT_PERCENT
    MILLIVOLT = amdsmi_wrapper.AMDSMI_METRIC_UNIT_MILLIVOLT
    CELSIUS = amdsmi_wrapper.AMDSMI_METRIC_UNIT_CELSIUS
    WATT = amdsmi_wrapper.AMDSMI_METRIC_UNIT_WATT
    JOULE = amdsmi_wrapper.AMDSMI_METRIC_UNIT_JOULE
    GBPS = amdsmi_wrapper.AMDSMI_METRIC_UNIT_GBPS
    MBITPS = amdsmi_wrapper.AMDSMI_METRIC_UNIT_MBITPS
    PCIE_GEN = amdsmi_wrapper.AMDSMI_METRIC_UNIT_PCIE_GEN
    PCIE_LANES = amdsmi_wrapper.AMDSMI_METRIC_UNIT_PCIE_LANES
    UNKNOWN = amdsmi_wrapper.AMDSMI_METRIC_UNIT_UNKNOWN


class AmdSmiMetricName(IntEnum):
# General
    ACC_COUNTER = amdsmi_wrapper.AMDSMI_METRIC_NAME_METRIC_ACC_COUNTER
    FW_TIMESTAMP = amdsmi_wrapper.AMDSMI_METRIC_NAME_FW_TIMESTAMP
# Clock
    CLK_GFX = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_GFX
    CLK_SOC = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_SOC
    CLK_MEM = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_MEM
    CLK_VCLK = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_VCLK
    CLK_DCLK = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_DCLK
# Usage
    USAGE_GFX = amdsmi_wrapper.AMDSMI_METRIC_NAME_USAGE_GFX
    USAGE_MEM = amdsmi_wrapper.AMDSMI_METRIC_NAME_USAGE_MEM
    USAGE_MM = amdsmi_wrapper.AMDSMI_METRIC_NAME_USAGE_MM
    USAGE_VCN = amdsmi_wrapper.AMDSMI_METRIC_NAME_USAGE_VCN
    USAGE_JPEG = amdsmi_wrapper.AMDSMI_METRIC_NAME_USAGE_JPEG
# Volt
    VOLT_GFX = amdsmi_wrapper.AMDSMI_METRIC_NAME_VOLT_GFX
    VOLT_SOC = amdsmi_wrapper.AMDSMI_METRIC_NAME_VOLT_SOC
    VOLT_MEM = amdsmi_wrapper.AMDSMI_METRIC_NAME_VOLT_MEM
# Temperature
    TEMP_HOTSPOT_CURR = amdsmi_wrapper.AMDSMI_METRIC_NAME_TEMP_HOTSPOT_CURR
    TEMP_HOTSPOT_LIMIT = amdsmi_wrapper.AMDSMI_METRIC_NAME_TEMP_HOTSPOT_LIMIT
    TEMP_MEM_CURR = amdsmi_wrapper.AMDSMI_METRIC_NAME_TEMP_MEM_CURR
    TEMP_MEM_LIMIT = amdsmi_wrapper.AMDSMI_METRIC_NAME_TEMP_MEM_LIMIT
    TEMP_VR_CURR = amdsmi_wrapper.AMDSMI_METRIC_NAME_TEMP_VR_CURR
    TEMP_SHUTDOWN = amdsmi_wrapper.AMDSMI_METRIC_NAME_TEMP_SHUTDOWN
# Power
    POWER_CURR = amdsmi_wrapper.AMDSMI_METRIC_NAME_POWER_CURR
    POWER_LIMIT = amdsmi_wrapper.AMDSMI_METRIC_NAME_POWER_LIMIT
# Energy
    ENERGY_SOCKET = amdsmi_wrapper.AMDSMI_METRIC_NAME_ENERGY_SOCKET
    ENERGY_CCD = amdsmi_wrapper.AMDSMI_METRIC_NAME_ENERGY_CCD
    ENERGY_XCD = amdsmi_wrapper.AMDSMI_METRIC_NAME_ENERGY_XCD
    ENERGY_AID = amdsmi_wrapper.AMDSMI_METRIC_NAME_ENERGY_AID
    ENERGY_MEM = amdsmi_wrapper.AMDSMI_METRIC_NAME_ENERGY_MEM
# Throttle
    THROTTLE_SOCKET_ACTIVE = amdsmi_wrapper.AMDSMI_METRIC_NAME_THROTTLE_SOCKET_ACTIVE
    THROTTLE_VR_ACTIVE = amdsmi_wrapper.AMDSMI_METRIC_NAME_THROTTLE_VR_ACTIVE
    THROTTLE_MEM_ACTIVE = amdsmi_wrapper.AMDSMI_METRIC_NAME_THROTTLE_MEM_ACTIVE
# PCIe
    PCIE_BANDWIDTH = amdsmi_wrapper.AMDSMI_METRIC_NAME_PCIE_BANDWIDTH
    PCIE_L0_TO_RECOVERY_COUNT = amdsmi_wrapper.AMDSMI_METRIC_NAME_PCIE_L0_TO_RECOVERY_COUNT
    PCIE_REPLAY_COUNT = amdsmi_wrapper.AMDSMI_METRIC_NAME_PCIE_REPLAY_COUNT
    PCIE_REPLAY_ROLLOVER_COUNT = amdsmi_wrapper.AMDSMI_METRIC_NAME_PCIE_REPLAY_ROLLOVER_COUNT
    PCIE_NAK_SENT_COUNT = amdsmi_wrapper.AMDSMI_METRIC_NAME_PCIE_NAK_SENT_COUNT
    PCIE_NAK_RECEIVED_COUNT = amdsmi_wrapper.AMDSMI_METRIC_NAME_PCIE_NAK_RECEIVED_COUNT
# Max clock limit
    CLK_GFX_MAX_LIMIT = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_GFX_MAX_LIMIT
    CLK_SOC_MAX_LIMIT = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_SOC_MAX_LIMIT
    CLK_MEM_MAX_LIMIT = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_MEM_MAX_LIMIT
    CLK_VCLK_MAX_LIMIT = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_VCLK_MAX_LIMIT
    CLK_DCLK_MAX_LIMIT = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_DCLK_MAX_LIMIT
# Min clock limit
    CLK_GFX_MIN_LIMIT = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_GFX_MIN_LIMIT
    CLK_SOC_MIN_LIMIT = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_SOC_MIN_LIMIT
    CLK_MEM_MIN_LIMIT = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_MEM_MIN_LIMIT
    CLK_VCLK_MIN_LIMIT = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_VCLK_MIN_LIMIT
    CLK_DCLK_MIN_LIMIT = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_DCLK_MIN_LIMIT
# Clock locked
    CLK_GFX_LOCKED = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_GFX_LOCKED
# Deep sleep clock
    CLK_GFX_DS_DISABLED = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_GFX_DS_DISABLED
    CLK_MEM_DS_DISABLED = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_MEM_DS_DISABLED
    CLK_SOC_DS_DISABLED = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_SOC_DS_DISABLED
    CLK_VCLK_DS_DISABLED = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_VCLK_DS_DISABLED
    CLK_DCLK_DS_DISABLED = amdsmi_wrapper.AMDSMI_METRIC_NAME_CLK_DCLK_DS_DISABLED

    PCIE_LINK_SPEED = amdsmi_wrapper.AMDSMI_METRIC_NAME_PCIE_LINK_SPEED
    PCIE_LINK_WIDTH = amdsmi_wrapper.AMDSMI_METRIC_NAME_PCIE_LINK_WIDTH

    UNKNOWN = amdsmi_wrapper.AMDSMI_METRIC_NAME_UNKNOWN


class AmdSmiMetricCategory(IntEnum):
    ACC_COUNTER = amdsmi_wrapper.AMDSMI_METRIC_CATEGORY_ACC_COUNTER
    FREQUENCY = amdsmi_wrapper.AMDSMI_METRIC_CATEGORY_FREQUENCY
    ACTIVITY = amdsmi_wrapper.AMDSMI_METRIC_CATEGORY_ACTIVITY
    TEMPERATURE = amdsmi_wrapper.AMDSMI_METRIC_CATEGORY_TEMPERATURE
    POWER = amdsmi_wrapper.AMDSMI_METRIC_CATEGORY_POWER
    ENERGY = amdsmi_wrapper.AMDSMI_METRIC_CATEGORY_ENERGY
    THROTTLE = amdsmi_wrapper.AMDSMI_METRIC_CATEGORY_THROTTLE
    PCIE = amdsmi_wrapper.AMDSMI_METRIC_CATEGORY_PCIE
    UNKNOWN = amdsmi_wrapper.AMDSMI_METRIC_CATEGORY_UNKNOWN


class AmdSmiMetricType(IntEnum):
    COUNTER = amdsmi_wrapper.AMDSMI_METRIC_TYPE_COUNTER
    CHIPLET = amdsmi_wrapper.AMDSMI_METRIC_TYPE_CHIPLET
    INST = amdsmi_wrapper.AMDSMI_METRIC_TYPE_INST
    ACC = amdsmi_wrapper.AMDSMI_METRIC_TYPE_ACC


class AmdSmiAcceleratorPartitionSetting(IntEnum):
    INVALID = amdsmi_wrapper.AMDSMI_ACCELERATOR_PARTITION_INVALID
    SPX = amdsmi_wrapper.AMDSMI_ACCELERATOR_PARTITION_SPX
    DPX = amdsmi_wrapper.AMDSMI_ACCELERATOR_PARTITION_DPX
    TPX = amdsmi_wrapper.AMDSMI_ACCELERATOR_PARTITION_TPX
    QPX = amdsmi_wrapper.AMDSMI_ACCELERATOR_PARTITION_QPX
    CPX = amdsmi_wrapper.AMDSMI_ACCELERATOR_PARTITION_CPX

class AmdSmiAcceleratorPartitionResource(IntEnum):
    XCC = amdsmi_wrapper.AMDSMI_ACCELERATOR_XCC
    ENCODER = amdsmi_wrapper.AMDSMI_ACCELERATOR_ENCODER
    DECODER = amdsmi_wrapper.AMDSMI_ACCELERATOR_DECODER
    DMA = amdsmi_wrapper.AMDSMI_ACCELERATOR_DMA
    JPEG = amdsmi_wrapper.AMDSMI_ACCELERATOR_JPEG

class AmdSmiMemoryPartitionSetting(IntEnum):
    UNKNOWN = amdsmi_wrapper.AMDSMI_MEMORY_PARTITION_UNKNOWN
    NPS1 = amdsmi_wrapper.AMDSMI_MEMORY_PARTITION_NPS1
    NPS2 = amdsmi_wrapper.AMDSMI_MEMORY_PARTITION_NPS2
    NPS4 = amdsmi_wrapper.AMDSMI_MEMORY_PARTITION_NPS4
    NPS8 = amdsmi_wrapper.AMDSMI_MEMORY_PARTITION_NPS8

class AmdSmiDriverModelType(IntEnum):
    WDDM = amdsmi_wrapper.AMDSMI_DRIVER_MODEL_TYPE_WDDM
    WDM = amdsmi_wrapper.AMDSMI_DRIVER_MODEL_TYPE_WDM
    MCDM = amdsmi_wrapper.AMDSMI_DRIVER_MODEL_TYPE_MCDM

class AmdSmiCperErrorSeverity(IntEnum):
    NON_FATAL_UNCORRECTED = amdsmi_wrapper.AMDSMI_CPER_SEV_NON_FATAL_UNCORRECTED
    FATAL = amdsmi_wrapper.AMDSMI_CPER_SEV_FATAL
    NON_FATAL_CORRECTED = amdsmi_wrapper.AMDSMI_CPER_SEV_NON_FATAL_CORRECTED
    NUM = amdsmi_wrapper.AMDSMI_CPER_SEV_NUM
    UNUSED = amdsmi_wrapper.AMDSMI_CPER_SEV_UNUSED


_AMDSMI_MAX_MM_IP_COUNT = 8
_GPU_UUID_SIZE = 38
_AMDSMI_MAX_VF_COUNT = 32
_AMDSMI_MAX_DEVICES = 32
_AMDSMI_MAX_NUM_METRICS = 255
_AMDSMI_MAX_BAD_PAGE_RECORD = 16384
_AMDSMI_MAX_ACCELERATOR_PROFILE = 32


def _parse_bdf(bdf):
    if bdf is None:
        return None
    extended_regex = re.compile(
        r'^([0-9a-fA-F]{4}):([0-9a-fA-F]{2}):([0-1][0-9a-fA-F])\.([0-7])$')
    if extended_regex.match(bdf) is None:
        simple_regex = re.compile(
            r'^([0-9a-fA-F]{2}):([0-1][0-9a-fA-F])\.([0-7])$')
        if simple_regex.match(bdf) is None:
            return None
        else:
            return [0] + [int(x, 16) for x in simple_regex.match(bdf).groups()]
    else:
        return [int(x, 16) for x in extended_regex.match(bdf).groups()]


def _make_amdsmi_bdf_from_list(bdf):
    if len(bdf) != 4:
        return None

    amdsmi_bdf = amdsmi_wrapper.amdsmi_bdf_t()
    amdsmi_bdf.bdf.function_number = bdf[3]
    amdsmi_bdf.bdf.device_number = bdf[2]
    amdsmi_bdf.bdf.bus_number = bdf[1]
    amdsmi_bdf.bdf.domain_number = bdf[0]
    return amdsmi_bdf


def _format_bdf(amdsmi_bdf):
    domain = hex(amdsmi_bdf.bdf.domain_number)[2:].zfill(4)
    bus = hex(amdsmi_bdf.bdf.bus_number)[2:].zfill(2)
    processor = hex(amdsmi_bdf.bdf.device_number)[2:].zfill(2)
    function = hex(amdsmi_bdf.bdf.function_number)[2:]

    return domain + ':' + bus + ':' + processor + '.' + function


def _parse_vf_config(vf_config):
    if vf_config is None:
        return ctypes.POINTER(amdsmi_wrapper.amdsmi_vf_info_t)()
    amdsmi_vf_config = amdsmi_wrapper.amdsmi_vf_info_t()
    try:
        if 'fb' in vf_config:
            if 'fb_offset' in vf_config['fb']:
                amdsmi_vf_config.fb.fb_offset = ctypes.c_uint32(
                    vf_config['fb']['fb_offset'])
            if 'fb_size' in vf_config['fb']:
                amdsmi_vf_config.fb.fb_size = ctypes.c_uint32(
                    vf_config['fb']['fb_size'])

        if 'gfx_timeslice' in vf_config:
            amdsmi_vf_config.gfx_timeslice = ctypes.c_uint32(
                vf_config['gfx_timeslice'])

    except KeyError as e:
        raise AmdSmiKeyException(e.__str__())

    return amdsmi_vf_config


def _parse_partition_info(partition_info, num_vf_enabled):
    partitions = list()
    for i in range(0, num_vf_enabled):
        partitions.append({
            'vf_id': partition_info[i].id,
            'fb': {
                'fb_offset': partition_info[i].fb.fb_offset,
                'fb_size': partition_info[i].fb.fb_size
            }
        })
    return partitions


def _set_mask(category_list, severity):
    event_mask = 0
    for category in category_list:
        if category == AmdSmiEventCategory.ALL:
            event_mask = (1 << 60) - 1
            break

        event_mask |= 1 << category

    if severity == AmdSmiEventSeverity.HIGH:
        event_mask &= ((1 << 60) - 1)
    elif severity == AmdSmiEventSeverity.MED:
        event_mask |= (1 << 60)
    elif severity == AmdSmiEventSeverity.LOW:
        event_mask |= (1 << 61)
    elif severity == AmdSmiEventSeverity.WARN:
        event_mask |= (1 << 62)
    elif severity == AmdSmiEventSeverity.INFO:
        event_mask |= (1 << 63)
    elif severity == AmdSmiEventSeverity.ALL:
        event_mask |= (15 << 60)

    return event_mask


def _cache_mask(cache_property):
    properties = []

    if cache_property & AmdSmiCacheProperty.DATA_CACHE:
        properties.append(AmdSmiCacheProperty.DATA_CACHE.name)
    if cache_property & AmdSmiCacheProperty.INST_CACHE:
        properties.append(AmdSmiCacheProperty.INST_CACHE.name)
    if cache_property & AmdSmiCacheProperty.CPU_CACHE:
        properties.append(AmdSmiCacheProperty.CPU_CACHE.name)
    if cache_property & AmdSmiCacheProperty.SIMD_CACHE:
        properties.append(AmdSmiCacheProperty.SIMD_CACHE.name)

    return properties


def _find_subcode(category, subcode):
    if AmdSmiEventCategory(category) == AmdSmiEventCategory.DRIVER:
        return AmdSmiEventCategoryDriver(subcode)
    elif AmdSmiEventCategory(category) == AmdSmiEventCategory.RESET:
        return AmdSmiEventCategoryReset(subcode)
    elif AmdSmiEventCategory(category) == AmdSmiEventCategory.SCHED:
        return AmdSmiEventCategorySched(subcode)
    elif AmdSmiEventCategory(category) == AmdSmiEventCategory.VBIOS:
        return AmdSmiEventCategoryVbios(subcode)
    elif AmdSmiEventCategory(category) == AmdSmiEventCategory.ECC:
        return AmdSmiEventCategoryEcc(subcode)
    elif AmdSmiEventCategory(category) == AmdSmiEventCategory.PP:
        return AmdSmiEventCategoryPP(subcode)
    elif AmdSmiEventCategory(category) == AmdSmiEventCategory.IOV:
        return AmdSmiEventCategoryIOV(subcode)
    elif AmdSmiEventCategory(category) == AmdSmiEventCategory.VF:
        return AmdSmiEventCategoryVf(subcode)
    elif AmdSmiEventCategory(category) == AmdSmiEventCategory.FW:
        return AmdSmiEventCategoryFw(subcode)
    elif AmdSmiEventCategory(category) == AmdSmiEventCategory.GPU:
        return AmdSmiEventCategoryGpu(subcode)
    elif AmdSmiEventCategory(category) == AmdSmiEventCategory.GUARD:
        return AmdSmiEventCategoryGuard(subcode)
    elif AmdSmiEventCategory(category) == AmdSmiEventCategory.GPUMON:
        return AmdSmiEventCategoryGpumon(subcode)
    elif AmdSmiEventCategory(category) == AmdSmiEventCategory.MMSCH:
        return AmdSmiEventCategoryMmsch(subcode)
    elif AmdSmiEventCategory(category) == AmdSmiEventCategory.XGMI:
        return AmdSmiEventCategoryXgmi(subcode)


def _check_res(ret_code):
    if ret_code == amdsmi_wrapper.AMDSMI_STATUS_RETRY:
        raise AmdSmiRetryException()

    if ret_code == amdsmi_wrapper.AMDSMI_STATUS_TIMEOUT:
        raise AmdSmiTimeoutException()

    if ret_code != amdsmi_wrapper.AMDSMI_STATUS_SUCCESS:
        raise AmdSmiLibraryException(ret_code)


def amdsmi_init(init_flags = AmdSmiInitFlags.INIT_ALL_PROCESSORS):
    _check_res(amdsmi_wrapper.amdsmi_init(init_flags))


def amdsmi_shut_down():
    _check_res(amdsmi_wrapper.amdsmi_shut_down())


def amdsmi_get_processor_handles():
    socket_handle = amdsmi_wrapper.amdsmi_socket_handle()
    processor_count = ctypes.c_uint32(_AMDSMI_MAX_DEVICES)
    processor_handles = (amdsmi_wrapper.amdsmi_processor_handle * _AMDSMI_MAX_DEVICES)()
    _check_res(amdsmi_wrapper.amdsmi_get_processor_handles(socket_handle,
        ctypes.byref(processor_count), processor_handles))

    if processor_count.value == 0:
        return []
    return list(amdsmi_wrapper.amdsmi_processor_handle(processor_handles[i]) for i in range(processor_count.value))


def amdsmi_get_processor_handle_from_bdf(bdf):
    bdf = _parse_bdf(bdf)
    if bdf is None:
        raise AmdSmiBdfFormatException(bdf)

    amdsmi_bdf = _make_amdsmi_bdf_from_list(bdf)
    processor_handle = amdsmi_wrapper.amdsmi_processor_handle()
    _check_res(amdsmi_wrapper.amdsmi_get_processor_handle_from_bdf(
        amdsmi_bdf, ctypes.byref(processor_handle)))

    return processor_handle

def amdsmi_get_index_from_processor_handle(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    processor_index = ctypes.c_uint32(0)
    _check_res(amdsmi_wrapper.amdsmi_get_index_from_processor_handle(
        processor_handle, ctypes.byref(processor_index)))

    return processor_index.value

def amdsmi_get_processor_handle_from_index(processor_index):
    index = ctypes.c_uint32(processor_index)
    processor_handle = amdsmi_wrapper.amdsmi_processor_handle()
    _check_res(amdsmi_wrapper.amdsmi_get_processor_handle_from_index(index, ctypes.byref(processor_handle)))

    return processor_handle

def amdsmi_get_vf_handle_from_bdf(bdf):
    bdf = _parse_bdf(bdf)
    if bdf is None:
        raise AmdSmiBdfFormatException(bdf)

    amdsmi_bdf = _make_amdsmi_bdf_from_list(bdf)
    vf_handle = amdsmi_wrapper.amdsmi_vf_handle_t()
    _check_res(amdsmi_wrapper.amdsmi_get_vf_handle_from_bdf(
        amdsmi_bdf, ctypes.byref(vf_handle)))
    return vf_handle


def amdsmi_get_gpu_device_bdf(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    bdf = amdsmi_wrapper.amdsmi_bdf_t()

    _check_res(amdsmi_wrapper.amdsmi_get_gpu_device_bdf(
        processor_handle, ctypes.byref(bdf)))

    return _format_bdf(bdf)


def amdsmi_get_vf_bdf(vf_handle):
    if not isinstance(vf_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        raise AmdSmiParameterException(
            vf_handle, amdsmi_wrapper.amdsmi_vf_handle_t)

    vf_id_handle = amdsmi_wrapper.amdsmi_vf_handle_t()
    vf_id_handle.handle = vf_handle.handle

    bdf = amdsmi_wrapper.amdsmi_bdf_t()

    _check_res(amdsmi_wrapper.amdsmi_get_vf_bdf(
        vf_id_handle, ctypes.byref(bdf)))

    return _format_bdf(bdf)


def amdsmi_get_vf_handle_from_vf_index(processor_handle, fcn_idx):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
            raise AmdSmiParameterException(
                processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    vf_idx = ctypes.c_uint32(fcn_idx)
    vf_handle = amdsmi_wrapper.amdsmi_vf_handle_t()
    _check_res(amdsmi_wrapper.amdsmi_get_vf_handle_from_vf_index(
        processor_handle, vf_idx, ctypes.byref(vf_handle)))

    return vf_handle

def amdsmi_get_processor_handle_from_uuid(uuid):
    processor_uuid = uuid.encode('utf-8')
    processor_uuid_buff = ctypes.create_string_buffer(processor_uuid)
    processor_uuid_s = ctypes.cast(processor_uuid_buff, ctypes.POINTER(ctypes.c_char))
    processor_handle = amdsmi_wrapper.amdsmi_processor_handle()

    _check_res(amdsmi_wrapper.amdsmi_get_processor_handle_from_uuid(
        processor_uuid_s, ctypes.byref(processor_handle)))

    return processor_handle

def amdsmi_get_vf_handle_from_uuid(uuid):
    vf_uuid = uuid.encode('utf-8')
    vf_uuid_buff = ctypes.create_string_buffer(vf_uuid)
    vf_uuid_s = ctypes.cast(vf_uuid_buff, ctypes.POINTER(ctypes.c_char))
    vf_handle = amdsmi_wrapper.amdsmi_vf_handle_t()

    _check_res(amdsmi_wrapper.amdsmi_get_vf_handle_from_uuid(
        vf_uuid_s, ctypes.byref(vf_handle)))

    return vf_handle


def amdsmi_get_gpu_total_ecc_count(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    ec = amdsmi_wrapper.amdsmi_error_count_t()
    _check_res(amdsmi_wrapper.amdsmi_get_gpu_total_ecc_count(processor_handle, ctypes.byref(ec)))

    return {
        "correctable_count": ec.correctable_count,
        "uncorrectable_count": ec.uncorrectable_count,
        "deferred_count": ec.deferred_count
    }


def amdsmi_get_gpu_ecc_count(processor_handle, block):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)
    if not isinstance(block, AmdSmiGpuBlock):
        raise AmdSmiParameterException(block, AmdSmiGpuBlock)

    ec = amdsmi_wrapper.amdsmi_error_count_t()
    _check_res(amdsmi_wrapper.amdsmi_get_gpu_ecc_count(processor_handle, block, ctypes.byref(ec)))

    return {
        "correctable_count": ec.correctable_count,
        "uncorrectable_count": ec.uncorrectable_count,
        "deferred_count": ec.deferred_count
    }


def _create_block_map(enabled_blocks):
    enabled_blocks_map = {}
    for e in AmdSmiGpuBlock:
        enabled_blocks_map[e] = bool(enabled_blocks.value & e.value)

    return enabled_blocks_map


def amdsmi_get_gpu_ecc_enabled(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    enabled_blocks = ctypes.c_uint64()
    _check_res(amdsmi_wrapper.amdsmi_get_gpu_ecc_enabled(processor_handle, ctypes.byref(enabled_blocks)))

    return _create_block_map(enabled_blocks)


def amdsmi_get_gpu_ras_feature_info(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    ras_feature = amdsmi_wrapper.amdsmi_ras_feature_t()
    _check_res(amdsmi_wrapper.amdsmi_get_gpu_ras_feature_info(
        processor_handle, ctypes.byref(ras_feature)))

    return {
        'ras_eeprom_version': ras_feature.ras_eeprom_version,
        'supported_ecc_correction_schema': ras_feature.supported_ecc_correction_schema
    }

def amdsmi_status_code_to_string(status):
    if not isinstance(status, AmdSmiRetCode):
        raise AmdSmiParameterException(status, AmdSmiRetCode)
    status_string_p_p = ctypes.pointer(ctypes.pointer(ctypes.c_char()))
    _check_res(amdsmi_wrapper.amdsmi_status_code_to_string(
        status, status_string_p_p))
    return amdsmi_wrapper.string_cast(status_string_p_p.contents)

def amdsmi_get_gpu_bad_page_info(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    bad_pages_size = ctypes.c_uint32(_AMDSMI_MAX_BAD_PAGE_RECORD)
    eeprom_table = (amdsmi_wrapper.amdsmi_eeprom_table_record_t * bad_pages_size.value)()
    _check_res(amdsmi_wrapper.amdsmi_get_gpu_bad_page_info(
            processor_handle, ctypes.byref(bad_pages_size), eeprom_table))

    bad_page_list = list()

    for i in range(0, bad_pages_size.value):
        bad_page_list.append({
            "retired_page": eeprom_table[i].retired_page,
            "ts": eeprom_table[i].ts,
            "mem_channel": eeprom_table[i].mem_channel,
            "mcumc_id": eeprom_table[i].mcumc_id
        })

    return bad_page_list


def amdsmi_get_gpu_asic_info(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    asic_info = amdsmi_wrapper.amdsmi_asic_info_t()
    _check_res(amdsmi_wrapper.amdsmi_get_gpu_asic_info(
        processor_handle, ctypes.byref(asic_info)))

    asic_info_struct = {
        'market_name': asic_info.market_name.decode("utf-8"),
        'vendor_id': asic_info.vendor_id,
        'vendor_name': asic_info.vendor_name.decode("utf-8"),
        'subvendor_id': asic_info.subvendor_id,
        'device_id': asic_info.device_id,
        'rev_id': hex(asic_info.rev_id),
        'asic_serial': asic_info.asic_serial.decode("utf-8"),
        'oam_id': asic_info.oam_id,
        'num_of_compute_units': asic_info.num_of_compute_units,
        'target_graphics_version': asic_info.target_graphics_version,
        'subsystem_id': asic_info.subsystem_id
    }
    string_values = ['market_name', 'vendor_name']
    for value in string_values:
        if not asic_info_struct[value]:
            asic_info_struct[value] = "N/A"

    hex_values = ['vendor_id', 'subvendor_id', 'device_id', 'subsystem_id']
    for value in hex_values:
        if asic_info_struct[value]:
            asic_info_struct[value] = hex(asic_info_struct[value])
        else:
            asic_info_struct[value] = "N/A"

    # Check for max value as a sign for not applicable
    if asic_info_struct['oam_id'] == 0xFFFFFFFF: # uint 32 max
        asic_info_struct['oam_id'] = "N/A"

    return asic_info_struct

def amdsmi_get_pcie_info(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    pcie_info = amdsmi_wrapper.amdsmi_pcie_info_t()
    _check_res(amdsmi_wrapper.amdsmi_get_pcie_info(
        processor_handle, ctypes.byref(pcie_info)))

    pcie_static = {
        'max_pcie_width': pcie_info.pcie_static.max_pcie_width,
        'max_pcie_speed': pcie_info.pcie_static.max_pcie_speed,
        'pcie_interface_version': pcie_info.pcie_static.pcie_interface_version,
        'slot_type': AmdSmiCardFormFactor(pcie_info.pcie_static.slot_type),
        'max_pcie_interface_version': pcie_info.pcie_static.max_pcie_interface_version
    }
    pcie_metric = {
        'pcie_width': pcie_info.pcie_metric.pcie_width,
        'pcie_speed': pcie_info.pcie_metric.pcie_speed,
        'pcie_bandwidth': pcie_info.pcie_metric.pcie_bandwidth,
        'pcie_replay_count': pcie_info.pcie_metric.pcie_replay_count,
        'pcie_l0_to_recovery_count': pcie_info.pcie_metric.pcie_l0_to_recovery_count,
        'pcie_replay_roll_over_count': pcie_info.pcie_metric.pcie_replay_roll_over_count,
        'pcie_nak_sent_count': pcie_info.pcie_metric.pcie_nak_sent_count,
        'pcie_nak_received_count': pcie_info.pcie_metric.pcie_nak_received_count,
        'pcie_lc_perf_other_end_recovery_count': pcie_info.pcie_metric.pcie_lc_perf_other_end_recovery_count
    }

    return {
        'pcie_static': pcie_static,
        'pcie_metric': pcie_metric
    }


def amdsmi_get_power_cap_info(processor_handle, sensor_ind = 0):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    power_info = amdsmi_wrapper.amdsmi_power_cap_info_t()
    _check_res(amdsmi_wrapper.amdsmi_get_power_cap_info(
        processor_handle, sensor_ind, ctypes.byref(power_info)))

    return {
        'power_cap': power_info.power_cap,
        'default_power_cap': power_info.default_power_cap,
        'dpm_cap': power_info.dpm_cap,
        'min_power_cap': power_info.min_power_cap,
        'max_power_cap': power_info.max_power_cap,
    }


def amdsmi_get_fb_layout(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    pf_fb_info = amdsmi_wrapper.amdsmi_pf_fb_info_t()
    _check_res(amdsmi_wrapper.amdsmi_get_fb_layout(
        processor_handle, ctypes.byref(pf_fb_info)))

    return {
        'total_fb_size': pf_fb_info.total_fb_size,
        'pf_fb_reserved': pf_fb_info.pf_fb_reserved,
        'pf_fb_offset': pf_fb_info.pf_fb_offset,
        'fb_alignment': pf_fb_info.fb_alignment,
        'max_vf_fb_usable': pf_fb_info.max_vf_fb_usable,
        'min_vf_fb_usable': pf_fb_info.min_vf_fb_usable
    }


def amdsmi_get_gpu_activity(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    info = amdsmi_wrapper.amdsmi_engine_usage_t()
    _check_res(amdsmi_wrapper.amdsmi_get_gpu_activity(
        processor_handle, ctypes.byref(info)))

    return {
        'gfx_activity': info.gfx_activity,
        'umc_activity': info.umc_activity,
        'mm_activity': info.mm_activity
    }


def amdsmi_get_power_info(processor_handle, sensor_ind = 0):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    power_info = amdsmi_wrapper.amdsmi_power_info_t()
    _check_res(amdsmi_wrapper.amdsmi_get_power_info(
        processor_handle, sensor_ind, ctypes.byref(power_info)))

    return {
        'socket_power': power_info.socket_power,
        'gfx_voltage': power_info.gfx_voltage,
        'soc_voltage': power_info.soc_voltage,
        'mem_voltage': power_info.mem_voltage
    }

def amdsmi_set_power_cap(processor_handle, sensor_ind, power_limit):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    _check_res(amdsmi_wrapper.amdsmi_set_power_cap(
        processor_handle, sensor_ind, ctypes.c_uint64(power_limit)))

def amdsmi_is_gpu_power_management_enabled(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    status = ctypes.c_bool()
    _check_res(amdsmi_wrapper.amdsmi_is_gpu_power_management_enabled(
        processor_handle, ctypes.byref(status)))

    return status.value


def amdsmi_get_temp_metric(processor_handle, sensor_type, metric):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)
    if not isinstance(sensor_type, AmdSmiTemperatureType):
        raise AmdSmiParameterException(sensor_type, AmdSmiTemperatureType)
    if not isinstance(metric, AmdSmiTemperatureMetric):
        raise AmdSmiParameterException(metric, AmdSmiTemperatureMetric)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    temperature = ctypes.c_int64()
    _check_res(amdsmi_wrapper.amdsmi_get_temp_metric(
        processor_handle, sensor_type, metric,
        ctypes.byref(temperature)))

    return temperature.value


def amdsmi_get_gpu_cache_info(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    cache_info = amdsmi_wrapper.amdsmi_gpu_cache_info_t()
    _check_res(amdsmi_wrapper.amdsmi_get_gpu_cache_info(
        processor_handle, ctypes.byref(cache_info)))

    cache_list = list()
    for i in range(cache_info.num_cache_types):
        cache_list.append({
            'cache_properties': _cache_mask(cache_info.cache[i].cache_properties),
            'cache_size':  cache_info.cache[i].cache_size,
            'cache_level':  cache_info.cache[i].cache_level,
            'max_num_cu_shared':  cache_info.cache[i].max_num_cu_shared,
            'num_cache_instance':  cache_info.cache[i].num_cache_instance,
        })

    return {
        'cache': cache_list
    }



def amdsmi_get_clock_info(processor_handle, clk_type):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)
    if not isinstance(clk_type, AmdSmiClkType):
        raise AmdSmiParameterException(clk_type, AmdSmiClkType)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    clock_measure = amdsmi_wrapper.amdsmi_clk_info_t()
    _check_res(amdsmi_wrapper.amdsmi_get_clock_info(
        processor_handle, clk_type,
        ctypes.byref(clock_measure)))

    return {
        'clk': clock_measure.clk,
        'min_clk':  clock_measure.min_clk,
        'max_clk':  clock_measure.max_clk,
        'clk_locked':  clock_measure.clk_locked,
        'clk_deep_sleep': clock_measure.clk_deep_sleep
    }

def amdsmi_get_gpu_vram_info(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    vram_info = amdsmi_wrapper.amdsmi_vram_info_t()
    _check_res(amdsmi_wrapper.amdsmi_get_gpu_vram_info(
        processor_handle, ctypes.byref(vram_info)))

    return {
        'vram_type': AmdSmiVramType(vram_info.vram_type),
        'vram_vendor':  AmdSmiVramVendor(vram_info.vram_vendor),
        'vram_size':  vram_info.vram_size,
        'vram_bit_width':  vram_info.vram_bit_width
    }


def amdsmi_get_gpu_vbios_info(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)


    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    vbios_info = amdsmi_wrapper.amdsmi_vbios_info_t()
    _check_res(amdsmi_wrapper.amdsmi_get_gpu_vbios_info(
        processor_handle, ctypes.byref(vbios_info)))

    return {
        'name': vbios_info.name.decode("utf-8"),
        'build_date': vbios_info.build_date.decode("utf-8"),
        'part_number': vbios_info.part_number.decode("utf-8"),
        'version': vbios_info.version.decode("utf-8")
    }


def amdsmi_get_gpu_board_info(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    board_info = amdsmi_wrapper.amdsmi_board_info_t()
    _check_res(amdsmi_wrapper.amdsmi_get_gpu_board_info(
        processor_handle, ctypes.byref(board_info)))

    return {
        'model_number': board_info.model_number.decode("utf-8"),
        'product_serial': board_info.product_serial.decode("utf-8"),
        'fru_id': board_info.fru_id.decode("utf-8"),
        'product_name': board_info.product_name.decode("utf-8"),
        'manufacturer_name': board_info.manufacturer_name.decode("utf-8")
    }


def amdsmi_get_fw_info(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    fw_info = amdsmi_wrapper.amdsmi_fw_info_t()
    _check_res(amdsmi_wrapper.amdsmi_get_fw_info(
        processor_handle, ctypes.byref(fw_info)))

    fw = list()
    for i in range(0, fw_info.num_fw_info):
        fw.append({
            'fw_id': AmdSmiFwBlock(fw_info.fw_info_list[i].fw_id),
            'fw_version':  fw_info.fw_info_list[i].fw_version
        })

    return {
        'fw_info_list': fw
    }


def amdsmi_get_fw_error_records(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    records = amdsmi_wrapper.amdsmi_fw_error_record_t()
    _check_res(amdsmi_wrapper.amdsmi_get_fw_error_records(
            processor_handle, ctypes.byref(records)))

    err_records = list()
    for i in range(0, records.num_err_records):
        err_records.append({
            "timestamp": records.err_records[i].timestamp,
            "vf_idx": records.err_records[i].vf_idx,
            "fw_id": AmdSmiFwBlock(records.err_records[i].fw_id),
            "status": AmdSmiGuestFwLoadStatus(records.err_records[i].status),
        })

    return {
        "err_records": err_records
    }


def amdsmi_get_num_vf(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    num_vf_enabled = ctypes.c_uint32()
    num_vf_supported = ctypes.c_uint32()
    _check_res(amdsmi_wrapper.amdsmi_get_num_vf(
        processor_handle, ctypes.byref(num_vf_enabled), ctypes.byref(num_vf_supported)))

    return {
        'num_vf_enabled': num_vf_enabled.value,
        'num_vf_supported': num_vf_supported.value
    }

def amdsmi_set_num_vf(processor_handle, num_vf):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    _check_res(amdsmi_wrapper.amdsmi_set_num_vf(
        processor_handle, ctypes.c_uint8(num_vf)))

def amdsmi_clear_vf_fb(vf_handle):
    if not isinstance(vf_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
            raise AmdSmiParameterException(
                vf_handle, amdsmi_wrapper.amdsmi_vf_handle_t)

    _check_res(amdsmi_wrapper.amdsmi_clear_vf_fb(vf_handle))


def amdsmi_get_vf_partition_info(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    num_vf_enabled = amdsmi_get_num_vf(processor_handle)['num_vf_enabled']
    partition_info = (amdsmi_wrapper.amdsmi_partition_info_t * num_vf_enabled)()
    _check_res(amdsmi_wrapper.amdsmi_get_vf_partition_info(
        processor_handle, ctypes.c_uint(num_vf_enabled), partition_info))

    return _parse_partition_info(partition_info, num_vf_enabled)


def amdsmi_get_vf_data(vf_handle):
    if not isinstance(vf_handle, amdsmi_wrapper.amdsmi_processor_handle):
        if not isinstance(vf_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
            raise AmdSmiParameterException(vf_handle, amdsmi_wrapper.amdsmi_vf_handle_t)

    vf_data = amdsmi_wrapper.amdsmi_vf_data_t()

    _check_res(amdsmi_wrapper.amdsmi_get_vf_data(
        vf_handle, ctypes.byref(vf_data)))

    guard = dict()

    for guard_type in AmdSmiGuardType:
        guard[guard_type.name] = {
            'state': AmdSmiGuardState(vf_data.guard.guard[guard_type].state),
            'amount': vf_data.guard.guard[guard_type].amount,
            'interval': vf_data.guard.guard[guard_type].interval,
            'threshold': vf_data.guard.guard[guard_type].threshold,
            'active': vf_data.guard.guard[guard_type].active
        }

    return{
        'sched':{
            'flr_count': vf_data.sched.flr_count,
            'boot_up_time': vf_data.sched.boot_up_time,
            'shutdown_time': vf_data.sched.shutdown_time,
            'reset_time': vf_data.sched.reset_time,
            'state': AmdSmiVfState(vf_data.sched.state),
            'last_boot_start': vf_data.sched.last_boot_start.decode("utf-8"),
            'last_boot_end': vf_data.sched.last_boot_end.decode("utf-8"),
            'last_shutdown_start': vf_data.sched.last_shutdown_start.decode("utf-8"),
            'last_shutdown_end': vf_data.sched.last_shutdown_end.decode("utf-8"),
            'last_reset_start': vf_data.sched.last_reset_start.decode("utf-8"),
            'last_reset_end': vf_data.sched.last_reset_end.decode("utf-8"),
            'current_active_time': vf_data.sched.current_active_time.decode("utf-8"),
            'current_running_time': vf_data.sched.current_running_time.decode("utf-8"),
            'total_active_time': vf_data.sched.total_active_time.decode("utf-8"),
            'total_running_time': vf_data.sched.total_running_time.decode("utf-8")
        },
        'guard':{
            'enabled': vf_data.guard.enabled,
            'guard': guard
        }
    }


def amdsmi_get_gpu_driver_info(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    info = amdsmi_wrapper.amdsmi_driver_info_t()

    _check_res(amdsmi_wrapper.amdsmi_get_gpu_driver_info(
        processor_handle, info))

    return {
        'driver_version': info.driver_version.decode("utf-8"),
        'driver_date': info.driver_date.decode("utf-8"),
        'driver_name': info.driver_name.decode("utf-8"),
    }


def amdsmi_get_gpu_driver_model(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    driver_model = amdsmi_wrapper.amdsmi_driver_model_type_t()
    _check_res(amdsmi_wrapper.amdsmi_get_gpu_driver_model(
        processor_handle, ctypes.byref(driver_model)))

    return AmdSmiDriverModelType(driver_model.value)

def amdsmi_get_vf_info(vf_handle):
    if not isinstance(vf_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        raise AmdSmiParameterException(vf_handle, amdsmi_wrapper.amdsmi_vf_handle_t)

    vf_config = amdsmi_wrapper.amdsmi_vf_info_t()
    _check_res(amdsmi_wrapper.amdsmi_get_vf_info(
        vf_handle, ctypes.byref(vf_config)))
    return {
        'fb': {
            'fb_offset': vf_config.fb.fb_offset,
            'fb_size': vf_config.fb.fb_size
        },
        'gfx_timeslice': vf_config.gfx_timeslice
    }


def amdsmi_get_gpu_device_uuid(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
            raise AmdSmiParameterException(
                processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    uuid = ctypes.create_string_buffer(_GPU_UUID_SIZE)

    uuid_length = ctypes.c_uint32()
    uuid_length.value = _GPU_UUID_SIZE

    _check_res(amdsmi_wrapper.amdsmi_get_gpu_device_uuid(
        processor_handle, ctypes.byref(uuid_length), uuid))

    return uuid.value.decode("utf-8")


def amdsmi_get_vf_uuid(vf_handle):
    if not isinstance(vf_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
            raise AmdSmiParameterException(
                vf_handle, amdsmi_wrapper.amdsmi_vf_handle_t)

    uuid = ctypes.create_string_buffer(_GPU_UUID_SIZE)

    uuid_length = ctypes.c_uint32()
    uuid_length.value = _GPU_UUID_SIZE

    _check_res(amdsmi_wrapper.amdsmi_get_vf_uuid(
        vf_handle, ctypes.byref(uuid_length), uuid))

    return uuid.value.decode("utf-8")



def amdsmi_get_dfc_fw_table(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    dfc_table = amdsmi_wrapper.amdsmi_dfc_fw_t()
    _check_res(amdsmi_wrapper.amdsmi_get_dfc_fw_table(
            processor_handle, ctypes.byref(dfc_table)))

    data = list()
    for i in range(0, dfc_table.header.dfc_fw_total_entries):
        white_list = list()
        for x in range(len(dfc_table.data[i].c__SA_amdsmi_dfc_fw_data_t_0.white_list)):
            if dfc_table.data[i].c__SA_amdsmi_dfc_fw_data_t_0.white_list[x].latest != 0 and dfc_table.data[i].c__SA_amdsmi_dfc_fw_data_t_0.white_list[x].oldest != 0:
                white_list.append({
                    'latest': dfc_table.data[i].c__SA_amdsmi_dfc_fw_data_t_0.white_list[x].latest,
                    'oldest': dfc_table.data[i].c__SA_amdsmi_dfc_fw_data_t_0.white_list[x].oldest
                })
        black_list = list()
        for x in range(len(dfc_table.data[i].black_list)):
            white_list_index = int(x/4)
            if dfc_table.data[i].c__SA_amdsmi_dfc_fw_data_t_0.white_list[white_list_index].latest != 0 and dfc_table.data[i].c__SA_amdsmi_dfc_fw_data_t_0.white_list[white_list_index].oldest != 0:
                black_list.append({
                    'version': dfc_table.data[i].black_list[x]
                })
        data.append({
            'dfc_fw_type': dfc_table.data[i].dfc_fw_type,
            'verification_enabled': dfc_table.data[i].verification_enabled,
            'customer_ordinal': dfc_table.data[i].customer_ordinal,
            'white_list': white_list,
            'black_list': black_list
        })

    return {
        'header': {
            'dfc_fw_version': dfc_table.header.dfc_fw_version,
            'dfc_fw_total_entries': dfc_table.header.dfc_fw_total_entries,
            'dfc_gart_wr_guest_min': dfc_table.header.dfc_gart_wr_guest_min,
            'dfc_gart_wr_guest_max': dfc_table.header.dfc_gart_wr_guest_max
        },
        'data': data
    }


class AmdSmiEventReader:
    def __init__(self, processor_list, category_list, severity=AmdSmiEventSeverity.INFO):
        if not isinstance(processor_list, Iterable):
            raise AmdSmiParameterException(processor_list, Iterable)
        if not isinstance(category_list, Iterable):
            raise AmdSmiParameterException(category_list, Iterable)
        if not isinstance(severity, AmdSmiEventSeverity):
            raise AmdSmiParameterException(severity, AmdSmiEventSeverity)

        for processor_handle in processor_list:
            if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
                raise AmdSmiParameterException(
                    processor_handle, amdsmi_wrapper.amdsmi_processor_handle)
        for category in category_list:
            if not isinstance(category, AmdSmiEventCategory):
                raise AmdSmiParameterException(
                    category, AmdSmiEventCategory)

        processor_count = len(processor_list)
        processors = (amdsmi_wrapper.amdsmi_processor_handle * processor_count)()
        event_mask = _set_mask(category_list, severity)
        for i in range(processor_count):
            processors[i] = processor_list[i]
        event_set = amdsmi_wrapper.amdsmi_event_set()
        _check_res(amdsmi_wrapper.amdsmi_event_create(
            processors, ctypes.c_uint32(processor_count),
            ctypes.c_uint64(event_mask),event_set))

        self.event_set = event_set

    def read(self, timestamp):
        amdsmi_event_entry = amdsmi_wrapper.amdsmi_event_entry_t()
        _check_res(amdsmi_wrapper.amdsmi_event_read(
            self.event_set,ctypes.c_int64(timestamp)
            ,ctypes.byref(amdsmi_event_entry)))

        return {
            'fcn_id': amdsmi_event_entry.fcn_id,
            'dev_id': amdsmi_wrapper.amdsmi_processor_handle(amdsmi_event_entry.dev_id),
            'timestamp': amdsmi_event_entry.timestamp,
            'data': amdsmi_event_entry.data,
            'category': AmdSmiEventCategory(amdsmi_event_entry.category),
            'subcode': _find_subcode(amdsmi_event_entry.category, amdsmi_event_entry.subcode),
            'level': AmdSmiEventSeverity(amdsmi_event_entry.level),
            'date': amdsmi_event_entry.date.decode("utf-8"),
            'message': amdsmi_event_entry.message.decode("utf-8")
        }

    def stop(self):
        if hasattr(self, 'event_set'):
            _check_res(amdsmi_wrapper.amdsmi_event_destroy(self.event_set))

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.stop()


def amdsmi_get_guest_data(vf_handle):
    if not isinstance(vf_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        raise AmdSmiParameterException(
            vf_handle, amdsmi_wrapper.amdsmi_vf_handle_t)

    guest_data = amdsmi_wrapper.amdsmi_guest_data_t()
    _check_res(amdsmi_wrapper.amdsmi_get_guest_data(
            vf_handle, ctypes.byref(guest_data)))

    driver_version = bytes(guest_data.driver_version).decode(
        "utf-8").replace("\x00", "")

    return {
        'driver_version': driver_version,
        'fb_usage': guest_data.fb_usage
    }


def amdsmi_get_vf_fw_info(vf_handle):
    if not isinstance(vf_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        raise AmdSmiParameterException(
            vf_handle, amdsmi_wrapper.amdsmi_vf_handle_t)

    fw_info = amdsmi_wrapper.amdsmi_fw_info_t()
    _check_res(amdsmi_wrapper.amdsmi_get_vf_fw_info(
        vf_handle, ctypes.byref(fw_info)))

    fw = list()
    for i in range(0, fw_info.num_fw_info):
        fw.append({
            'fw_id': AmdSmiFwBlock(fw_info.fw_info_list[i].fw_id),
            'fw_version':  fw_info.fw_info_list[i].fw_version
        })

    return {
        'fw_info_list': fw
    }


def _format_profile_caps(profile_caps):
    profile_caps_dict = dict()

    for cap_type in AmdSmiProfileCapabilityType:
        profile_caps_dict[cap_type.name] = {
            'total': profile_caps[cap_type].total,
            'available': profile_caps[cap_type].available,
            'optimal': profile_caps[cap_type].optimal,
            'min_value': profile_caps[cap_type].min_value,
            'max_value': profile_caps[cap_type].max_value,
        }

    return profile_caps_dict


def _get_profile_list(profile_info):
    profiles = list()
    for i in range(0, profile_info.profile_count):
        profiles.append({
            'vf_count': profile_info.profiles[i].vf_count,
            'profile_caps': _format_profile_caps(profile_info.profiles[i].profile_caps)
        })

    return profiles


def amdsmi_get_partition_profile_info(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    profile_info = amdsmi_wrapper.amdsmi_profile_info_t()
    _check_res(amdsmi_wrapper.amdsmi_get_partition_profile_info(
            processor_handle, ctypes.byref(profile_info)))

    profiles = _get_profile_list(profile_info)

    return {
        'current_profile_index': profiles[profile_info.current_profile_index],
        'profiles': profiles
    }


def amdsmi_get_link_metrics(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    link_metrics = amdsmi_wrapper.amdsmi_link_metrics_t()
    _check_res(amdsmi_wrapper.amdsmi_get_link_metrics(
            processor_handle, ctypes.byref(link_metrics)))

    link_list = list()

    for i in range(0, link_metrics.num_links):
        link_list.append({
            "bdf": _format_bdf(link_metrics.links[i].bdf),
            "bit_rate": link_metrics.links[i].bit_rate,
            "max_bandwidth": link_metrics.links[i].max_bandwidth,
            "link_type": AmdSmiLinkType(link_metrics.links[i].link_type).name,
            "read": link_metrics.links[i].read,
            "write": link_metrics.links[i].write
        })

    return {
        "links": link_list
    }

def amdsmi_get_link_topology(processor_handle_src, processor_handle_dst):
    if not isinstance(processor_handle_src, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle_src, amdsmi_wrapper.amdsmi_processor_handle)

    if not isinstance(processor_handle_dst, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle_dst, amdsmi_wrapper.amdsmi_processor_handle)

    link_topology = amdsmi_wrapper.amdsmi_link_topology_t()
    _check_res(amdsmi_wrapper.amdsmi_get_link_topology(
            processor_handle_src, processor_handle_dst, ctypes.byref(link_topology)))

    return {
        "weight": link_topology.weight,
        "link_status": AmdSmiLinkStatus(link_topology.link_status),
        "link_type": AmdSmiLinkType(link_topology.link_type),
        "num_hops": link_topology.num_hops,
        "fb_sharing": link_topology.fb_sharing
    }


def amdsmi_get_xgmi_fb_sharing_caps(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    caps = amdsmi_wrapper.amdsmi_xgmi_fb_sharing_caps_t()
    _check_res(amdsmi_wrapper.amdsmi_get_xgmi_fb_sharing_caps(
            processor_handle, ctypes.byref(caps)))

    return {
        "mode_custom_cap": caps.cap.mode_custom_cap,
        "mode_1_cap": caps.cap.mode_1_cap,
        "mode_2_cap": caps.cap.mode_2_cap,
        "mode_4_cap": caps.cap.mode_4_cap,
        "mode_8_cap": caps.cap.mode_8_cap
    }


def amdsmi_get_xgmi_fb_sharing_mode_info(processor_handle_src, processor_handle_dst, mode):
    if not isinstance(processor_handle_src, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle_src, amdsmi_wrapper.amdsmi_processor_handle)
    if not isinstance(processor_handle_dst, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle_dst, amdsmi_wrapper.amdsmi_processor_handle)
    if not isinstance(mode, AmdSmiXgmiFbSharingMode):
        raise AmdSmiParameterException(mode, AmdSmiXgmiFbSharingMode)

    fb_sharing = ctypes.c_uint8()
    _check_res(amdsmi_wrapper.amdsmi_get_xgmi_fb_sharing_mode_info(
            processor_handle_src, processor_handle_dst, mode, ctypes.byref(fb_sharing)))

    return fb_sharing.value

def amdsmi_set_xgmi_fb_sharing_mode(processor_handle, mode):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)
    if not isinstance(mode, AmdSmiXgmiFbSharingMode):
        raise AmdSmiParameterException(mode, AmdSmiXgmiFbSharingMode)

    _check_res(amdsmi_wrapper.amdsmi_set_xgmi_fb_sharing_mode(
            processor_handle, mode))

def amdsmi_set_xgmi_fb_sharing_mode_v2(processor_list, mode):
    if not isinstance(processor_list, Iterable):
            raise AmdSmiParameterException(processor_list, Iterable)
    if not isinstance(mode, AmdSmiXgmiFbSharingMode):
        raise AmdSmiParameterException(mode, AmdSmiXgmiFbSharingMode)
    for processor_handle in processor_list:
        if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
            raise AmdSmiParameterException(
                    processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    num_processors = len(processor_list)
    processors = (amdsmi_wrapper.amdsmi_processor_handle * num_processors)()
    for i in range(num_processors):
        processors[i] = processor_list[i]

    _check_res(amdsmi_wrapper.amdsmi_set_xgmi_fb_sharing_mode_v2(
            processors, ctypes.c_uint32(num_processors), mode))

def _format_metric_types(metrics_table, i):
    flag_list = list()

    flag_list.append(AmdSmiMetricType.COUNTER.name if metrics_table[i].flags & AmdSmiMetricType.COUNTER else "")
    flag_list.append(AmdSmiMetricType.CHIPLET.name if metrics_table[i].flags & AmdSmiMetricType.CHIPLET else "")
    flag_list.append(AmdSmiMetricType.INST.name if metrics_table[i].flags & AmdSmiMetricType.INST else "")
    flag_list.append(AmdSmiMetricType.ACC.name if metrics_table[i].flags & AmdSmiMetricType.ACC else "")

    return list(filter(None, flag_list))


def amdsmi_get_gpu_metrics(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    metrics_size = ctypes.c_uint32(_AMDSMI_MAX_NUM_METRICS)
    metrics_table = (amdsmi_wrapper.amdsmi_metric_t * metrics_size.value)()
    _check_res(amdsmi_wrapper.amdsmi_get_gpu_metrics(
            processor_handle, ctypes.byref(metrics_size), metrics_table))

    metrics_list = list()

    for i in range(0, metrics_size.value):
        flags = _format_metric_types(metrics_table, i)
        metrics_list.append({
            "unit": AmdSmiMetricUnit(metrics_table[i].unit),
            "name": AmdSmiMetricName(metrics_table[i].name),
            "category": AmdSmiMetricCategory(metrics_table[i].category),
            "flags": flags,
            "vf_mask": metrics_table[i].vf_mask,
            "val": metrics_table[i].val
        })

    return metrics_list

def amdsmi_get_lib_version():
    version = amdsmi_wrapper.amdsmi_version_t()

    _check_res(amdsmi_wrapper.amdsmi_get_lib_version(ctypes.byref(version)))

    return {
        "major": version.major,
        "minor": version.minor,
        "release": version.release
    }

def _format_memory_caps(mode):
    supported_capabilities = []

    if mode.nps_cap_mask & AmdSmiMemoryPartitionSetting.NPS1:
        supported_capabilities.append(AmdSmiMemoryPartitionSetting.NPS1)
    if mode.nps_cap_mask & AmdSmiMemoryPartitionSetting.NPS2:
        supported_capabilities.append(AmdSmiMemoryPartitionSetting.NPS2)
    if mode.nps_cap_mask & AmdSmiMemoryPartitionSetting.NPS4:
        supported_capabilities.append(AmdSmiMemoryPartitionSetting.NPS4)
    if mode.nps_cap_mask & AmdSmiMemoryPartitionSetting.NPS8:
        supported_capabilities.append(AmdSmiMemoryPartitionSetting.NPS8)

    return supported_capabilities

def amdsmi_get_gpu_memory_partition_config(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    config = amdsmi_wrapper.amdsmi_memory_partition_config_t()
    _check_res(amdsmi_wrapper.amdsmi_get_gpu_memory_partition_config(
        processor_handle, ctypes.byref(config)))

    supported_capabilities = _format_memory_caps(config.partition_caps)

    numa_range = list()
    for i in range (0, config.num_numa_ranges):
        numa_range.append({
            'memory_type': AmdSmiVramType(config.numa_range[i].memory_type),
            'start': hex(config.numa_range[i].start),
            'end': hex(config.numa_range[i].end)
        })

    return {
        'partition_caps': supported_capabilities,
        'mp_mode': AmdSmiMemoryPartitionSetting(config.mp_mode),
        'numa_range': numa_range
    }

def amdsmi_set_gpu_memory_partition_mode(processor_handle, mode):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if not isinstance(mode, AmdSmiMemoryPartitionSetting):
        mode = AmdSmiMemoryPartitionSetting.UNKNOWN

    _check_res(amdsmi_wrapper.amdsmi_set_gpu_memory_partition_mode(
            processor_handle, mode))

def amdsmi_get_gpu_accelerator_partition_profile_config(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    profile_config = amdsmi_wrapper.amdsmi_accelerator_partition_profile_config_t()
    _check_res(amdsmi_wrapper.amdsmi_get_gpu_accelerator_partition_profile_config(
        processor_handle, ctypes.byref(profile_config)))

    resources = list()

    for i in range(profile_config.num_resource_profiles):
        resources.append({
            'profile_index': profile_config.resource_profiles[i].profile_index,
            'resource_type': AmdSmiAcceleratorPartitionResource(profile_config.resource_profiles[i].resource_type),
            'partition_resource': profile_config.resource_profiles[i].partition_resource,
            'num_partitions_share_resource': profile_config.resource_profiles[i].num_partitions_share_resource
        })

    profiles = list()
    for i in range(profile_config.num_profiles):
        resource_profile_index = list()
        for j in range(profile_config.profiles[i].num_partitions):
            partition_resources = []
            for k in range(profile_config.profiles[i].num_resources):
                partition_resources.append(
                    profile_config.profiles[i].resources[j][k]
                )
            resource_profile_index.append(partition_resources)
        profiles.append({
            'profile_type': AmdSmiAcceleratorPartitionSetting(profile_config.profiles[i].profile_type),
            'num_partitions': profile_config.profiles[i].num_partitions,
            'memory_caps': _format_memory_caps(profile_config.profiles[i].memory_caps),
            'profile_index': profile_config.profiles[i].profile_index,
            'resources': resource_profile_index
        })

    return {
        'resource_profiles': resources,
        'default_profiles_index': profile_config.default_profile_index,
        'profiles': profiles
    }

def amdsmi_get_gpu_accelerator_partition_profile(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if isinstance(processor_handle, amdsmi_wrapper.amdsmi_vf_handle_t):
        processor_handle = ctypes.pointer(ctypes.c_uint64(processor_handle.handle))

    num_partitions = _AMDSMI_MAX_ACCELERATOR_PROFILE
    partition_id = (ctypes.c_uint32 * num_partitions)()

    accelerator_partition_profile = amdsmi_wrapper.amdsmi_accelerator_partition_profile_t()
    _check_res(amdsmi_wrapper.amdsmi_get_gpu_accelerator_partition_profile(
        processor_handle, ctypes.byref(accelerator_partition_profile), partition_id))

    profile_resource_index_list = list()
    for i in range (0, accelerator_partition_profile.num_partitions):
        profile_resource_index = list()
        for j in range (0, accelerator_partition_profile.num_resources):
            profile_resource_index.append(
            accelerator_partition_profile.resources[i][j]
            )
        profile_resource_index_list.append(profile_resource_index)

    profile = {
        'profile_type': AmdSmiAcceleratorPartitionSetting(accelerator_partition_profile.profile_type),
        'num_partitions': accelerator_partition_profile.num_partitions,
        'memory_caps': _format_memory_caps(accelerator_partition_profile.memory_caps),
        'profile_index': accelerator_partition_profile.profile_index,
        'resources': profile_resource_index_list
    }

    return {
        'profile': profile,
        'partition_id': list(partition_id)[:accelerator_partition_profile.num_partitions]
    }

def amdsmi_set_gpu_accelerator_partition_profile(processor_handle, profile_index):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    if not isinstance(profile_index, int):
        raise AmdSmiParameterException(profile_index, ctypes.uint32())

    _check_res(amdsmi_wrapper.amdsmi_set_gpu_accelerator_partition_profile(
            processor_handle, profile_index))

def amdsmi_get_soc_pstate(processor_handle):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    dpm_policy = amdsmi_wrapper.amdsmi_dpm_policy_t()
    _check_res(amdsmi_wrapper.amdsmi_get_soc_pstate(
            processor_handle, ctypes.byref(dpm_policy)))

    policies_list = list()

    for i in range(0, dpm_policy.num_supported):
        policies_list.append({
            "policy_id": dpm_policy.policies[i].policy_id,
            "policy_description": dpm_policy.policies[i].policy_description.decode("utf-8"),
        })

    return {
        "cur": dpm_policy.cur,
        "policies": policies_list
    }

def amdsmi_set_soc_pstate(processor_handle, policy_id):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    _check_res(amdsmi_wrapper.amdsmi_set_soc_pstate(
            processor_handle, policy_id))


def amdsmi_gpu_get_cper_entries(processor_handle, severity_mask):
    if not isinstance(processor_handle, amdsmi_wrapper.amdsmi_processor_handle):
        raise AmdSmiParameterException(
            processor_handle, amdsmi_wrapper.amdsmi_processor_handle)

    buffer_size = ctypes.c_uint64()   # Initial buffer size
    buffer_size.value = 1024
    cper_data = (ctypes.c_char * buffer_size.value)()
    cper_hdrs = (ctypes.POINTER(amdsmi_wrapper.amdsmi_cper_hdr) * 1024)()
    entry_count = ctypes.c_uint64()
    cursor = ctypes.c_uint64()

    if not isinstance(severity_mask, AmdSmiCperErrorSeverity):
        raise AmdSmiParameterException(severity_mask, AmdSmiCperErrorSeverity)

    ret = amdsmi_wrapper.amdsmi_gpu_get_cper_entries(
        processor_handle,
        severity_mask,
        cper_data,
        ctypes.byref(buffer_size),
        cper_hdrs,
        ctypes.byref(entry_count),
        ctypes.byref(cursor)
    )

    raw_cper_data_list = []
    for i in range(entry_count.value):
        hdr = ctypes.cast(cper_hdrs[i], ctypes.POINTER(amdsmi_wrapper.amdsmi_cper_hdr)).contents
        raw_cper_data_list.append(cper_data.raw[hdr.record_length])

    return raw_cper_data_list
