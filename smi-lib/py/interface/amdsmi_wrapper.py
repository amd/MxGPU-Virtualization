
#
# Copyright (C) 2019-2023 Advanced Micro Devices. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

import os
# -*- coding: utf-8 -*-
#
# TARGET arch is: ['-I/usr/lib/llvm-10/lib/clang/10.0.0/include', '-DWS_RECORD']
# WORD_SIZE is: 8
# POINTER_SIZE is: 8
# LONGDOUBLE_SIZE is: 16
#
import ctypes


c_int128 = ctypes.c_ubyte*16
c_uint128 = c_int128
void = None
if ctypes.sizeof(ctypes.c_longdouble) == 16:
    c_long_double_t = ctypes.c_longdouble
else:
    c_long_double_t = ctypes.c_ubyte*16

class AsDictMixin:
    @classmethod
    def as_dict(cls, self):
        result = {}
        if not isinstance(self, AsDictMixin):
            # not a structure, assume it's already a python object
            return self
        if not hasattr(cls, "_fields_"):
            return result
        # sys.version_info >= (3, 5)
        # for (field, *_) in cls._fields_:  # noqa
        for field_tuple in cls._fields_:  # noqa
            field = field_tuple[0]
            if field.startswith('PADDING_'):
                continue
            value = getattr(self, field)
            type_ = type(value)
            if hasattr(value, "_length_") and hasattr(value, "_type_"):
                # array
                if not hasattr(type_, "as_dict"):
                    value = [v for v in value]
                else:
                    type_ = type_._type_
                    value = [type_.as_dict(v) for v in value]
            elif hasattr(value, "contents") and hasattr(value, "_type_"):
                # pointer
                try:
                    if not hasattr(type_, "as_dict"):
                        value = value.contents
                    else:
                        type_ = type_._type_
                        value = type_.as_dict(value.contents)
                except ValueError:
                    # nullptr
                    value = None
            elif isinstance(value, AsDictMixin):
                # other structure
                value = type_.as_dict(value)
            result[field] = value
        return result


class Structure(ctypes.Structure, AsDictMixin):

    def __init__(self, *args, **kwds):
        # We don't want to use positional arguments fill PADDING_* fields

        args = dict(zip(self.__class__._field_names_(), args))
        args.update(kwds)
        super(Structure, self).__init__(**args)

    @classmethod
    def _field_names_(cls):
        if hasattr(cls, '_fields_'):
            return (f[0] for f in cls._fields_ if not f[0].startswith('PADDING'))
        else:
            return ()

    @classmethod
    def get_type(cls, field):
        for f in cls._fields_:
            if f[0] == field:
                return f[1]
        return None

    @classmethod
    def bind(cls, bound_fields):
        fields = {}
        for name, type_ in cls._fields_:
            if hasattr(type_, "restype"):
                if name in bound_fields:
                    if bound_fields[name] is None:
                        fields[name] = type_()
                    else:
                        # use a closure to capture the callback from the loop scope
                        fields[name] = (
                            type_((lambda callback: lambda *args: callback(*args))(
                                bound_fields[name]))
                        )
                    del bound_fields[name]
                else:
                    # default callback implementation (does nothing)
                    try:
                        default_ = type_(0).restype().value
                    except TypeError:
                        default_ = None
                    fields[name] = type_((
                        lambda default_: lambda *args: default_)(default_))
            else:
                # not a callback function, use default initialization
                if name in bound_fields:
                    fields[name] = bound_fields[name]
                    del bound_fields[name]
                else:
                    fields[name] = type_()
        if len(bound_fields) != 0:
            raise ValueError(
                "Cannot bind the following unknown callback(s) {}.{}".format(
                    cls.__name__, bound_fields.keys()
            ))
        return cls(**fields)


class Union(ctypes.Union, AsDictMixin):
    pass



_libraries = {}
_libraries['libamdsmi.so'] = ctypes.CDLL(os.path.join(os.path.dirname(__file__), 'libamdsmi.so'))
def string_cast(char_pointer, encoding='utf-8', errors='strict'):
    value = ctypes.cast(char_pointer, ctypes.c_char_p).value
    if value is not None and encoding is not None:
        value = value.decode(encoding, errors=errors)
    return value


def char_pointer_cast(string, encoding='utf-8'):
    if encoding is not None:
        try:
            string = string.encode(encoding)
        except AttributeError:
            # In Python3, bytes has no encode attribute
            pass
    string = ctypes.c_char_p(string)
    return ctypes.cast(string, ctypes.POINTER(ctypes.c_char))






# values for enumeration 'c__EA_amdsmi_init_flags_t'
c__EA_amdsmi_init_flags_t__enumvalues = {
    4294967295: 'AMDSMI_INIT_ALL_PROCESSORS',
    1: 'AMDSMI_INIT_AMD_CPUS',
    2: 'AMDSMI_INIT_AMD_GPUS',
    4: 'AMDSMI_INIT_NON_AMD_CPUS',
    8: 'AMDSMI_INIT_NON_AMD_GPUS',
    3: 'AMDSMI_INIT_AMD_APUS',
}
AMDSMI_INIT_ALL_PROCESSORS = 4294967295
AMDSMI_INIT_AMD_CPUS = 1
AMDSMI_INIT_AMD_GPUS = 2
AMDSMI_INIT_NON_AMD_CPUS = 4
AMDSMI_INIT_NON_AMD_GPUS = 8
AMDSMI_INIT_AMD_APUS = 3
c__EA_amdsmi_init_flags_t = ctypes.c_uint32 # enum
amdsmi_init_flags_t = c__EA_amdsmi_init_flags_t
amdsmi_init_flags_t__enumvalues = c__EA_amdsmi_init_flags_t__enumvalues
amdsmi_socket_handle = ctypes.POINTER(None)
amdsmi_event_set = ctypes.POINTER(None)
amdsmi_processor_handle = ctypes.POINTER(None)

# values for enumeration 'c__EA_amdsmi_status_t'
c__EA_amdsmi_status_t__enumvalues = {
    0: 'AMDSMI_STATUS_SUCCESS',
    1: 'AMDSMI_STATUS_INVAL',
    2: 'AMDSMI_STATUS_NOT_SUPPORTED',
    3: 'AMDSMI_STATUS_NOT_YET_IMPLEMENTED',
    4: 'AMDSMI_STATUS_FAIL_LOAD_MODULE',
    5: 'AMDSMI_STATUS_FAIL_LOAD_SYMBOL',
    6: 'AMDSMI_STATUS_DRM_ERROR',
    7: 'AMDSMI_STATUS_API_FAILED',
    8: 'AMDSMI_STATUS_TIMEOUT',
    9: 'AMDSMI_STATUS_RETRY',
    10: 'AMDSMI_STATUS_NO_PERM',
    11: 'AMDSMI_STATUS_INTERRUPT',
    12: 'AMDSMI_STATUS_IO',
    13: 'AMDSMI_STATUS_ADDRESS_FAULT',
    14: 'AMDSMI_STATUS_FILE_ERROR',
    15: 'AMDSMI_STATUS_OUT_OF_RESOURCES',
    16: 'AMDSMI_STATUS_INTERNAL_EXCEPTION',
    17: 'AMDSMI_STATUS_INPUT_OUT_OF_BOUNDS',
    18: 'AMDSMI_STATUS_INIT_ERROR',
    19: 'AMDSMI_STATUS_REFCOUNT_OVERFLOW',
    20: 'AMDSMI_STATUS_MORE_DATA',
    30: 'AMDSMI_STATUS_BUSY',
    31: 'AMDSMI_STATUS_NOT_FOUND',
    32: 'AMDSMI_STATUS_NOT_INIT',
    33: 'AMDSMI_STATUS_NO_SLOT',
    34: 'AMDSMI_STATUS_DRIVER_NOT_LOADED',
    40: 'AMDSMI_STATUS_NO_DATA',
    41: 'AMDSMI_STATUS_INSUFFICIENT_SIZE',
    42: 'AMDSMI_STATUS_UNEXPECTED_SIZE',
    43: 'AMDSMI_STATUS_UNEXPECTED_DATA',
    44: 'AMDSMI_STATUS_NON_AMD_CPU',
    45: 'AMDSMI_STATUS_NO_ENERGY_DRV',
    46: 'AMDSMI_STATUS_NO_MSR_DRV',
    47: 'AMDSMI_STATUS_NO_HSMP_DRV',
    48: 'AMDSMI_STATUS_NO_HSMP_SUP',
    49: 'AMDSMI_STATUS_NO_HSMP_MSG_SUP',
    50: 'AMDSMI_STATUS_HSMP_TIMEOUT',
    51: 'AMDSMI_STATUS_NO_DRV',
    52: 'AMDSMI_STATUS_FILE_NOT_FOUND',
    53: 'AMDSMI_STATUS_ARG_PTR_NULL',
    54: 'AMDSMI_STATUS_AMDGPU_RESTART_ERR',
    55: 'AMDSMI_STATUS_SETTING_UNAVAILABLE',
    4294967294: 'AMDSMI_STATUS_MAP_ERROR',
    4294967295: 'AMDSMI_STATUS_UNKNOWN_ERROR',
}
AMDSMI_STATUS_SUCCESS = 0
AMDSMI_STATUS_INVAL = 1
AMDSMI_STATUS_NOT_SUPPORTED = 2
AMDSMI_STATUS_NOT_YET_IMPLEMENTED = 3
AMDSMI_STATUS_FAIL_LOAD_MODULE = 4
AMDSMI_STATUS_FAIL_LOAD_SYMBOL = 5
AMDSMI_STATUS_DRM_ERROR = 6
AMDSMI_STATUS_API_FAILED = 7
AMDSMI_STATUS_TIMEOUT = 8
AMDSMI_STATUS_RETRY = 9
AMDSMI_STATUS_NO_PERM = 10
AMDSMI_STATUS_INTERRUPT = 11
AMDSMI_STATUS_IO = 12
AMDSMI_STATUS_ADDRESS_FAULT = 13
AMDSMI_STATUS_FILE_ERROR = 14
AMDSMI_STATUS_OUT_OF_RESOURCES = 15
AMDSMI_STATUS_INTERNAL_EXCEPTION = 16
AMDSMI_STATUS_INPUT_OUT_OF_BOUNDS = 17
AMDSMI_STATUS_INIT_ERROR = 18
AMDSMI_STATUS_REFCOUNT_OVERFLOW = 19
AMDSMI_STATUS_MORE_DATA = 20
AMDSMI_STATUS_BUSY = 30
AMDSMI_STATUS_NOT_FOUND = 31
AMDSMI_STATUS_NOT_INIT = 32
AMDSMI_STATUS_NO_SLOT = 33
AMDSMI_STATUS_DRIVER_NOT_LOADED = 34
AMDSMI_STATUS_NO_DATA = 40
AMDSMI_STATUS_INSUFFICIENT_SIZE = 41
AMDSMI_STATUS_UNEXPECTED_SIZE = 42
AMDSMI_STATUS_UNEXPECTED_DATA = 43
AMDSMI_STATUS_NON_AMD_CPU = 44
AMDSMI_STATUS_NO_ENERGY_DRV = 45
AMDSMI_STATUS_NO_MSR_DRV = 46
AMDSMI_STATUS_NO_HSMP_DRV = 47
AMDSMI_STATUS_NO_HSMP_SUP = 48
AMDSMI_STATUS_NO_HSMP_MSG_SUP = 49
AMDSMI_STATUS_HSMP_TIMEOUT = 50
AMDSMI_STATUS_NO_DRV = 51
AMDSMI_STATUS_FILE_NOT_FOUND = 52
AMDSMI_STATUS_ARG_PTR_NULL = 53
AMDSMI_STATUS_AMDGPU_RESTART_ERR = 54
AMDSMI_STATUS_SETTING_UNAVAILABLE = 55
AMDSMI_STATUS_MAP_ERROR = 4294967294
AMDSMI_STATUS_UNKNOWN_ERROR = 4294967295
c__EA_amdsmi_status_t = ctypes.c_uint32 # enum
amdsmi_status_t = c__EA_amdsmi_status_t
amdsmi_status_t__enumvalues = c__EA_amdsmi_status_t__enumvalues

# values for enumeration 'c__EA_amdsmi_cache_property_type_t'
c__EA_amdsmi_cache_property_type_t__enumvalues = {
    1: 'AMDSMI_CACHE_PROPERTY_ENABLED',
    2: 'AMDSMI_CACHE_PROPERTY_DATA_CACHE',
    4: 'AMDSMI_CACHE_PROPERTY_INST_CACHE',
    8: 'AMDSMI_CACHE_PROPERTY_CPU_CACHE',
    16: 'AMDSMI_CACHE_PROPERTY_SIMD_CACHE',
}
AMDSMI_CACHE_PROPERTY_ENABLED = 1
AMDSMI_CACHE_PROPERTY_DATA_CACHE = 2
AMDSMI_CACHE_PROPERTY_INST_CACHE = 4
AMDSMI_CACHE_PROPERTY_CPU_CACHE = 8
AMDSMI_CACHE_PROPERTY_SIMD_CACHE = 16
c__EA_amdsmi_cache_property_type_t = ctypes.c_uint32 # enum
amdsmi_cache_property_type_t = c__EA_amdsmi_cache_property_type_t
amdsmi_cache_property_type_t__enumvalues = c__EA_amdsmi_cache_property_type_t__enumvalues

# values for enumeration 'c__EA_amdsmi_fw_block_t'
c__EA_amdsmi_fw_block_t__enumvalues = {
    1: 'AMDSMI_FW_ID_SMU',
    1: 'AMDSMI_FW_ID_FIRST',
    2: 'AMDSMI_FW_ID_CP_CE',
    3: 'AMDSMI_FW_ID_CP_PFP',
    4: 'AMDSMI_FW_ID_CP_ME',
    5: 'AMDSMI_FW_ID_CP_MEC_JT1',
    6: 'AMDSMI_FW_ID_CP_MEC_JT2',
    7: 'AMDSMI_FW_ID_CP_MEC1',
    8: 'AMDSMI_FW_ID_CP_MEC2',
    9: 'AMDSMI_FW_ID_RLC',
    10: 'AMDSMI_FW_ID_SDMA0',
    11: 'AMDSMI_FW_ID_SDMA1',
    12: 'AMDSMI_FW_ID_SDMA2',
    13: 'AMDSMI_FW_ID_SDMA3',
    14: 'AMDSMI_FW_ID_SDMA4',
    15: 'AMDSMI_FW_ID_SDMA5',
    16: 'AMDSMI_FW_ID_SDMA6',
    17: 'AMDSMI_FW_ID_SDMA7',
    18: 'AMDSMI_FW_ID_VCN',
    19: 'AMDSMI_FW_ID_UVD',
    20: 'AMDSMI_FW_ID_VCE',
    21: 'AMDSMI_FW_ID_ISP',
    22: 'AMDSMI_FW_ID_DMCU_ERAM',
    23: 'AMDSMI_FW_ID_DMCU_ISR',
    24: 'AMDSMI_FW_ID_RLC_RESTORE_LIST_GPM_MEM',
    25: 'AMDSMI_FW_ID_RLC_RESTORE_LIST_SRM_MEM',
    26: 'AMDSMI_FW_ID_RLC_RESTORE_LIST_CNTL',
    27: 'AMDSMI_FW_ID_RLC_V',
    28: 'AMDSMI_FW_ID_MMSCH',
    29: 'AMDSMI_FW_ID_PSP_SYSDRV',
    30: 'AMDSMI_FW_ID_PSP_SOSDRV',
    31: 'AMDSMI_FW_ID_PSP_TOC',
    32: 'AMDSMI_FW_ID_PSP_KEYDB',
    33: 'AMDSMI_FW_ID_DFC',
    34: 'AMDSMI_FW_ID_PSP_SPL',
    35: 'AMDSMI_FW_ID_DRV_CAP',
    36: 'AMDSMI_FW_ID_MC',
    37: 'AMDSMI_FW_ID_PSP_BL',
    38: 'AMDSMI_FW_ID_CP_PM4',
    39: 'AMDSMI_FW_ID_RLC_P',
    40: 'AMDSMI_FW_ID_SEC_POLICY_STAGE2',
    41: 'AMDSMI_FW_ID_REG_ACCESS_WHITELIST',
    42: 'AMDSMI_FW_ID_IMU_DRAM',
    43: 'AMDSMI_FW_ID_IMU_IRAM',
    44: 'AMDSMI_FW_ID_SDMA_TH0',
    45: 'AMDSMI_FW_ID_SDMA_TH1',
    46: 'AMDSMI_FW_ID_CP_MES',
    47: 'AMDSMI_FW_ID_MES_STACK',
    48: 'AMDSMI_FW_ID_MES_THREAD1',
    49: 'AMDSMI_FW_ID_MES_THREAD1_STACK',
    50: 'AMDSMI_FW_ID_RLX6',
    51: 'AMDSMI_FW_ID_RLX6_DRAM_BOOT',
    52: 'AMDSMI_FW_ID_RS64_ME',
    53: 'AMDSMI_FW_ID_RS64_ME_P0_DATA',
    54: 'AMDSMI_FW_ID_RS64_ME_P1_DATA',
    55: 'AMDSMI_FW_ID_RS64_PFP',
    56: 'AMDSMI_FW_ID_RS64_PFP_P0_DATA',
    57: 'AMDSMI_FW_ID_RS64_PFP_P1_DATA',
    58: 'AMDSMI_FW_ID_RS64_MEC',
    59: 'AMDSMI_FW_ID_RS64_MEC_P0_DATA',
    60: 'AMDSMI_FW_ID_RS64_MEC_P1_DATA',
    61: 'AMDSMI_FW_ID_RS64_MEC_P2_DATA',
    62: 'AMDSMI_FW_ID_RS64_MEC_P3_DATA',
    63: 'AMDSMI_FW_ID_PPTABLE',
    64: 'AMDSMI_FW_ID_PSP_SOC',
    65: 'AMDSMI_FW_ID_PSP_DBG',
    66: 'AMDSMI_FW_ID_PSP_INTF',
    67: 'AMDSMI_FW_ID_RLX6_CORE1',
    68: 'AMDSMI_FW_ID_RLX6_DRAM_BOOT_CORE1',
    69: 'AMDSMI_FW_ID_RLCV_LX7',
    70: 'AMDSMI_FW_ID_RLC_SAVE_RESTORE_LIST',
    71: 'AMDSMI_FW_ID_ASD',
    72: 'AMDSMI_FW_ID_TA_RAS',
    73: 'AMDSMI_FW_ID_XGMI',
    74: 'AMDSMI_FW_ID_RLC_SRLG',
    75: 'AMDSMI_FW_ID_RLC_SRLS',
    76: 'AMDSMI_FW_ID_SMC',
    77: 'AMDSMI_FW_ID_DMCU',
    78: 'AMDSMI_FW_ID_PSP_RAS',
    79: 'AMDSMI_FW_ID_P2S_TABLE',
    80: 'AMDSMI_FW_ID__MAX',
}
AMDSMI_FW_ID_SMU = 1
AMDSMI_FW_ID_FIRST = 1
AMDSMI_FW_ID_CP_CE = 2
AMDSMI_FW_ID_CP_PFP = 3
AMDSMI_FW_ID_CP_ME = 4
AMDSMI_FW_ID_CP_MEC_JT1 = 5
AMDSMI_FW_ID_CP_MEC_JT2 = 6
AMDSMI_FW_ID_CP_MEC1 = 7
AMDSMI_FW_ID_CP_MEC2 = 8
AMDSMI_FW_ID_RLC = 9
AMDSMI_FW_ID_SDMA0 = 10
AMDSMI_FW_ID_SDMA1 = 11
AMDSMI_FW_ID_SDMA2 = 12
AMDSMI_FW_ID_SDMA3 = 13
AMDSMI_FW_ID_SDMA4 = 14
AMDSMI_FW_ID_SDMA5 = 15
AMDSMI_FW_ID_SDMA6 = 16
AMDSMI_FW_ID_SDMA7 = 17
AMDSMI_FW_ID_VCN = 18
AMDSMI_FW_ID_UVD = 19
AMDSMI_FW_ID_VCE = 20
AMDSMI_FW_ID_ISP = 21
AMDSMI_FW_ID_DMCU_ERAM = 22
AMDSMI_FW_ID_DMCU_ISR = 23
AMDSMI_FW_ID_RLC_RESTORE_LIST_GPM_MEM = 24
AMDSMI_FW_ID_RLC_RESTORE_LIST_SRM_MEM = 25
AMDSMI_FW_ID_RLC_RESTORE_LIST_CNTL = 26
AMDSMI_FW_ID_RLC_V = 27
AMDSMI_FW_ID_MMSCH = 28
AMDSMI_FW_ID_PSP_SYSDRV = 29
AMDSMI_FW_ID_PSP_SOSDRV = 30
AMDSMI_FW_ID_PSP_TOC = 31
AMDSMI_FW_ID_PSP_KEYDB = 32
AMDSMI_FW_ID_DFC = 33
AMDSMI_FW_ID_PSP_SPL = 34
AMDSMI_FW_ID_DRV_CAP = 35
AMDSMI_FW_ID_MC = 36
AMDSMI_FW_ID_PSP_BL = 37
AMDSMI_FW_ID_CP_PM4 = 38
AMDSMI_FW_ID_RLC_P = 39
AMDSMI_FW_ID_SEC_POLICY_STAGE2 = 40
AMDSMI_FW_ID_REG_ACCESS_WHITELIST = 41
AMDSMI_FW_ID_IMU_DRAM = 42
AMDSMI_FW_ID_IMU_IRAM = 43
AMDSMI_FW_ID_SDMA_TH0 = 44
AMDSMI_FW_ID_SDMA_TH1 = 45
AMDSMI_FW_ID_CP_MES = 46
AMDSMI_FW_ID_MES_STACK = 47
AMDSMI_FW_ID_MES_THREAD1 = 48
AMDSMI_FW_ID_MES_THREAD1_STACK = 49
AMDSMI_FW_ID_RLX6 = 50
AMDSMI_FW_ID_RLX6_DRAM_BOOT = 51
AMDSMI_FW_ID_RS64_ME = 52
AMDSMI_FW_ID_RS64_ME_P0_DATA = 53
AMDSMI_FW_ID_RS64_ME_P1_DATA = 54
AMDSMI_FW_ID_RS64_PFP = 55
AMDSMI_FW_ID_RS64_PFP_P0_DATA = 56
AMDSMI_FW_ID_RS64_PFP_P1_DATA = 57
AMDSMI_FW_ID_RS64_MEC = 58
AMDSMI_FW_ID_RS64_MEC_P0_DATA = 59
AMDSMI_FW_ID_RS64_MEC_P1_DATA = 60
AMDSMI_FW_ID_RS64_MEC_P2_DATA = 61
AMDSMI_FW_ID_RS64_MEC_P3_DATA = 62
AMDSMI_FW_ID_PPTABLE = 63
AMDSMI_FW_ID_PSP_SOC = 64
AMDSMI_FW_ID_PSP_DBG = 65
AMDSMI_FW_ID_PSP_INTF = 66
AMDSMI_FW_ID_RLX6_CORE1 = 67
AMDSMI_FW_ID_RLX6_DRAM_BOOT_CORE1 = 68
AMDSMI_FW_ID_RLCV_LX7 = 69
AMDSMI_FW_ID_RLC_SAVE_RESTORE_LIST = 70
AMDSMI_FW_ID_ASD = 71
AMDSMI_FW_ID_TA_RAS = 72
AMDSMI_FW_ID_XGMI = 73
AMDSMI_FW_ID_RLC_SRLG = 74
AMDSMI_FW_ID_RLC_SRLS = 75
AMDSMI_FW_ID_SMC = 76
AMDSMI_FW_ID_DMCU = 77
AMDSMI_FW_ID_PSP_RAS = 78
AMDSMI_FW_ID_P2S_TABLE = 79
AMDSMI_FW_ID__MAX = 80
c__EA_amdsmi_fw_block_t = ctypes.c_uint32 # enum
amdsmi_fw_block_t = c__EA_amdsmi_fw_block_t
amdsmi_fw_block_t__enumvalues = c__EA_amdsmi_fw_block_t__enumvalues

# values for enumeration 'c__EA_amdsmi_mm_ip_t'
c__EA_amdsmi_mm_ip_t__enumvalues = {
    0: 'AMDSMI_MM_UVD',
    1: 'AMDSMI_MM_VCE',
    2: 'AMDSMI_MM_VCN',
    3: 'AMDSMI_MM__MAX',
}
AMDSMI_MM_UVD = 0
AMDSMI_MM_VCE = 1
AMDSMI_MM_VCN = 2
AMDSMI_MM__MAX = 3
c__EA_amdsmi_mm_ip_t = ctypes.c_uint32 # enum
amdsmi_mm_ip_t = c__EA_amdsmi_mm_ip_t
amdsmi_mm_ip_t__enumvalues = c__EA_amdsmi_mm_ip_t__enumvalues

# values for enumeration 'c__EA_amdsmi_clk_type_t'
c__EA_amdsmi_clk_type_t__enumvalues = {
    0: 'AMDSMI_CLK_TYPE_SYS',
    0: 'AMDSMI_CLK_TYPE_FIRST',
    0: 'AMDSMI_CLK_TYPE_GFX',
    1: 'AMDSMI_CLK_TYPE_DF',
    2: 'AMDSMI_CLK_TYPE_DCEF',
    3: 'AMDSMI_CLK_TYPE_SOC',
    4: 'AMDSMI_CLK_TYPE_MEM',
    5: 'AMDSMI_CLK_TYPE_PCIE',
    6: 'AMDSMI_CLK_TYPE_VCLK0',
    7: 'AMDSMI_CLK_TYPE_VCLK1',
    8: 'AMDSMI_CLK_TYPE_DCLK0',
    9: 'AMDSMI_CLK_TYPE_DCLK1',
    9: 'AMDSMI_CLK_TYPE__MAX',
}
AMDSMI_CLK_TYPE_SYS = 0
AMDSMI_CLK_TYPE_FIRST = 0
AMDSMI_CLK_TYPE_GFX = 0
AMDSMI_CLK_TYPE_DF = 1
AMDSMI_CLK_TYPE_DCEF = 2
AMDSMI_CLK_TYPE_SOC = 3
AMDSMI_CLK_TYPE_MEM = 4
AMDSMI_CLK_TYPE_PCIE = 5
AMDSMI_CLK_TYPE_VCLK0 = 6
AMDSMI_CLK_TYPE_VCLK1 = 7
AMDSMI_CLK_TYPE_DCLK0 = 8
AMDSMI_CLK_TYPE_DCLK1 = 9
AMDSMI_CLK_TYPE__MAX = 9
c__EA_amdsmi_clk_type_t = ctypes.c_uint32 # enum
amdsmi_clk_type_t = c__EA_amdsmi_clk_type_t
amdsmi_clk_type_t__enumvalues = c__EA_amdsmi_clk_type_t__enumvalues

# values for enumeration 'c__EA_amdsmi_temperature_type_t'
c__EA_amdsmi_temperature_type_t__enumvalues = {
    0: 'AMDSMI_TEMPERATURE_TYPE_EDGE',
    0: 'AMDSMI_TEMPERATURE_TYPE_FIRST',
    1: 'AMDSMI_TEMPERATURE_TYPE_HOTSPOT',
    1: 'AMDSMI_TEMPERATURE_TYPE_JUNCTION',
    2: 'AMDSMI_TEMPERATURE_TYPE_VRAM',
    3: 'AMDSMI_TEMPERATURE_TYPE_HBM_0',
    4: 'AMDSMI_TEMPERATURE_TYPE_HBM_1',
    5: 'AMDSMI_TEMPERATURE_TYPE_HBM_2',
    6: 'AMDSMI_TEMPERATURE_TYPE_HBM_3',
    7: 'AMDSMI_TEMPERATURE_TYPE_PLX',
    7: 'AMDSMI_TEMPERATURE_TYPE__MAX',
}
AMDSMI_TEMPERATURE_TYPE_EDGE = 0
AMDSMI_TEMPERATURE_TYPE_FIRST = 0
AMDSMI_TEMPERATURE_TYPE_HOTSPOT = 1
AMDSMI_TEMPERATURE_TYPE_JUNCTION = 1
AMDSMI_TEMPERATURE_TYPE_VRAM = 2
AMDSMI_TEMPERATURE_TYPE_HBM_0 = 3
AMDSMI_TEMPERATURE_TYPE_HBM_1 = 4
AMDSMI_TEMPERATURE_TYPE_HBM_2 = 5
AMDSMI_TEMPERATURE_TYPE_HBM_3 = 6
AMDSMI_TEMPERATURE_TYPE_PLX = 7
AMDSMI_TEMPERATURE_TYPE__MAX = 7
c__EA_amdsmi_temperature_type_t = ctypes.c_uint32 # enum
amdsmi_temperature_type_t = c__EA_amdsmi_temperature_type_t
amdsmi_temperature_type_t__enumvalues = c__EA_amdsmi_temperature_type_t__enumvalues

# values for enumeration 'c__EA_amdsmi_temperature_metric_t'
c__EA_amdsmi_temperature_metric_t__enumvalues = {
    0: 'AMDSMI_TEMP_CURRENT',
    0: 'AMDSMI_TEMP_FIRST',
    1: 'AMDSMI_TEMP_MAX',
    2: 'AMDSMI_TEMP_MIN',
    3: 'AMDSMI_TEMP_MAX_HYST',
    4: 'AMDSMI_TEMP_MIN_HYST',
    5: 'AMDSMI_TEMP_CRITICAL',
    6: 'AMDSMI_TEMP_CRITICAL_HYST',
    7: 'AMDSMI_TEMP_EMERGENCY',
    8: 'AMDSMI_TEMP_EMERGENCY_HYST',
    9: 'AMDSMI_TEMP_CRIT_MIN',
    10: 'AMDSMI_TEMP_CRIT_MIN_HYST',
    11: 'AMDSMI_TEMP_OFFSET',
    12: 'AMDSMI_TEMP_LOWEST',
    13: 'AMDSMI_TEMP_HIGHEST',
    14: 'AMDSMI_TEMP_SHUTDOWN',
    14: 'AMDSMI_TEMP_LAST',
}
AMDSMI_TEMP_CURRENT = 0
AMDSMI_TEMP_FIRST = 0
AMDSMI_TEMP_MAX = 1
AMDSMI_TEMP_MIN = 2
AMDSMI_TEMP_MAX_HYST = 3
AMDSMI_TEMP_MIN_HYST = 4
AMDSMI_TEMP_CRITICAL = 5
AMDSMI_TEMP_CRITICAL_HYST = 6
AMDSMI_TEMP_EMERGENCY = 7
AMDSMI_TEMP_EMERGENCY_HYST = 8
AMDSMI_TEMP_CRIT_MIN = 9
AMDSMI_TEMP_CRIT_MIN_HYST = 10
AMDSMI_TEMP_OFFSET = 11
AMDSMI_TEMP_LOWEST = 12
AMDSMI_TEMP_HIGHEST = 13
AMDSMI_TEMP_SHUTDOWN = 14
AMDSMI_TEMP_LAST = 14
c__EA_amdsmi_temperature_metric_t = ctypes.c_uint32 # enum
amdsmi_temperature_metric_t = c__EA_amdsmi_temperature_metric_t
amdsmi_temperature_metric_t__enumvalues = c__EA_amdsmi_temperature_metric_t__enumvalues

# values for enumeration 'c__EA_processor_type_t'
c__EA_processor_type_t__enumvalues = {
    0: 'AMDSMI_PROCESSOR_TYPE_UNKNOWN',
    1: 'AMDSMI_PROCESSOR_TYPE_AMD_GPU',
    2: 'AMDSMI_PROCESSOR_TYPE_AMD_CPU',
    3: 'AMDSMI_PROCESSOR_TYPE_NON_AMD_GPU',
    4: 'AMDSMI_PROCESSOR_TYPE_NON_AMD_CPU',
    5: 'AMDSMI_PROCESSOR_TYPE_AMD_CPU_CORE',
    6: 'AMDSMI_PROCESSOR_TYPE_AMD_APU',
}
AMDSMI_PROCESSOR_TYPE_UNKNOWN = 0
AMDSMI_PROCESSOR_TYPE_AMD_GPU = 1
AMDSMI_PROCESSOR_TYPE_AMD_CPU = 2
AMDSMI_PROCESSOR_TYPE_NON_AMD_GPU = 3
AMDSMI_PROCESSOR_TYPE_NON_AMD_CPU = 4
AMDSMI_PROCESSOR_TYPE_AMD_CPU_CORE = 5
AMDSMI_PROCESSOR_TYPE_AMD_APU = 6
c__EA_processor_type_t = ctypes.c_uint32 # enum
processor_type_t = c__EA_processor_type_t
processor_type_t__enumvalues = c__EA_processor_type_t__enumvalues

# values for enumeration 'c__EA_amdsmi_event_category_t'
c__EA_amdsmi_event_category_t__enumvalues = {
    0: 'AMDSMI_EVENT_CATEGORY_NON_USED',
    1: 'AMDSMI_EVENT_CATEGORY_DRIVER',
    2: 'AMDSMI_EVENT_CATEGORY_RESET',
    3: 'AMDSMI_EVENT_CATEGORY_SCHED',
    4: 'AMDSMI_EVENT_CATEGORY_VBIOS',
    5: 'AMDSMI_EVENT_CATEGORY_ECC',
    6: 'AMDSMI_EVENT_CATEGORY_PP',
    7: 'AMDSMI_EVENT_CATEGORY_IOV',
    8: 'AMDSMI_EVENT_CATEGORY_VF',
    9: 'AMDSMI_EVENT_CATEGORY_FW',
    10: 'AMDSMI_EVENT_CATEGORY_GPU',
    11: 'AMDSMI_EVENT_CATEGORY_GUARD',
    12: 'AMDSMI_EVENT_CATEGORY_GPUMON',
    13: 'AMDSMI_EVENT_CATEGORY_MMSCH',
    14: 'AMDSMI_EVENT_CATEGORY_XGMI',
    15: 'AMDSMI_EVENT_CATEGORY__MAX',
}
AMDSMI_EVENT_CATEGORY_NON_USED = 0
AMDSMI_EVENT_CATEGORY_DRIVER = 1
AMDSMI_EVENT_CATEGORY_RESET = 2
AMDSMI_EVENT_CATEGORY_SCHED = 3
AMDSMI_EVENT_CATEGORY_VBIOS = 4
AMDSMI_EVENT_CATEGORY_ECC = 5
AMDSMI_EVENT_CATEGORY_PP = 6
AMDSMI_EVENT_CATEGORY_IOV = 7
AMDSMI_EVENT_CATEGORY_VF = 8
AMDSMI_EVENT_CATEGORY_FW = 9
AMDSMI_EVENT_CATEGORY_GPU = 10
AMDSMI_EVENT_CATEGORY_GUARD = 11
AMDSMI_EVENT_CATEGORY_GPUMON = 12
AMDSMI_EVENT_CATEGORY_MMSCH = 13
AMDSMI_EVENT_CATEGORY_XGMI = 14
AMDSMI_EVENT_CATEGORY__MAX = 15
c__EA_amdsmi_event_category_t = ctypes.c_uint32 # enum
amdsmi_event_category_t = c__EA_amdsmi_event_category_t
amdsmi_event_category_t__enumvalues = c__EA_amdsmi_event_category_t__enumvalues

# values for enumeration 'c__EA_amdsmi_event_gpu_t'
c__EA_amdsmi_event_gpu_t__enumvalues = {
    0: 'AMDSMI_EVENT_GPU_DEVICE_LOST',
    1: 'AMDSMI_EVENT_GPU_NOT_SUPPORTED',
    2: 'AMDSMI_EVENT_GPU_RMA',
    3: 'AMDSMI_EVENT_GPU_NOT_INITIALIZED',
    4: 'AMDSMI_EVENT_GPU_MMSCH_ABNORMAL_STATE',
    5: 'AMDSMI_EVENT_GPU_RLCV_ABNORMAL_STATE',
    6: 'AMDSMI_EVENT_GPU_SDMA_ENGINE_BUSY',
    7: 'AMDSMI_EVENT_GPU_RLC_ENGINE_BUSY',
    8: 'AMDSMI_EVENT_GPU_GC_ENGINE_BUSY',
    9: 'AMDSMI_EVENT_GPU__MAX',
}
AMDSMI_EVENT_GPU_DEVICE_LOST = 0
AMDSMI_EVENT_GPU_NOT_SUPPORTED = 1
AMDSMI_EVENT_GPU_RMA = 2
AMDSMI_EVENT_GPU_NOT_INITIALIZED = 3
AMDSMI_EVENT_GPU_MMSCH_ABNORMAL_STATE = 4
AMDSMI_EVENT_GPU_RLCV_ABNORMAL_STATE = 5
AMDSMI_EVENT_GPU_SDMA_ENGINE_BUSY = 6
AMDSMI_EVENT_GPU_RLC_ENGINE_BUSY = 7
AMDSMI_EVENT_GPU_GC_ENGINE_BUSY = 8
AMDSMI_EVENT_GPU__MAX = 9
c__EA_amdsmi_event_gpu_t = ctypes.c_uint32 # enum
amdsmi_event_gpu_t = c__EA_amdsmi_event_gpu_t
amdsmi_event_gpu_t__enumvalues = c__EA_amdsmi_event_gpu_t__enumvalues

# values for enumeration 'c__EA_amdsmi_event_driver_t'
c__EA_amdsmi_event_driver_t__enumvalues = {
    0: 'AMDSMI_EVENT_DRIVER_SPIN_LOCK_BUSY',
    1: 'AMDSMI_EVENT_DRIVER_ALLOC_SYSTEM_MEM_FAIL',
    2: 'AMDSMI_EVENT_DRIVER_CREATE_GFX_WORKQUEUE_FAIL',
    3: 'AMDSMI_EVENT_DRIVER_CREATE_MM_WORKQUEUE_FAIL',
    4: 'AMDSMI_EVENT_DRIVER_BUFFER_OVERFLOW',
    5: 'AMDSMI_EVENT_DRIVER_DEV_INIT_FAIL',
    6: 'AMDSMI_EVENT_DRIVER_CREATE_THREAD_FAIL',
    7: 'AMDSMI_EVENT_DRIVER_NO_ACCESS_PCI_REGION',
    8: 'AMDSMI_EVENT_DRIVER_MMIO_FAIL',
    9: 'AMDSMI_EVENT_DRIVER_INTERRUPT_INIT_FAIL',
    10: 'AMDSMI_EVENT_DRIVER_INVALID_VALUE',
    11: 'AMDSMI_EVENT_DRIVER_CREATE_MUTEX_FAIL',
    12: 'AMDSMI_EVENT_DRIVER_CREATE_TIMER_FAIL',
    13: 'AMDSMI_EVENT_DRIVER_CREATE_EVENT_FAIL',
    14: 'AMDSMI_EVENT_DRIVER_CREATE_SPIN_LOCK_FAIL',
    15: 'AMDSMI_EVENT_DRIVER_ALLOC_FB_MEM_FAIL',
    16: 'AMDSMI_EVENT_DRIVER_ALLOC_DMA_MEM_FAIL',
    17: 'AMDSMI_EVENT_DRIVER_NO_FB_MANAGER',
    18: 'AMDSMI_EVENT_DRIVER_HW_INIT_FAIL',
    19: 'AMDSMI_EVENT_DRIVER_SW_INIT_FAIL',
    20: 'AMDSMI_EVENT_DRIVER_INIT_CONFIG_ERROR',
    21: 'AMDSMI_EVENT_DRIVER_ERROR_LOGGING_FAILED',
    22: 'AMDSMI_EVENT_DRIVER_CREATE_RWLOCK_FAIL',
    23: 'AMDSMI_EVENT_DRIVER_CREATE_RWSEMA_FAIL',
    24: 'AMDSMI_EVENT_DRIVER_GET_READ_LOCK_FAIL',
    25: 'AMDSMI_EVENT_DRIVER_GET_WRITE_LOCK_FAIL',
    26: 'AMDSMI_EVENT_DRIVER_GET_READ_SEMA_FAIL',
    27: 'AMDSMI_EVENT_DRIVER_GET_WRITE_SEMA_FAIL',
    28: 'AMDSMI_EVENT_DRIVER_DIAG_DATA_INIT_FAIL',
    29: 'AMDSMI_EVENT_DRIVER_DIAG_DATA_MEM_REQ_FAIL',
    30: 'AMDSMI_EVENT_DRIVER_DIAG_DATA_VADDR_REQ_FAIL',
    31: 'AMDSMI_EVENT_DRIVER_DIAG_DATA_BUS_ADDR_REQ_FAIL',
    32: 'AMDSMI_EVENT_DRIVER_HRTIMER_START_FAIL',
    33: 'AMDSMI_EVENT_DRIVER_CREATE_DRIVER_FILE_FAIL',
    34: 'AMDSMI_EVENT_DRIVER_CREATE_DEVICE_FILE_FAIL',
    35: 'AMDSMI_EVENT_DRIVER_CREATE_DEBUGFS_FILE_FAIL',
    36: 'AMDSMI_EVENT_DRIVER_CREATE_DEBUGFS_DIR_FAIL',
    37: 'AMDSMI_EVENT_DRIVER_PCI_ENABLE_DEVICE_FAIL',
    38: 'AMDSMI_EVENT_DRIVER_FB_MAP_FAIL',
    39: 'AMDSMI_EVENT_DRIVER_DOORBELL_MAP_FAIL',
    40: 'AMDSMI_EVENT_DRIVER_PCI_REGISTER_DRIVER_FAIL',
    41: 'AMDSMI_EVENT_DRIVER_ALLOC_IOVA_ALIGN_FAIL',
    42: 'AMDSMI_EVENT_DRIVER_ROM_MAP_FAIL',
    43: 'AMDSMI_EVENT_DRIVER_FULL_ACCESS_TIMEOUT',
    44: 'AMDSMI_EVENT_DRIVER__MAX',
}
AMDSMI_EVENT_DRIVER_SPIN_LOCK_BUSY = 0
AMDSMI_EVENT_DRIVER_ALLOC_SYSTEM_MEM_FAIL = 1
AMDSMI_EVENT_DRIVER_CREATE_GFX_WORKQUEUE_FAIL = 2
AMDSMI_EVENT_DRIVER_CREATE_MM_WORKQUEUE_FAIL = 3
AMDSMI_EVENT_DRIVER_BUFFER_OVERFLOW = 4
AMDSMI_EVENT_DRIVER_DEV_INIT_FAIL = 5
AMDSMI_EVENT_DRIVER_CREATE_THREAD_FAIL = 6
AMDSMI_EVENT_DRIVER_NO_ACCESS_PCI_REGION = 7
AMDSMI_EVENT_DRIVER_MMIO_FAIL = 8
AMDSMI_EVENT_DRIVER_INTERRUPT_INIT_FAIL = 9
AMDSMI_EVENT_DRIVER_INVALID_VALUE = 10
AMDSMI_EVENT_DRIVER_CREATE_MUTEX_FAIL = 11
AMDSMI_EVENT_DRIVER_CREATE_TIMER_FAIL = 12
AMDSMI_EVENT_DRIVER_CREATE_EVENT_FAIL = 13
AMDSMI_EVENT_DRIVER_CREATE_SPIN_LOCK_FAIL = 14
AMDSMI_EVENT_DRIVER_ALLOC_FB_MEM_FAIL = 15
AMDSMI_EVENT_DRIVER_ALLOC_DMA_MEM_FAIL = 16
AMDSMI_EVENT_DRIVER_NO_FB_MANAGER = 17
AMDSMI_EVENT_DRIVER_HW_INIT_FAIL = 18
AMDSMI_EVENT_DRIVER_SW_INIT_FAIL = 19
AMDSMI_EVENT_DRIVER_INIT_CONFIG_ERROR = 20
AMDSMI_EVENT_DRIVER_ERROR_LOGGING_FAILED = 21
AMDSMI_EVENT_DRIVER_CREATE_RWLOCK_FAIL = 22
AMDSMI_EVENT_DRIVER_CREATE_RWSEMA_FAIL = 23
AMDSMI_EVENT_DRIVER_GET_READ_LOCK_FAIL = 24
AMDSMI_EVENT_DRIVER_GET_WRITE_LOCK_FAIL = 25
AMDSMI_EVENT_DRIVER_GET_READ_SEMA_FAIL = 26
AMDSMI_EVENT_DRIVER_GET_WRITE_SEMA_FAIL = 27
AMDSMI_EVENT_DRIVER_DIAG_DATA_INIT_FAIL = 28
AMDSMI_EVENT_DRIVER_DIAG_DATA_MEM_REQ_FAIL = 29
AMDSMI_EVENT_DRIVER_DIAG_DATA_VADDR_REQ_FAIL = 30
AMDSMI_EVENT_DRIVER_DIAG_DATA_BUS_ADDR_REQ_FAIL = 31
AMDSMI_EVENT_DRIVER_HRTIMER_START_FAIL = 32
AMDSMI_EVENT_DRIVER_CREATE_DRIVER_FILE_FAIL = 33
AMDSMI_EVENT_DRIVER_CREATE_DEVICE_FILE_FAIL = 34
AMDSMI_EVENT_DRIVER_CREATE_DEBUGFS_FILE_FAIL = 35
AMDSMI_EVENT_DRIVER_CREATE_DEBUGFS_DIR_FAIL = 36
AMDSMI_EVENT_DRIVER_PCI_ENABLE_DEVICE_FAIL = 37
AMDSMI_EVENT_DRIVER_FB_MAP_FAIL = 38
AMDSMI_EVENT_DRIVER_DOORBELL_MAP_FAIL = 39
AMDSMI_EVENT_DRIVER_PCI_REGISTER_DRIVER_FAIL = 40
AMDSMI_EVENT_DRIVER_ALLOC_IOVA_ALIGN_FAIL = 41
AMDSMI_EVENT_DRIVER_ROM_MAP_FAIL = 42
AMDSMI_EVENT_DRIVER_FULL_ACCESS_TIMEOUT = 43
AMDSMI_EVENT_DRIVER__MAX = 44
c__EA_amdsmi_event_driver_t = ctypes.c_uint32 # enum
amdsmi_event_driver_t = c__EA_amdsmi_event_driver_t
amdsmi_event_driver_t__enumvalues = c__EA_amdsmi_event_driver_t__enumvalues

# values for enumeration 'c__EA_amdsmi_event_fw_t'
c__EA_amdsmi_event_fw_t__enumvalues = {
    0: 'AMDSMI_EVENT_FW_CMD_ALLOC_BUF_FAIL',
    1: 'AMDSMI_EVENT_FW_CMD_BUF_PREP_FAIL',
    2: 'AMDSMI_EVENT_FW_RING_INIT_FAIL',
    3: 'AMDSMI_EVENT_FW_FW_APPLY_SECURITY_POLICY_FAIL',
    4: 'AMDSMI_EVENT_FW_START_RING_FAIL',
    5: 'AMDSMI_EVENT_FW_FW_LOAD_FAIL',
    6: 'AMDSMI_EVENT_FW_EXIT_FAIL',
    7: 'AMDSMI_EVENT_FW_INIT_FAIL',
    8: 'AMDSMI_EVENT_FW_CMD_SUBMIT_FAIL',
    9: 'AMDSMI_EVENT_FW_CMD_FENCE_WAIT_FAIL',
    10: 'AMDSMI_EVENT_FW_TMR_LOAD_FAIL',
    11: 'AMDSMI_EVENT_FW_TOC_LOAD_FAIL',
    12: 'AMDSMI_EVENT_FW_RAS_LOAD_FAIL',
    13: 'AMDSMI_EVENT_FW_RAS_UNLOAD_FAIL',
    14: 'AMDSMI_EVENT_FW_RAS_TA_INVOKE_FAIL',
    15: 'AMDSMI_EVENT_FW_RAS_TA_ERR_INJECT_FAIL',
    16: 'AMDSMI_EVENT_FW_ASD_LOAD_FAIL',
    17: 'AMDSMI_EVENT_FW_ASD_UNLOAD_FAIL',
    18: 'AMDSMI_EVENT_FW_AUTOLOAD_FAIL',
    19: 'AMDSMI_EVENT_FW_VFGATE_FAIL',
    20: 'AMDSMI_EVENT_FW_XGMI_LOAD_FAIL',
    21: 'AMDSMI_EVENT_FW_XGMI_UNLOAD_FAIL',
    22: 'AMDSMI_EVENT_FW_XGMI_TA_INVOKE_FAIL',
    23: 'AMDSMI_EVENT_FW_TMR_INIT_FAIL',
    24: 'AMDSMI_EVENT_FW_NOT_SUPPORTED_FEATURE',
    25: 'AMDSMI_EVENT_FW_GET_PSP_TRACELOG_FAIL',
    26: 'AMDSMI_EVENT_FW_SET_SNAPSHOT_ADDR_FAIL',
    27: 'AMDSMI_EVENT_FW_SNAPSHOT_TRIGGER_FAIL',
    28: 'AMDSMI_EVENT_FW_MIGRATION_GET_PSP_INFO_FAIL',
    29: 'AMDSMI_EVENT_FW_MIGRATION_EXPORT_FAIL',
    30: 'AMDSMI_EVENT_FW_MIGRATION_IMPORT_FAIL',
    31: 'AMDSMI_EVENT_FW_BL_FAIL',
    32: 'AMDSMI_EVENT_FW_RAS_BOOT_FAIL',
    33: 'AMDSMI_EVENT_FW_MAILBOX_ERROR',
    34: 'AMDSMI_EVENT_FW__MAX',
}
AMDSMI_EVENT_FW_CMD_ALLOC_BUF_FAIL = 0
AMDSMI_EVENT_FW_CMD_BUF_PREP_FAIL = 1
AMDSMI_EVENT_FW_RING_INIT_FAIL = 2
AMDSMI_EVENT_FW_FW_APPLY_SECURITY_POLICY_FAIL = 3
AMDSMI_EVENT_FW_START_RING_FAIL = 4
AMDSMI_EVENT_FW_FW_LOAD_FAIL = 5
AMDSMI_EVENT_FW_EXIT_FAIL = 6
AMDSMI_EVENT_FW_INIT_FAIL = 7
AMDSMI_EVENT_FW_CMD_SUBMIT_FAIL = 8
AMDSMI_EVENT_FW_CMD_FENCE_WAIT_FAIL = 9
AMDSMI_EVENT_FW_TMR_LOAD_FAIL = 10
AMDSMI_EVENT_FW_TOC_LOAD_FAIL = 11
AMDSMI_EVENT_FW_RAS_LOAD_FAIL = 12
AMDSMI_EVENT_FW_RAS_UNLOAD_FAIL = 13
AMDSMI_EVENT_FW_RAS_TA_INVOKE_FAIL = 14
AMDSMI_EVENT_FW_RAS_TA_ERR_INJECT_FAIL = 15
AMDSMI_EVENT_FW_ASD_LOAD_FAIL = 16
AMDSMI_EVENT_FW_ASD_UNLOAD_FAIL = 17
AMDSMI_EVENT_FW_AUTOLOAD_FAIL = 18
AMDSMI_EVENT_FW_VFGATE_FAIL = 19
AMDSMI_EVENT_FW_XGMI_LOAD_FAIL = 20
AMDSMI_EVENT_FW_XGMI_UNLOAD_FAIL = 21
AMDSMI_EVENT_FW_XGMI_TA_INVOKE_FAIL = 22
AMDSMI_EVENT_FW_TMR_INIT_FAIL = 23
AMDSMI_EVENT_FW_NOT_SUPPORTED_FEATURE = 24
AMDSMI_EVENT_FW_GET_PSP_TRACELOG_FAIL = 25
AMDSMI_EVENT_FW_SET_SNAPSHOT_ADDR_FAIL = 26
AMDSMI_EVENT_FW_SNAPSHOT_TRIGGER_FAIL = 27
AMDSMI_EVENT_FW_MIGRATION_GET_PSP_INFO_FAIL = 28
AMDSMI_EVENT_FW_MIGRATION_EXPORT_FAIL = 29
AMDSMI_EVENT_FW_MIGRATION_IMPORT_FAIL = 30
AMDSMI_EVENT_FW_BL_FAIL = 31
AMDSMI_EVENT_FW_RAS_BOOT_FAIL = 32
AMDSMI_EVENT_FW_MAILBOX_ERROR = 33
AMDSMI_EVENT_FW__MAX = 34
c__EA_amdsmi_event_fw_t = ctypes.c_uint32 # enum
amdsmi_event_fw_t = c__EA_amdsmi_event_fw_t
amdsmi_event_fw_t__enumvalues = c__EA_amdsmi_event_fw_t__enumvalues

# values for enumeration 'c__EA_amdsmi_event_reset_t'
c__EA_amdsmi_event_reset_t__enumvalues = {
    0: 'AMDSMI_EVENT_RESET_GPU',
    1: 'AMDSMI_EVENT_RESET_GPU_FAILED',
    2: 'AMDSMI_EVENT_RESET_FLR',
    3: 'AMDSMI_EVENT_RESET_FLR_FAILED',
    4: 'AMDSMI_EVENT_RESET__MAX',
}
AMDSMI_EVENT_RESET_GPU = 0
AMDSMI_EVENT_RESET_GPU_FAILED = 1
AMDSMI_EVENT_RESET_FLR = 2
AMDSMI_EVENT_RESET_FLR_FAILED = 3
AMDSMI_EVENT_RESET__MAX = 4
c__EA_amdsmi_event_reset_t = ctypes.c_uint32 # enum
amdsmi_event_reset_t = c__EA_amdsmi_event_reset_t
amdsmi_event_reset_t__enumvalues = c__EA_amdsmi_event_reset_t__enumvalues

# values for enumeration 'c__EA_amdsmi_event_iov_t'
c__EA_amdsmi_event_iov_t__enumvalues = {
    0: 'AMDSMI_EVENT_IOV_NO_GPU_IOV_CAP',
    1: 'AMDSMI_EVENT_IOV_ASIC_NO_SRIOV_SUPPORT',
    2: 'AMDSMI_EVENT_IOV_ENABLE_SRIOV_FAIL',
    3: 'AMDSMI_EVENT_IOV_CMD_TIMEOUT',
    4: 'AMDSMI_EVENT_IOV_CMD_ERROR',
    5: 'AMDSMI_EVENT_IOV_INIT_IV_RING_FAIL',
    6: 'AMDSMI_EVENT_IOV_SRIOV_STRIDE_ERROR',
    7: 'AMDSMI_EVENT_IOV_WS_SAVE_TIMEOUT',
    8: 'AMDSMI_EVENT_IOV_WS_IDLE_TIMEOUT',
    9: 'AMDSMI_EVENT_IOV_WS_RUN_TIMEOUT',
    10: 'AMDSMI_EVENT_IOV_WS_LOAD_TIMEOUT',
    11: 'AMDSMI_EVENT_IOV_WS_SHUTDOWN_TIMEOUT',
    12: 'AMDSMI_EVENT_IOV_WS_ALREADY_SHUTDOWN',
    13: 'AMDSMI_EVENT_IOV_WS_INFINITE_LOOP',
    14: 'AMDSMI_EVENT_IOV_WS_REENTRANT_ERROR',
    15: 'AMDSMI_EVENT_IOV__MAX',
}
AMDSMI_EVENT_IOV_NO_GPU_IOV_CAP = 0
AMDSMI_EVENT_IOV_ASIC_NO_SRIOV_SUPPORT = 1
AMDSMI_EVENT_IOV_ENABLE_SRIOV_FAIL = 2
AMDSMI_EVENT_IOV_CMD_TIMEOUT = 3
AMDSMI_EVENT_IOV_CMD_ERROR = 4
AMDSMI_EVENT_IOV_INIT_IV_RING_FAIL = 5
AMDSMI_EVENT_IOV_SRIOV_STRIDE_ERROR = 6
AMDSMI_EVENT_IOV_WS_SAVE_TIMEOUT = 7
AMDSMI_EVENT_IOV_WS_IDLE_TIMEOUT = 8
AMDSMI_EVENT_IOV_WS_RUN_TIMEOUT = 9
AMDSMI_EVENT_IOV_WS_LOAD_TIMEOUT = 10
AMDSMI_EVENT_IOV_WS_SHUTDOWN_TIMEOUT = 11
AMDSMI_EVENT_IOV_WS_ALREADY_SHUTDOWN = 12
AMDSMI_EVENT_IOV_WS_INFINITE_LOOP = 13
AMDSMI_EVENT_IOV_WS_REENTRANT_ERROR = 14
AMDSMI_EVENT_IOV__MAX = 15
c__EA_amdsmi_event_iov_t = ctypes.c_uint32 # enum
amdsmi_event_iov_t = c__EA_amdsmi_event_iov_t
amdsmi_event_iov_t__enumvalues = c__EA_amdsmi_event_iov_t__enumvalues

# values for enumeration 'c__EA_amdsmi_event_ecc_t'
c__EA_amdsmi_event_ecc_t__enumvalues = {
    0: 'AMDSMI_EVENT_ECC_UCE',
    1: 'AMDSMI_EVENT_ECC_CE',
    2: 'AMDSMI_EVENT_ECC_IN_PF_FB',
    3: 'AMDSMI_EVENT_ECC_IN_CRI_REG',
    4: 'AMDSMI_EVENT_ECC_IN_VF_CRI',
    5: 'AMDSMI_EVENT_ECC_REACH_THD',
    6: 'AMDSMI_EVENT_ECC_VF_CE',
    7: 'AMDSMI_EVENT_ECC_VF_UE',
    8: 'AMDSMI_EVENT_ECC_IN_SAME_ROW',
    9: 'AMDSMI_EVENT_ECC_UMC_UE',
    10: 'AMDSMI_EVENT_ECC_GFX_CE',
    11: 'AMDSMI_EVENT_ECC_GFX_UE',
    12: 'AMDSMI_EVENT_ECC_SDMA_CE',
    13: 'AMDSMI_EVENT_ECC_SDMA_UE',
    14: 'AMDSMI_EVENT_ECC_GFX_CE_TOTAL',
    15: 'AMDSMI_EVENT_ECC_GFX_UE_TOTAL',
    16: 'AMDSMI_EVENT_ECC_SDMA_CE_TOTAL',
    17: 'AMDSMI_EVENT_ECC_SDMA_UE_TOTAL',
    18: 'AMDSMI_EVENT_ECC_UMC_CE_TOTAL',
    19: 'AMDSMI_EVENT_ECC_UMC_UE_TOTAL',
    20: 'AMDSMI_EVENT_ECC_MMHUB_CE',
    21: 'AMDSMI_EVENT_ECC_MMHUB_UE',
    22: 'AMDSMI_EVENT_ECC_MMHUB_CE_TOTAL',
    23: 'AMDSMI_EVENT_ECC_MMHUB_UE_TOTAL',
    24: 'AMDSMI_EVENT_ECC_XGMI_WAFL_CE',
    25: 'AMDSMI_EVENT_ECC_XGMI_WAFL_UE',
    26: 'AMDSMI_EVENT_ECC_XGMI_WAFL_CE_TOTAL',
    27: 'AMDSMI_EVENT_ECC_XGMI_WAFL_UE_TOTAL',
    28: 'AMDSMI_EVENT_ECC_FATAL_ERROR',
    29: 'AMDSMI_EVENT_ECC_POISON_CONSUMPTION',
    30: 'AMDSMI_EVENT_ECC_ACA_DUMP',
    31: 'AMDSMI_EVENT_ECC_WRONG_SOCKET_ID',
    32: 'AMDSMI_EVENT_ECC_ACA_UNKNOWN_BLOCK_INSTANCE',
    33: 'AMDSMI_EVENT_ECC_UNKNOWN_CHIPLET_CE',
    34: 'AMDSMI_EVENT_ECC_UNKNOWN_CHIPLET_UE',
    35: 'AMDSMI_EVENT_ECC_UMC_CHIPLET_CE',
    36: 'AMDSMI_EVENT_ECC_UMC_CHIPLET_UE',
    37: 'AMDSMI_EVENT_ECC_GFX_CHIPLET_CE',
    38: 'AMDSMI_EVENT_ECC_GFX_CHIPLET_UE',
    39: 'AMDSMI_EVENT_ECC_SDMA_CHIPLET_CE',
    40: 'AMDSMI_EVENT_ECC_SDMA_CHIPLET_UE',
    41: 'AMDSMI_EVENT_ECC_MMHUB_CHIPLET_CE',
    42: 'AMDSMI_EVENT_ECC_MMHUB_CHIPLET_UE',
    43: 'AMDSMI_EVENT_ECC_XGMI_WAFL_CHIPLET_CE',
    44: 'AMDSMI_EVENT_ECC_XGMI_WAFL_CHIPLET_UE',
    45: 'AMDSMI_EVENT_ECC_EEPROM_ENTRIES_FOUND',
    46: 'AMDSMI_EVENT_ECC_UMC_DE',
    47: 'AMDSMI_EVENT_ECC_UMC_DE_TOTAL',
    48: 'AMDSMI_EVENT_ECC_UNKNOWN',
    49: 'AMDSMI_EVENT_ECC_EEPROM_REACH_THD',
    50: 'AMDSMI_EVENT_ECC_UMC_CHIPLET_DE',
    51: 'AMDSMI_EVENT_ECC_UNKNOWN_CHIPLET_DE',
    52: 'AMDSMI_EVENT_ECC_EEPROM_CHK_MISMATCH',
    53: 'AMDSMI_EVENT_ECC_EEPROM_RESET',
    54: 'AMDSMI_EVENT_ECC_EEPROM_RESET_FAILED',
    55: 'AMDSMI_EVENT_ECC_EEPROM_APPEND',
    56: 'AMDSMI_EVENT_ECC_THD_CHANGED',
    57: 'AMDSMI_EVENT_ECC_DUP_ENTRIES',
    58: 'AMDSMI_EVENT_ECC_EEPROM_WRONG_HDR',
    59: 'AMDSMI_EVENT_ECC_EEPROM_WRONG_VER',
    60: 'AMDSMI_EVENT_ECC__MAX',
}
AMDSMI_EVENT_ECC_UCE = 0
AMDSMI_EVENT_ECC_CE = 1
AMDSMI_EVENT_ECC_IN_PF_FB = 2
AMDSMI_EVENT_ECC_IN_CRI_REG = 3
AMDSMI_EVENT_ECC_IN_VF_CRI = 4
AMDSMI_EVENT_ECC_REACH_THD = 5
AMDSMI_EVENT_ECC_VF_CE = 6
AMDSMI_EVENT_ECC_VF_UE = 7
AMDSMI_EVENT_ECC_IN_SAME_ROW = 8
AMDSMI_EVENT_ECC_UMC_UE = 9
AMDSMI_EVENT_ECC_GFX_CE = 10
AMDSMI_EVENT_ECC_GFX_UE = 11
AMDSMI_EVENT_ECC_SDMA_CE = 12
AMDSMI_EVENT_ECC_SDMA_UE = 13
AMDSMI_EVENT_ECC_GFX_CE_TOTAL = 14
AMDSMI_EVENT_ECC_GFX_UE_TOTAL = 15
AMDSMI_EVENT_ECC_SDMA_CE_TOTAL = 16
AMDSMI_EVENT_ECC_SDMA_UE_TOTAL = 17
AMDSMI_EVENT_ECC_UMC_CE_TOTAL = 18
AMDSMI_EVENT_ECC_UMC_UE_TOTAL = 19
AMDSMI_EVENT_ECC_MMHUB_CE = 20
AMDSMI_EVENT_ECC_MMHUB_UE = 21
AMDSMI_EVENT_ECC_MMHUB_CE_TOTAL = 22
AMDSMI_EVENT_ECC_MMHUB_UE_TOTAL = 23
AMDSMI_EVENT_ECC_XGMI_WAFL_CE = 24
AMDSMI_EVENT_ECC_XGMI_WAFL_UE = 25
AMDSMI_EVENT_ECC_XGMI_WAFL_CE_TOTAL = 26
AMDSMI_EVENT_ECC_XGMI_WAFL_UE_TOTAL = 27
AMDSMI_EVENT_ECC_FATAL_ERROR = 28
AMDSMI_EVENT_ECC_POISON_CONSUMPTION = 29
AMDSMI_EVENT_ECC_ACA_DUMP = 30
AMDSMI_EVENT_ECC_WRONG_SOCKET_ID = 31
AMDSMI_EVENT_ECC_ACA_UNKNOWN_BLOCK_INSTANCE = 32
AMDSMI_EVENT_ECC_UNKNOWN_CHIPLET_CE = 33
AMDSMI_EVENT_ECC_UNKNOWN_CHIPLET_UE = 34
AMDSMI_EVENT_ECC_UMC_CHIPLET_CE = 35
AMDSMI_EVENT_ECC_UMC_CHIPLET_UE = 36
AMDSMI_EVENT_ECC_GFX_CHIPLET_CE = 37
AMDSMI_EVENT_ECC_GFX_CHIPLET_UE = 38
AMDSMI_EVENT_ECC_SDMA_CHIPLET_CE = 39
AMDSMI_EVENT_ECC_SDMA_CHIPLET_UE = 40
AMDSMI_EVENT_ECC_MMHUB_CHIPLET_CE = 41
AMDSMI_EVENT_ECC_MMHUB_CHIPLET_UE = 42
AMDSMI_EVENT_ECC_XGMI_WAFL_CHIPLET_CE = 43
AMDSMI_EVENT_ECC_XGMI_WAFL_CHIPLET_UE = 44
AMDSMI_EVENT_ECC_EEPROM_ENTRIES_FOUND = 45
AMDSMI_EVENT_ECC_UMC_DE = 46
AMDSMI_EVENT_ECC_UMC_DE_TOTAL = 47
AMDSMI_EVENT_ECC_UNKNOWN = 48
AMDSMI_EVENT_ECC_EEPROM_REACH_THD = 49
AMDSMI_EVENT_ECC_UMC_CHIPLET_DE = 50
AMDSMI_EVENT_ECC_UNKNOWN_CHIPLET_DE = 51
AMDSMI_EVENT_ECC_EEPROM_CHK_MISMATCH = 52
AMDSMI_EVENT_ECC_EEPROM_RESET = 53
AMDSMI_EVENT_ECC_EEPROM_RESET_FAILED = 54
AMDSMI_EVENT_ECC_EEPROM_APPEND = 55
AMDSMI_EVENT_ECC_THD_CHANGED = 56
AMDSMI_EVENT_ECC_DUP_ENTRIES = 57
AMDSMI_EVENT_ECC_EEPROM_WRONG_HDR = 58
AMDSMI_EVENT_ECC_EEPROM_WRONG_VER = 59
AMDSMI_EVENT_ECC__MAX = 60
c__EA_amdsmi_event_ecc_t = ctypes.c_uint32 # enum
amdsmi_event_ecc_t = c__EA_amdsmi_event_ecc_t
amdsmi_event_ecc_t__enumvalues = c__EA_amdsmi_event_ecc_t__enumvalues

# values for enumeration 'c__EA_amdsmi_event_pp_t'
c__EA_amdsmi_event_pp_t__enumvalues = {
    0: 'AMDSMI_EVENT_PP_SET_DPM_POLICY_FAIL',
    1: 'AMDSMI_EVENT_PP_ACTIVATE_DPM_POLICY_FAIL',
    2: 'AMDSMI_EVENT_PP_I2C_SLAVE_NOT_PRESENT',
    3: 'AMDSMI_EVENT_PP_THROTTLER_EVENT',
    4: 'AMDSMI_EVENT_PP__MAX',
}
AMDSMI_EVENT_PP_SET_DPM_POLICY_FAIL = 0
AMDSMI_EVENT_PP_ACTIVATE_DPM_POLICY_FAIL = 1
AMDSMI_EVENT_PP_I2C_SLAVE_NOT_PRESENT = 2
AMDSMI_EVENT_PP_THROTTLER_EVENT = 3
AMDSMI_EVENT_PP__MAX = 4
c__EA_amdsmi_event_pp_t = ctypes.c_uint32 # enum
amdsmi_event_pp_t = c__EA_amdsmi_event_pp_t
amdsmi_event_pp_t__enumvalues = c__EA_amdsmi_event_pp_t__enumvalues

# values for enumeration 'c__EA_amdsmi_event_sched_t'
c__EA_amdsmi_event_sched_t__enumvalues = {
    0: 'AMDSMI_EVENT_SCHED_WORLD_SWITCH_FAIL',
    1: 'AMDSMI_EVENT_SCHED_DISABLE_AUTO_HW_SWITCH_FAIL',
    2: 'AMDSMI_EVENT_SCHED_ENABLE_AUTO_HW_SWITCH_FAIL',
    3: 'AMDSMI_EVENT_SCHED_GFX_SAVE_REG_FAIL',
    4: 'AMDSMI_EVENT_SCHED_GFX_IDLE_REG_FAIL',
    5: 'AMDSMI_EVENT_SCHED_GFX_RUN_REG_FAIL',
    6: 'AMDSMI_EVENT_SCHED_GFX_LOAD_REG_FAIL',
    7: 'AMDSMI_EVENT_SCHED_GFX_INIT_REG_FAIL',
    8: 'AMDSMI_EVENT_SCHED_MM_SAVE_REG_FAIL',
    9: 'AMDSMI_EVENT_SCHED_MM_IDLE_REG_FAIL',
    10: 'AMDSMI_EVENT_SCHED_MM_RUN_REG_FAIL',
    11: 'AMDSMI_EVENT_SCHED_MM_LOAD_REG_FAIL',
    12: 'AMDSMI_EVENT_SCHED_MM_INIT_REG_FAIL',
    13: 'AMDSMI_EVENT_SCHED_INIT_GPU_FAIL',
    14: 'AMDSMI_EVENT_SCHED_RUN_GPU_FAIL',
    15: 'AMDSMI_EVENT_SCHED_SAVE_GPU_STATE_FAIL',
    16: 'AMDSMI_EVENT_SCHED_LOAD_GPU_STATE_FAIL',
    17: 'AMDSMI_EVENT_SCHED_IDLE_GPU_FAIL',
    18: 'AMDSMI_EVENT_SCHED_FINI_GPU_FAIL',
    19: 'AMDSMI_EVENT_SCHED_DEAD_VF',
    20: 'AMDSMI_EVENT_SCHED_EVENT_QUEUE_FULL',
    21: 'AMDSMI_EVENT_SCHED_SHUTDOWN_VF_FAIL',
    22: 'AMDSMI_EVENT_SCHED_RESET_VF_NUM_FAIL',
    23: 'AMDSMI_EVENT_SCHED_IGNORE_EVENT',
    24: 'AMDSMI_EVENT_SCHED_PF_SWITCH_FAIL',
    25: 'AMDSMI_EVENT_SCHED__MAX',
}
AMDSMI_EVENT_SCHED_WORLD_SWITCH_FAIL = 0
AMDSMI_EVENT_SCHED_DISABLE_AUTO_HW_SWITCH_FAIL = 1
AMDSMI_EVENT_SCHED_ENABLE_AUTO_HW_SWITCH_FAIL = 2
AMDSMI_EVENT_SCHED_GFX_SAVE_REG_FAIL = 3
AMDSMI_EVENT_SCHED_GFX_IDLE_REG_FAIL = 4
AMDSMI_EVENT_SCHED_GFX_RUN_REG_FAIL = 5
AMDSMI_EVENT_SCHED_GFX_LOAD_REG_FAIL = 6
AMDSMI_EVENT_SCHED_GFX_INIT_REG_FAIL = 7
AMDSMI_EVENT_SCHED_MM_SAVE_REG_FAIL = 8
AMDSMI_EVENT_SCHED_MM_IDLE_REG_FAIL = 9
AMDSMI_EVENT_SCHED_MM_RUN_REG_FAIL = 10
AMDSMI_EVENT_SCHED_MM_LOAD_REG_FAIL = 11
AMDSMI_EVENT_SCHED_MM_INIT_REG_FAIL = 12
AMDSMI_EVENT_SCHED_INIT_GPU_FAIL = 13
AMDSMI_EVENT_SCHED_RUN_GPU_FAIL = 14
AMDSMI_EVENT_SCHED_SAVE_GPU_STATE_FAIL = 15
AMDSMI_EVENT_SCHED_LOAD_GPU_STATE_FAIL = 16
AMDSMI_EVENT_SCHED_IDLE_GPU_FAIL = 17
AMDSMI_EVENT_SCHED_FINI_GPU_FAIL = 18
AMDSMI_EVENT_SCHED_DEAD_VF = 19
AMDSMI_EVENT_SCHED_EVENT_QUEUE_FULL = 20
AMDSMI_EVENT_SCHED_SHUTDOWN_VF_FAIL = 21
AMDSMI_EVENT_SCHED_RESET_VF_NUM_FAIL = 22
AMDSMI_EVENT_SCHED_IGNORE_EVENT = 23
AMDSMI_EVENT_SCHED_PF_SWITCH_FAIL = 24
AMDSMI_EVENT_SCHED__MAX = 25
c__EA_amdsmi_event_sched_t = ctypes.c_uint32 # enum
amdsmi_event_sched_t = c__EA_amdsmi_event_sched_t
amdsmi_event_sched_t__enumvalues = c__EA_amdsmi_event_sched_t__enumvalues

# values for enumeration 'c__EA_amdsmi_event_vf_max_t'
c__EA_amdsmi_event_vf_max_t__enumvalues = {
    0: 'AMDSMI_EVENT_VF_ATOMBIOS_INIT_FAIL',
    1: 'AMDSMI_EVENT_VF_NO_VBIOS',
    2: 'AMDSMI_EVENT_VF_GPU_POST_ERROR',
    3: 'AMDSMI_EVENT_VF_ATOMBIOS_GET_CLOCK_FAIL',
    4: 'AMDSMI_EVENT_VF_FENCE_INIT_FAIL',
    5: 'AMDSMI_EVENT_VF_AMDGPU_INIT_FAIL',
    6: 'AMDSMI_EVENT_VF_IB_INIT_FAIL',
    7: 'AMDSMI_EVENT_VF_AMDGPU_LATE_INIT_FAIL',
    8: 'AMDSMI_EVENT_VF_ASIC_RESUME_FAIL',
    9: 'AMDSMI_EVENT_VF_GPU_RESET_FAIL',
    10: 'AMDSMI_EVENT_VF__MAX',
}
AMDSMI_EVENT_VF_ATOMBIOS_INIT_FAIL = 0
AMDSMI_EVENT_VF_NO_VBIOS = 1
AMDSMI_EVENT_VF_GPU_POST_ERROR = 2
AMDSMI_EVENT_VF_ATOMBIOS_GET_CLOCK_FAIL = 3
AMDSMI_EVENT_VF_FENCE_INIT_FAIL = 4
AMDSMI_EVENT_VF_AMDGPU_INIT_FAIL = 5
AMDSMI_EVENT_VF_IB_INIT_FAIL = 6
AMDSMI_EVENT_VF_AMDGPU_LATE_INIT_FAIL = 7
AMDSMI_EVENT_VF_ASIC_RESUME_FAIL = 8
AMDSMI_EVENT_VF_GPU_RESET_FAIL = 9
AMDSMI_EVENT_VF__MAX = 10
c__EA_amdsmi_event_vf_max_t = ctypes.c_uint32 # enum
amdsmi_event_vf_max_t = c__EA_amdsmi_event_vf_max_t
amdsmi_event_vf_max_t__enumvalues = c__EA_amdsmi_event_vf_max_t__enumvalues

# values for enumeration 'c__EA_amdsmi_event_vbios_t'
c__EA_amdsmi_event_vbios_t__enumvalues = {
    0: 'AMDSMI_EVENT_VBIOS_INVALID',
    1: 'AMDSMI_EVENT_VBIOS_IMAGE_MISSING',
    2: 'AMDSMI_EVENT_VBIOS_CHECKSUM_ERR',
    3: 'AMDSMI_EVENT_VBIOS_POST_FAIL',
    4: 'AMDSMI_EVENT_VBIOS_READ_FAIL',
    5: 'AMDSMI_EVENT_VBIOS_READ_IMG_HEADER_FAIL',
    6: 'AMDSMI_EVENT_VBIOS_READ_IMG_SIZE_FAIL',
    7: 'AMDSMI_EVENT_VBIOS_GET_FW_INFO_FAIL',
    8: 'AMDSMI_EVENT_VBIOS_GET_TBL_REVISION_FAIL',
    9: 'AMDSMI_EVENT_VBIOS_PARSER_TBL_FAIL',
    10: 'AMDSMI_EVENT_VBIOS_IP_DISCOVERY_FAIL',
    11: 'AMDSMI_EVENT_VBIOS_TIMEOUT',
    12: 'AMDSMI_EVENT_VBIOS_HASH_INVALID',
    13: 'AMDSMI_EVENT_VBIOS_HASH_UPDATED',
    14: 'AMDSMI_EVENT_VBIOS_IP_DISCOVERY_BINARY_CHECKSUM_FAIL',
    15: 'AMDSMI_EVENT_VBIOS_IP_DISCOVERY_TABLE_CHECKSUM_FAIL',
    16: 'AMDSMI_EVENT_VBIOS__MAX',
}
AMDSMI_EVENT_VBIOS_INVALID = 0
AMDSMI_EVENT_VBIOS_IMAGE_MISSING = 1
AMDSMI_EVENT_VBIOS_CHECKSUM_ERR = 2
AMDSMI_EVENT_VBIOS_POST_FAIL = 3
AMDSMI_EVENT_VBIOS_READ_FAIL = 4
AMDSMI_EVENT_VBIOS_READ_IMG_HEADER_FAIL = 5
AMDSMI_EVENT_VBIOS_READ_IMG_SIZE_FAIL = 6
AMDSMI_EVENT_VBIOS_GET_FW_INFO_FAIL = 7
AMDSMI_EVENT_VBIOS_GET_TBL_REVISION_FAIL = 8
AMDSMI_EVENT_VBIOS_PARSER_TBL_FAIL = 9
AMDSMI_EVENT_VBIOS_IP_DISCOVERY_FAIL = 10
AMDSMI_EVENT_VBIOS_TIMEOUT = 11
AMDSMI_EVENT_VBIOS_HASH_INVALID = 12
AMDSMI_EVENT_VBIOS_HASH_UPDATED = 13
AMDSMI_EVENT_VBIOS_IP_DISCOVERY_BINARY_CHECKSUM_FAIL = 14
AMDSMI_EVENT_VBIOS_IP_DISCOVERY_TABLE_CHECKSUM_FAIL = 15
AMDSMI_EVENT_VBIOS__MAX = 16
c__EA_amdsmi_event_vbios_t = ctypes.c_uint32 # enum
amdsmi_event_vbios_t = c__EA_amdsmi_event_vbios_t
amdsmi_event_vbios_t__enumvalues = c__EA_amdsmi_event_vbios_t__enumvalues

# values for enumeration 'c__EA_amdsmi_event_guard_t'
c__EA_amdsmi_event_guard_t__enumvalues = {
    0: 'AMDSMI_EVENT_GUARD_RESET_FAIL',
    1: 'AMDSMI_EVENT_GUARD_EVENT_OVERFLOW',
    2: 'AMDSMI_EVENT_GUARD__MAX',
}
AMDSMI_EVENT_GUARD_RESET_FAIL = 0
AMDSMI_EVENT_GUARD_EVENT_OVERFLOW = 1
AMDSMI_EVENT_GUARD__MAX = 2
c__EA_amdsmi_event_guard_t = ctypes.c_uint32 # enum
amdsmi_event_guard_t = c__EA_amdsmi_event_guard_t
amdsmi_event_guard_t__enumvalues = c__EA_amdsmi_event_guard_t__enumvalues

# values for enumeration 'c__EA_amdsmi_event_gpumon_t'
c__EA_amdsmi_event_gpumon_t__enumvalues = {
    0: 'AMDSMI_EVENT_GPUMON_INVALID_OPTION',
    1: 'AMDSMI_EVENT_GPUMON_INVALID_VF_INDEX',
    2: 'AMDSMI_EVENT_GPUMON_INVALID_FB_SIZE',
    3: 'AMDSMI_EVENT_GPUMON_NO_SUITABLE_SPACE',
    4: 'AMDSMI_EVENT_GPUMON_NO_AVAILABLE_SLOT',
    5: 'AMDSMI_EVENT_GPUMON_OVERSIZE_ALLOCATION',
    6: 'AMDSMI_EVENT_GPUMON_OVERLAPPING_FB',
    7: 'AMDSMI_EVENT_GPUMON_INVALID_GFX_TIMESLICE',
    8: 'AMDSMI_EVENT_GPUMON_INVALID_MM_TIMESLICE',
    9: 'AMDSMI_EVENT_GPUMON_INVALID_GFX_PART',
    10: 'AMDSMI_EVENT_GPUMON_VF_BUSY',
    11: 'AMDSMI_EVENT_GPUMON_INVALID_VF_NUM',
    12: 'AMDSMI_EVENT_GPUMON_NOT_SUPPORTED',
    13: 'AMDSMI_EVENT_GPUMON__MAX',
}
AMDSMI_EVENT_GPUMON_INVALID_OPTION = 0
AMDSMI_EVENT_GPUMON_INVALID_VF_INDEX = 1
AMDSMI_EVENT_GPUMON_INVALID_FB_SIZE = 2
AMDSMI_EVENT_GPUMON_NO_SUITABLE_SPACE = 3
AMDSMI_EVENT_GPUMON_NO_AVAILABLE_SLOT = 4
AMDSMI_EVENT_GPUMON_OVERSIZE_ALLOCATION = 5
AMDSMI_EVENT_GPUMON_OVERLAPPING_FB = 6
AMDSMI_EVENT_GPUMON_INVALID_GFX_TIMESLICE = 7
AMDSMI_EVENT_GPUMON_INVALID_MM_TIMESLICE = 8
AMDSMI_EVENT_GPUMON_INVALID_GFX_PART = 9
AMDSMI_EVENT_GPUMON_VF_BUSY = 10
AMDSMI_EVENT_GPUMON_INVALID_VF_NUM = 11
AMDSMI_EVENT_GPUMON_NOT_SUPPORTED = 12
AMDSMI_EVENT_GPUMON__MAX = 13
c__EA_amdsmi_event_gpumon_t = ctypes.c_uint32 # enum
amdsmi_event_gpumon_t = c__EA_amdsmi_event_gpumon_t
amdsmi_event_gpumon_t__enumvalues = c__EA_amdsmi_event_gpumon_t__enumvalues

# values for enumeration 'c__EA_amdsmi_event_mmsch_t'
c__EA_amdsmi_event_mmsch_t__enumvalues = {
    0: 'AMDSMI_EVENT_MMSCH_IGNORED_JOB',
    1: 'AMDSMI_EVENT_MMSCH_UNSUPPORTED_VCN_FW',
    2: 'AMDSMI_EVENT_MMSCH__MAX',
}
AMDSMI_EVENT_MMSCH_IGNORED_JOB = 0
AMDSMI_EVENT_MMSCH_UNSUPPORTED_VCN_FW = 1
AMDSMI_EVENT_MMSCH__MAX = 2
c__EA_amdsmi_event_mmsch_t = ctypes.c_uint32 # enum
amdsmi_event_mmsch_t = c__EA_amdsmi_event_mmsch_t
amdsmi_event_mmsch_t__enumvalues = c__EA_amdsmi_event_mmsch_t__enumvalues

# values for enumeration 'c__EA_amdsmi_event_xgmi_t'
c__EA_amdsmi_event_xgmi_t__enumvalues = {
    0: 'AMDSMI_EVENT_XGMI_TOPOLOGY_UPDATE_FAILED',
    1: 'AMDSMI_EVENT_XGMI_TOPOLOGY_HW_INIT_UPDATE',
    2: 'AMDSMI_EVENT_XGMI_TOPOLOGY_UPDATE_DONE',
    3: 'AMDSMI_EVENT_XGMI_FB_SHARING_SETTING_ERROR',
    4: 'AMDSMI_EVENT_XGMI_FB_SHARING_SETTING_RESET',
    5: 'AMDSMI_EVENT_XGMI__MAX',
}
AMDSMI_EVENT_XGMI_TOPOLOGY_UPDATE_FAILED = 0
AMDSMI_EVENT_XGMI_TOPOLOGY_HW_INIT_UPDATE = 1
AMDSMI_EVENT_XGMI_TOPOLOGY_UPDATE_DONE = 2
AMDSMI_EVENT_XGMI_FB_SHARING_SETTING_ERROR = 3
AMDSMI_EVENT_XGMI_FB_SHARING_SETTING_RESET = 4
AMDSMI_EVENT_XGMI__MAX = 5
c__EA_amdsmi_event_xgmi_t = ctypes.c_uint32 # enum
amdsmi_event_xgmi_t = c__EA_amdsmi_event_xgmi_t
amdsmi_event_xgmi_t__enumvalues = c__EA_amdsmi_event_xgmi_t__enumvalues

# values for enumeration 'c__EA_amdsmi_ecc_correction_schema_support_t'
c__EA_amdsmi_ecc_correction_schema_support_t__enumvalues = {
    1: 'AMDSMI_RAS_ECC_SUPPORT_PARITY',
    2: 'AMDSMI_RAS_ECC_SUPPORT_CORRECTABLE',
    4: 'AMDSMI_RAS_ECC_SUPPORT_UNCORRECTABLE',
    8: 'AMDSMI_RAS_ECC_SUPPORT_POISON',
}
AMDSMI_RAS_ECC_SUPPORT_PARITY = 1
AMDSMI_RAS_ECC_SUPPORT_CORRECTABLE = 2
AMDSMI_RAS_ECC_SUPPORT_UNCORRECTABLE = 4
AMDSMI_RAS_ECC_SUPPORT_POISON = 8
c__EA_amdsmi_ecc_correction_schema_support_t = ctypes.c_uint32 # enum
amdsmi_ecc_correction_schema_support_t = c__EA_amdsmi_ecc_correction_schema_support_t
amdsmi_ecc_correction_schema_support_t__enumvalues = c__EA_amdsmi_ecc_correction_schema_support_t__enumvalues

# values for enumeration 'c__EA_amdsmi_guest_fw_engine_id_t'
c__EA_amdsmi_guest_fw_engine_id_t__enumvalues = {
    0: 'AMDSMI_GUEST_FW_ID_VCE',
    1: 'AMDSMI_GUEST_FW_ID_UVD',
    2: 'AMDSMI_GUEST_FW_ID_MC',
    3: 'AMDSMI_GUEST_FW_ID_ME',
    4: 'AMDSMI_GUEST_FW_ID_PFP',
    5: 'AMDSMI_GUEST_FW_ID_CE',
    6: 'AMDSMI_GUEST_FW_ID_RLC',
    7: 'AMDSMI_GUEST_FW_ID_RLC_SRLC',
    8: 'AMDSMI_GUEST_FW_ID_RLC_SRLG',
    9: 'AMDSMI_GUEST_FW_ID_RLC_SRLS',
    10: 'AMDSMI_GUEST_FW_ID_MEC',
    11: 'AMDSMI_GUEST_FW_ID_MEC2',
    12: 'AMDSMI_GUEST_FW_ID_SOS',
    13: 'AMDSMI_GUEST_FW_ID_ASD',
    14: 'AMDSMI_GUEST_FW_ID_TA_RAS',
    15: 'AMDSMI_GUEST_FW_ID_TA_XGMI',
    16: 'AMDSMI_GUEST_FW_ID_SMC',
    17: 'AMDSMI_GUEST_FW_ID_SDMA',
    18: 'AMDSMI_GUEST_FW_ID_SDMA2',
    19: 'AMDSMI_GUEST_FW_ID_VCN',
    20: 'AMDSMI_GUEST_FW_ID_DMCU',
    21: 'AMDSMI_GUEST_FW_ID__MAX',
}
AMDSMI_GUEST_FW_ID_VCE = 0
AMDSMI_GUEST_FW_ID_UVD = 1
AMDSMI_GUEST_FW_ID_MC = 2
AMDSMI_GUEST_FW_ID_ME = 3
AMDSMI_GUEST_FW_ID_PFP = 4
AMDSMI_GUEST_FW_ID_CE = 5
AMDSMI_GUEST_FW_ID_RLC = 6
AMDSMI_GUEST_FW_ID_RLC_SRLC = 7
AMDSMI_GUEST_FW_ID_RLC_SRLG = 8
AMDSMI_GUEST_FW_ID_RLC_SRLS = 9
AMDSMI_GUEST_FW_ID_MEC = 10
AMDSMI_GUEST_FW_ID_MEC2 = 11
AMDSMI_GUEST_FW_ID_SOS = 12
AMDSMI_GUEST_FW_ID_ASD = 13
AMDSMI_GUEST_FW_ID_TA_RAS = 14
AMDSMI_GUEST_FW_ID_TA_XGMI = 15
AMDSMI_GUEST_FW_ID_SMC = 16
AMDSMI_GUEST_FW_ID_SDMA = 17
AMDSMI_GUEST_FW_ID_SDMA2 = 18
AMDSMI_GUEST_FW_ID_VCN = 19
AMDSMI_GUEST_FW_ID_DMCU = 20
AMDSMI_GUEST_FW_ID__MAX = 21
c__EA_amdsmi_guest_fw_engine_id_t = ctypes.c_uint32 # enum
amdsmi_guest_fw_engine_id_t = c__EA_amdsmi_guest_fw_engine_id_t
amdsmi_guest_fw_engine_id_t__enumvalues = c__EA_amdsmi_guest_fw_engine_id_t__enumvalues

# values for enumeration 'c__EA_amdsmi_vf_config_flags_t'
c__EA_amdsmi_vf_config_flags_t__enumvalues = {
    0: 'AMDSMI_VF_CONFIG_FB_SIZE_SET',
    1: 'AMDSMI_VF_CONFIG_FB_OFFSET_SET',
    2: 'AMDSMI_VF_CONFIG_GFX_TIMESLICE_US_SET',
    3: 'AMDSMI_VF_CONFIG_ENG_COMPUTE_BW_SET',
    4: 'AMDSMI_VF_CONFIG_GUARD_THRESHOLD_FLR_SET',
    5: 'AMDSMI_VF_CONFIG_GUARD_THRESHOLD_EXCL_MOD_SET',
    6: 'AMDSMI_VF_CONFIG_GUARD_THRESHOLD_EXCL_TIMEOUT_SET',
    7: 'AMDSMI_VF_CONFIG_GUARD_THRESHOLD_ALL_INT_SET',
    8: 'AMDSMI_VF_CONFIG_ENG_ENCODE_BW_UVD_SET',
    9: 'AMDSMI_VF_CONFIG_ENG_ENCODE_BW_VCE_SET',
    10: 'AMDSMI_VF_CONFIG_ENG_ENCODE_BW_UVD1_SET',
    11: 'AMDSMI_VF_CONFIG_ENG_ENCODE_BW_VCN_SET',
    12: 'AMDSMI_VF_CONFIG_ENG_ENCODE_BW_VCN1_SET',
    13: 'AMDSMI_VF_CONFIG__MAX',
}
AMDSMI_VF_CONFIG_FB_SIZE_SET = 0
AMDSMI_VF_CONFIG_FB_OFFSET_SET = 1
AMDSMI_VF_CONFIG_GFX_TIMESLICE_US_SET = 2
AMDSMI_VF_CONFIG_ENG_COMPUTE_BW_SET = 3
AMDSMI_VF_CONFIG_GUARD_THRESHOLD_FLR_SET = 4
AMDSMI_VF_CONFIG_GUARD_THRESHOLD_EXCL_MOD_SET = 5
AMDSMI_VF_CONFIG_GUARD_THRESHOLD_EXCL_TIMEOUT_SET = 6
AMDSMI_VF_CONFIG_GUARD_THRESHOLD_ALL_INT_SET = 7
AMDSMI_VF_CONFIG_ENG_ENCODE_BW_UVD_SET = 8
AMDSMI_VF_CONFIG_ENG_ENCODE_BW_VCE_SET = 9
AMDSMI_VF_CONFIG_ENG_ENCODE_BW_UVD1_SET = 10
AMDSMI_VF_CONFIG_ENG_ENCODE_BW_VCN_SET = 11
AMDSMI_VF_CONFIG_ENG_ENCODE_BW_VCN1_SET = 12
AMDSMI_VF_CONFIG__MAX = 13
c__EA_amdsmi_vf_config_flags_t = ctypes.c_uint32 # enum
amdsmi_vf_config_flags_t = c__EA_amdsmi_vf_config_flags_t
amdsmi_vf_config_flags_t__enumvalues = c__EA_amdsmi_vf_config_flags_t__enumvalues

# values for enumeration 'c__EA_amdsmi_vf_sched_state_t'
c__EA_amdsmi_vf_sched_state_t__enumvalues = {
    0: 'AMDSMI_VF_STATE_UNAVAILABLE',
    1: 'AMDSMI_VF_STATE_AVAILABLE',
    2: 'AMDSMI_VF_STATE_ACTIVE',
    3: 'AMDSMI_VF_STATE_SUSPENDED',
    4: 'AMDSMI_VF_STATE_FULLACCESS',
    5: 'AMDSMI_VF_STATE_DEFAULT_AVAILABLE',
}
AMDSMI_VF_STATE_UNAVAILABLE = 0
AMDSMI_VF_STATE_AVAILABLE = 1
AMDSMI_VF_STATE_ACTIVE = 2
AMDSMI_VF_STATE_SUSPENDED = 3
AMDSMI_VF_STATE_FULLACCESS = 4
AMDSMI_VF_STATE_DEFAULT_AVAILABLE = 5
c__EA_amdsmi_vf_sched_state_t = ctypes.c_uint32 # enum
amdsmi_vf_sched_state_t = c__EA_amdsmi_vf_sched_state_t
amdsmi_vf_sched_state_t__enumvalues = c__EA_amdsmi_vf_sched_state_t__enumvalues

# values for enumeration 'c__EA_amdsmi_guard_type_t'
c__EA_amdsmi_guard_type_t__enumvalues = {
    0: 'AMDSMI_GUARD_EVENT_FLR',
    1: 'AMDSMI_GUARD_EVENT_EXCLUSIVE_MOD',
    2: 'AMDSMI_GUARD_EVENT_EXCLUSIVE_TIMEOUT',
    3: 'AMDSMI_GUARD_EVENT_ALL_INT',
    4: 'AMDSMI_GUARD_EVENT__MAX',
}
AMDSMI_GUARD_EVENT_FLR = 0
AMDSMI_GUARD_EVENT_EXCLUSIVE_MOD = 1
AMDSMI_GUARD_EVENT_EXCLUSIVE_TIMEOUT = 2
AMDSMI_GUARD_EVENT_ALL_INT = 3
AMDSMI_GUARD_EVENT__MAX = 4
c__EA_amdsmi_guard_type_t = ctypes.c_uint32 # enum
amdsmi_guard_type_t = c__EA_amdsmi_guard_type_t
amdsmi_guard_type_t__enumvalues = c__EA_amdsmi_guard_type_t__enumvalues

# values for enumeration 'c__EA_amdsmi_driver_t'
c__EA_amdsmi_driver_t__enumvalues = {
    0: 'AMDSMI_DRIVER_LIBGV',
    1: 'AMDSMI_DRIVER_KMD',
    2: 'AMDSMI_DRIVER_AMDGPUV',
    3: 'AMDSMI_DRIVER_AMDGPU',
    4: 'AMDSMI_DRIVER_VMWGPUV',
    5: 'AMDSMI_DRIVER__MAX',
}
AMDSMI_DRIVER_LIBGV = 0
AMDSMI_DRIVER_KMD = 1
AMDSMI_DRIVER_AMDGPUV = 2
AMDSMI_DRIVER_AMDGPU = 3
AMDSMI_DRIVER_VMWGPUV = 4
AMDSMI_DRIVER__MAX = 5
c__EA_amdsmi_driver_t = ctypes.c_uint32 # enum
amdsmi_driver_t = c__EA_amdsmi_driver_t
amdsmi_driver_t__enumvalues = c__EA_amdsmi_driver_t__enumvalues

# values for enumeration 'c__EA_amdsmi_guard_state_t'
c__EA_amdsmi_guard_state_t__enumvalues = {
    0: 'AMDSMI_GUARD_STATE_NORMAL',
    1: 'AMDSMI_GUARD_STATE_FULL',
    2: 'AMDSMI_GUARD_STATE_OVERFLOW',
}
AMDSMI_GUARD_STATE_NORMAL = 0
AMDSMI_GUARD_STATE_FULL = 1
AMDSMI_GUARD_STATE_OVERFLOW = 2
c__EA_amdsmi_guard_state_t = ctypes.c_uint32 # enum
amdsmi_guard_state_t = c__EA_amdsmi_guard_state_t
amdsmi_guard_state_t__enumvalues = c__EA_amdsmi_guard_state_t__enumvalues

# values for enumeration 'c__EA_amdsmi_sched_block_t'
c__EA_amdsmi_sched_block_t__enumvalues = {
    0: 'AMDSMI_SCHED_BLOCK_GFX',
    1: 'AMDSMI_SCHED_BLOCK_UVD',
    2: 'AMDSMI_SCHED_BLOCK_VCE',
    3: 'AMDSMI_SCHED_BLOCK_UVD1',
    4: 'AMDSMI_SCHED_BLOCK_VCN',
    5: 'AMDSMI_SCHED_BLOCK_VCN1',
}
AMDSMI_SCHED_BLOCK_GFX = 0
AMDSMI_SCHED_BLOCK_UVD = 1
AMDSMI_SCHED_BLOCK_VCE = 2
AMDSMI_SCHED_BLOCK_UVD1 = 3
AMDSMI_SCHED_BLOCK_VCN = 4
AMDSMI_SCHED_BLOCK_VCN1 = 5
c__EA_amdsmi_sched_block_t = ctypes.c_uint32 # enum
amdsmi_sched_block_t = c__EA_amdsmi_sched_block_t
amdsmi_sched_block_t__enumvalues = c__EA_amdsmi_sched_block_t__enumvalues

# values for enumeration 'c__EA_amdsmi_guest_fw_load_status_t'
c__EA_amdsmi_guest_fw_load_status_t__enumvalues = {
    0: 'GUEST_FW_LOAD_STATUS_OK',
    1: 'GUEST_FW_LOAD_STATUS_OBSOLETE_FW',
    2: 'GUEST_FW_LOAD_STATUS_BAD_SIG',
    3: 'GUEST_FW_LOAD_STATUS_FW_LOAD_FAIL',
    4: 'GUEST_FW_LOAD_STATUS_ERR_GENERIC',
}
GUEST_FW_LOAD_STATUS_OK = 0
GUEST_FW_LOAD_STATUS_OBSOLETE_FW = 1
GUEST_FW_LOAD_STATUS_BAD_SIG = 2
GUEST_FW_LOAD_STATUS_FW_LOAD_FAIL = 3
GUEST_FW_LOAD_STATUS_ERR_GENERIC = 4
c__EA_amdsmi_guest_fw_load_status_t = ctypes.c_uint32 # enum
amdsmi_guest_fw_load_status_t = c__EA_amdsmi_guest_fw_load_status_t
amdsmi_guest_fw_load_status_t__enumvalues = c__EA_amdsmi_guest_fw_load_status_t__enumvalues

# values for enumeration 'c__EA_amdsmi_link_status_t'
c__EA_amdsmi_link_status_t__enumvalues = {
    0: 'AMDSMI_LINK_STATUS_ENABLED',
    1: 'AMDSMI_LINK_STATUS_DISABLED',
    2: 'AMDSMI_LINK_STATUS_ERROR',
}
AMDSMI_LINK_STATUS_ENABLED = 0
AMDSMI_LINK_STATUS_DISABLED = 1
AMDSMI_LINK_STATUS_ERROR = 2
c__EA_amdsmi_link_status_t = ctypes.c_uint32 # enum
amdsmi_link_status_t = c__EA_amdsmi_link_status_t
amdsmi_link_status_t__enumvalues = c__EA_amdsmi_link_status_t__enumvalues

# values for enumeration 'c__EA_amdsmi_link_type_t'
c__EA_amdsmi_link_type_t__enumvalues = {
    0: 'AMDSMI_LINK_TYPE_INTERNAL',
    1: 'AMDSMI_LINK_TYPE_XGMI',
    2: 'AMDSMI_LINK_TYPE_PCIE',
    3: 'AMDSMI_LINK_TYPE_NOT_APPLICABLE',
    4: 'AMDSMI_LINK_TYPE_UNKNOWN',
}
AMDSMI_LINK_TYPE_INTERNAL = 0
AMDSMI_LINK_TYPE_XGMI = 1
AMDSMI_LINK_TYPE_PCIE = 2
AMDSMI_LINK_TYPE_NOT_APPLICABLE = 3
AMDSMI_LINK_TYPE_UNKNOWN = 4
c__EA_amdsmi_link_type_t = ctypes.c_uint32 # enum
amdsmi_link_type_t = c__EA_amdsmi_link_type_t
amdsmi_link_type_t__enumvalues = c__EA_amdsmi_link_type_t__enumvalues

# values for enumeration 'c__EA_amdsmi_xgmi_fb_sharing_mode_t'
c__EA_amdsmi_xgmi_fb_sharing_mode_t__enumvalues = {
    0: 'AMDSMI_XGMI_FB_SHARING_MODE_CUSTOM',
    1: 'AMDSMI_XGMI_FB_SHARING_MODE_1',
    2: 'AMDSMI_XGMI_FB_SHARING_MODE_2',
    4: 'AMDSMI_XGMI_FB_SHARING_MODE_4',
    8: 'AMDSMI_XGMI_FB_SHARING_MODE_8',
    4294967295: 'AMDSMI_XGMI_FB_SHARING_MODE_UNKNOWN',
}
AMDSMI_XGMI_FB_SHARING_MODE_CUSTOM = 0
AMDSMI_XGMI_FB_SHARING_MODE_1 = 1
AMDSMI_XGMI_FB_SHARING_MODE_2 = 2
AMDSMI_XGMI_FB_SHARING_MODE_4 = 4
AMDSMI_XGMI_FB_SHARING_MODE_8 = 8
AMDSMI_XGMI_FB_SHARING_MODE_UNKNOWN = 4294967295
c__EA_amdsmi_xgmi_fb_sharing_mode_t = ctypes.c_uint32 # enum
amdsmi_xgmi_fb_sharing_mode_t = c__EA_amdsmi_xgmi_fb_sharing_mode_t
amdsmi_xgmi_fb_sharing_mode_t__enumvalues = c__EA_amdsmi_xgmi_fb_sharing_mode_t__enumvalues

# values for enumeration 'c__EA_amdsmi_profile_capability_type_t'
c__EA_amdsmi_profile_capability_type_t__enumvalues = {
    0: 'AMDSMI_PROFILE_CAPABILITY_MEMORY',
    1: 'AMDSMI_PROFILE_CAPABILITY_ENCODE',
    2: 'AMDSMI_PROFILE_CAPABILITY_DECODE',
    3: 'AMDSMI_PROFILE_CAPABILITY_COMPUTE',
    4: 'AMDSMI_PROFILE_CAPABILITY__MAX',
}
AMDSMI_PROFILE_CAPABILITY_MEMORY = 0
AMDSMI_PROFILE_CAPABILITY_ENCODE = 1
AMDSMI_PROFILE_CAPABILITY_DECODE = 2
AMDSMI_PROFILE_CAPABILITY_COMPUTE = 3
AMDSMI_PROFILE_CAPABILITY__MAX = 4
c__EA_amdsmi_profile_capability_type_t = ctypes.c_uint32 # enum
amdsmi_profile_capability_type_t = c__EA_amdsmi_profile_capability_type_t
amdsmi_profile_capability_type_t__enumvalues = c__EA_amdsmi_profile_capability_type_t__enumvalues

# values for enumeration 'c__EA_amdsmi_vram_type_t'
c__EA_amdsmi_vram_type_t__enumvalues = {
    0: 'AMDSMI_VRAM_TYPE_UNKNOWN',
    1: 'AMDSMI_VRAM_TYPE_HBM',
    2: 'AMDSMI_VRAM_TYPE_HBM2',
    3: 'AMDSMI_VRAM_TYPE_HBM2E',
    4: 'AMDSMI_VRAM_TYPE_HBM3',
    10: 'AMDSMI_VRAM_TYPE_DDR2',
    11: 'AMDSMI_VRAM_TYPE_DDR3',
    12: 'AMDSMI_VRAM_TYPE_DDR4',
    17: 'AMDSMI_VRAM_TYPE_GDDR1',
    18: 'AMDSMI_VRAM_TYPE_GDDR2',
    19: 'AMDSMI_VRAM_TYPE_GDDR3',
    20: 'AMDSMI_VRAM_TYPE_GDDR4',
    21: 'AMDSMI_VRAM_TYPE_GDDR5',
    22: 'AMDSMI_VRAM_TYPE_GDDR6',
    23: 'AMDSMI_VRAM_TYPE_GDDR7',
}
AMDSMI_VRAM_TYPE_UNKNOWN = 0
AMDSMI_VRAM_TYPE_HBM = 1
AMDSMI_VRAM_TYPE_HBM2 = 2
AMDSMI_VRAM_TYPE_HBM2E = 3
AMDSMI_VRAM_TYPE_HBM3 = 4
AMDSMI_VRAM_TYPE_DDR2 = 10
AMDSMI_VRAM_TYPE_DDR3 = 11
AMDSMI_VRAM_TYPE_DDR4 = 12
AMDSMI_VRAM_TYPE_GDDR1 = 17
AMDSMI_VRAM_TYPE_GDDR2 = 18
AMDSMI_VRAM_TYPE_GDDR3 = 19
AMDSMI_VRAM_TYPE_GDDR4 = 20
AMDSMI_VRAM_TYPE_GDDR5 = 21
AMDSMI_VRAM_TYPE_GDDR6 = 22
AMDSMI_VRAM_TYPE_GDDR7 = 23
c__EA_amdsmi_vram_type_t = ctypes.c_uint32 # enum
amdsmi_vram_type_t = c__EA_amdsmi_vram_type_t
amdsmi_vram_type_t__enumvalues = c__EA_amdsmi_vram_type_t__enumvalues

# values for enumeration 'c__EA_amdsmi_vram_vendor_t'
c__EA_amdsmi_vram_vendor_t__enumvalues = {
    0: 'AMDSMI_VRAM_VENDOR_SAMSUNG',
    1: 'AMDSMI_VRAM_VENDOR_INFINEON',
    2: 'AMDSMI_VRAM_VENDOR_ELPIDA',
    3: 'AMDSMI_VRAM_VENDOR_ETRON',
    4: 'AMDSMI_VRAM_VENDOR_NANYA',
    5: 'AMDSMI_VRAM_VENDOR_HYNIX',
    6: 'AMDSMI_VRAM_VENDOR_MOSEL',
    7: 'AMDSMI_VRAM_VENDOR_WINBOND',
    8: 'AMDSMI_VRAM_VENDOR_ESMT',
    9: 'AMDSMI_VRAM_VENDOR_MICRON',
    10: 'AMDSMI_VRAM_VENDOR_UNKNOWN',
}
AMDSMI_VRAM_VENDOR_SAMSUNG = 0
AMDSMI_VRAM_VENDOR_INFINEON = 1
AMDSMI_VRAM_VENDOR_ELPIDA = 2
AMDSMI_VRAM_VENDOR_ETRON = 3
AMDSMI_VRAM_VENDOR_NANYA = 4
AMDSMI_VRAM_VENDOR_HYNIX = 5
AMDSMI_VRAM_VENDOR_MOSEL = 6
AMDSMI_VRAM_VENDOR_WINBOND = 7
AMDSMI_VRAM_VENDOR_ESMT = 8
AMDSMI_VRAM_VENDOR_MICRON = 9
AMDSMI_VRAM_VENDOR_UNKNOWN = 10
c__EA_amdsmi_vram_vendor_t = ctypes.c_uint32 # enum
amdsmi_vram_vendor_t = c__EA_amdsmi_vram_vendor_t
amdsmi_vram_vendor_t__enumvalues = c__EA_amdsmi_vram_vendor_t__enumvalues

# values for enumeration 'c__EA_amdsmi_gpu_block_t'
c__EA_amdsmi_gpu_block_t__enumvalues = {
    0: 'AMDSMI_GPU_BLOCK_INVALID',
    1: 'AMDSMI_GPU_BLOCK_FIRST',
    1: 'AMDSMI_GPU_BLOCK_UMC',
    2: 'AMDSMI_GPU_BLOCK_SDMA',
    4: 'AMDSMI_GPU_BLOCK_GFX',
    8: 'AMDSMI_GPU_BLOCK_MMHUB',
    16: 'AMDSMI_GPU_BLOCK_ATHUB',
    32: 'AMDSMI_GPU_BLOCK_PCIE_BIF',
    64: 'AMDSMI_GPU_BLOCK_HDP',
    128: 'AMDSMI_GPU_BLOCK_XGMI_WAFL',
    256: 'AMDSMI_GPU_BLOCK_DF',
    512: 'AMDSMI_GPU_BLOCK_SMN',
    1024: 'AMDSMI_GPU_BLOCK_SEM',
    2048: 'AMDSMI_GPU_BLOCK_MP0',
    4096: 'AMDSMI_GPU_BLOCK_MP1',
    8192: 'AMDSMI_GPU_BLOCK_FUSE',
    16384: 'AMDSMI_GPU_BLOCK_MCA',
    32768: 'AMDSMI_GPU_BLOCK_VCN',
    65536: 'AMDSMI_GPU_BLOCK_JPEG',
    131072: 'AMDSMI_GPU_BLOCK_IH',
    262144: 'AMDSMI_GPU_BLOCK_MPIO',
    262144: 'AMDSMI_GPU_BLOCK_LAST',
}
AMDSMI_GPU_BLOCK_INVALID = 0
AMDSMI_GPU_BLOCK_FIRST = 1
AMDSMI_GPU_BLOCK_UMC = 1
AMDSMI_GPU_BLOCK_SDMA = 2
AMDSMI_GPU_BLOCK_GFX = 4
AMDSMI_GPU_BLOCK_MMHUB = 8
AMDSMI_GPU_BLOCK_ATHUB = 16
AMDSMI_GPU_BLOCK_PCIE_BIF = 32
AMDSMI_GPU_BLOCK_HDP = 64
AMDSMI_GPU_BLOCK_XGMI_WAFL = 128
AMDSMI_GPU_BLOCK_DF = 256
AMDSMI_GPU_BLOCK_SMN = 512
AMDSMI_GPU_BLOCK_SEM = 1024
AMDSMI_GPU_BLOCK_MP0 = 2048
AMDSMI_GPU_BLOCK_MP1 = 4096
AMDSMI_GPU_BLOCK_FUSE = 8192
AMDSMI_GPU_BLOCK_MCA = 16384
AMDSMI_GPU_BLOCK_VCN = 32768
AMDSMI_GPU_BLOCK_JPEG = 65536
AMDSMI_GPU_BLOCK_IH = 131072
AMDSMI_GPU_BLOCK_MPIO = 262144
AMDSMI_GPU_BLOCK_LAST = 262144
c__EA_amdsmi_gpu_block_t = ctypes.c_uint32 # enum
amdsmi_gpu_block_t = c__EA_amdsmi_gpu_block_t
amdsmi_gpu_block_t__enumvalues = c__EA_amdsmi_gpu_block_t__enumvalues

# values for enumeration 'c__EA_amdsmi_card_form_factor_t'
c__EA_amdsmi_card_form_factor_t__enumvalues = {
    0: 'AMDSMI_CARD_FORM_FACTOR_PCIE',
    1: 'AMDSMI_CARD_FORM_FACTOR_OAM',
    2: 'AMDSMI_CARD_FORM_FACTOR_CEM',
    3: 'AMDSMI_CARD_FORM_FACTOR_UNKNOWN',
}
AMDSMI_CARD_FORM_FACTOR_PCIE = 0
AMDSMI_CARD_FORM_FACTOR_OAM = 1
AMDSMI_CARD_FORM_FACTOR_CEM = 2
AMDSMI_CARD_FORM_FACTOR_UNKNOWN = 3
c__EA_amdsmi_card_form_factor_t = ctypes.c_uint32 # enum
amdsmi_card_form_factor_t = c__EA_amdsmi_card_form_factor_t
amdsmi_card_form_factor_t__enumvalues = c__EA_amdsmi_card_form_factor_t__enumvalues

# values for enumeration 'c__EA_amdsmi_metric_category_t'
c__EA_amdsmi_metric_category_t__enumvalues = {
    0: 'AMDSMI_METRIC_CATEGORY_ACC_COUNTER',
    1: 'AMDSMI_METRIC_CATEGORY_FREQUENCY',
    2: 'AMDSMI_METRIC_CATEGORY_ACTIVITY',
    3: 'AMDSMI_METRIC_CATEGORY_TEMPERATURE',
    4: 'AMDSMI_METRIC_CATEGORY_POWER',
    5: 'AMDSMI_METRIC_CATEGORY_ENERGY',
    6: 'AMDSMI_METRIC_CATEGORY_THROTTLE',
    7: 'AMDSMI_METRIC_CATEGORY_PCIE',
    8: 'AMDSMI_METRIC_CATEGORY_UNKNOWN',
}
AMDSMI_METRIC_CATEGORY_ACC_COUNTER = 0
AMDSMI_METRIC_CATEGORY_FREQUENCY = 1
AMDSMI_METRIC_CATEGORY_ACTIVITY = 2
AMDSMI_METRIC_CATEGORY_TEMPERATURE = 3
AMDSMI_METRIC_CATEGORY_POWER = 4
AMDSMI_METRIC_CATEGORY_ENERGY = 5
AMDSMI_METRIC_CATEGORY_THROTTLE = 6
AMDSMI_METRIC_CATEGORY_PCIE = 7
AMDSMI_METRIC_CATEGORY_UNKNOWN = 8
c__EA_amdsmi_metric_category_t = ctypes.c_uint32 # enum
amdsmi_metric_category_t = c__EA_amdsmi_metric_category_t
amdsmi_metric_category_t__enumvalues = c__EA_amdsmi_metric_category_t__enumvalues

# values for enumeration 'c__EA_amdsmi_metric_name_t'
c__EA_amdsmi_metric_name_t__enumvalues = {
    0: 'AMDSMI_METRIC_NAME_METRIC_ACC_COUNTER',
    1: 'AMDSMI_METRIC_NAME_FW_TIMESTAMP',
    2: 'AMDSMI_METRIC_NAME_CLK_GFX',
    3: 'AMDSMI_METRIC_NAME_CLK_SOC',
    4: 'AMDSMI_METRIC_NAME_CLK_MEM',
    5: 'AMDSMI_METRIC_NAME_CLK_VCLK',
    6: 'AMDSMI_METRIC_NAME_CLK_DCLK',
    7: 'AMDSMI_METRIC_NAME_USAGE_GFX',
    8: 'AMDSMI_METRIC_NAME_USAGE_MEM',
    9: 'AMDSMI_METRIC_NAME_USAGE_MM',
    10: 'AMDSMI_METRIC_NAME_USAGE_VCN',
    11: 'AMDSMI_METRIC_NAME_USAGE_JPEG',
    12: 'AMDSMI_METRIC_NAME_VOLT_GFX',
    13: 'AMDSMI_METRIC_NAME_VOLT_SOC',
    14: 'AMDSMI_METRIC_NAME_VOLT_MEM',
    15: 'AMDSMI_METRIC_NAME_TEMP_HOTSPOT_CURR',
    16: 'AMDSMI_METRIC_NAME_TEMP_HOTSPOT_LIMIT',
    17: 'AMDSMI_METRIC_NAME_TEMP_MEM_CURR',
    18: 'AMDSMI_METRIC_NAME_TEMP_MEM_LIMIT',
    19: 'AMDSMI_METRIC_NAME_TEMP_VR_CURR',
    20: 'AMDSMI_METRIC_NAME_TEMP_SHUTDOWN',
    21: 'AMDSMI_METRIC_NAME_POWER_CURR',
    22: 'AMDSMI_METRIC_NAME_POWER_LIMIT',
    23: 'AMDSMI_METRIC_NAME_ENERGY_SOCKET',
    24: 'AMDSMI_METRIC_NAME_ENERGY_CCD',
    25: 'AMDSMI_METRIC_NAME_ENERGY_XCD',
    26: 'AMDSMI_METRIC_NAME_ENERGY_AID',
    27: 'AMDSMI_METRIC_NAME_ENERGY_MEM',
    28: 'AMDSMI_METRIC_NAME_THROTTLE_SOCKET_ACTIVE',
    29: 'AMDSMI_METRIC_NAME_THROTTLE_VR_ACTIVE',
    30: 'AMDSMI_METRIC_NAME_THROTTLE_MEM_ACTIVE',
    31: 'AMDSMI_METRIC_NAME_PCIE_BANDWIDTH',
    32: 'AMDSMI_METRIC_NAME_PCIE_L0_TO_RECOVERY_COUNT',
    33: 'AMDSMI_METRIC_NAME_PCIE_REPLAY_COUNT',
    34: 'AMDSMI_METRIC_NAME_PCIE_REPLAY_ROLLOVER_COUNT',
    35: 'AMDSMI_METRIC_NAME_PCIE_NAK_SENT_COUNT',
    36: 'AMDSMI_METRIC_NAME_PCIE_NAK_RECEIVED_COUNT',
    37: 'AMDSMI_METRIC_NAME_CLK_GFX_MAX_LIMIT',
    38: 'AMDSMI_METRIC_NAME_CLK_SOC_MAX_LIMIT',
    39: 'AMDSMI_METRIC_NAME_CLK_MEM_MAX_LIMIT',
    40: 'AMDSMI_METRIC_NAME_CLK_VCLK_MAX_LIMIT',
    41: 'AMDSMI_METRIC_NAME_CLK_DCLK_MAX_LIMIT',
    42: 'AMDSMI_METRIC_NAME_CLK_GFX_MIN_LIMIT',
    43: 'AMDSMI_METRIC_NAME_CLK_SOC_MIN_LIMIT',
    44: 'AMDSMI_METRIC_NAME_CLK_MEM_MIN_LIMIT',
    45: 'AMDSMI_METRIC_NAME_CLK_VCLK_MIN_LIMIT',
    46: 'AMDSMI_METRIC_NAME_CLK_DCLK_MIN_LIMIT',
    47: 'AMDSMI_METRIC_NAME_CLK_GFX_LOCKED',
    48: 'AMDSMI_METRIC_NAME_CLK_GFX_DS_DISABLED',
    49: 'AMDSMI_METRIC_NAME_CLK_MEM_DS_DISABLED',
    50: 'AMDSMI_METRIC_NAME_CLK_SOC_DS_DISABLED',
    51: 'AMDSMI_METRIC_NAME_CLK_VCLK_DS_DISABLED',
    52: 'AMDSMI_METRIC_NAME_CLK_DCLK_DS_DISABLED',
    53: 'AMDSMI_METRIC_NAME_PCIE_LINK_SPEED',
    54: 'AMDSMI_METRIC_NAME_PCIE_LINK_WIDTH',
    55: 'AMDSMI_METRIC_NAME_UNKNOWN',
}
AMDSMI_METRIC_NAME_METRIC_ACC_COUNTER = 0
AMDSMI_METRIC_NAME_FW_TIMESTAMP = 1
AMDSMI_METRIC_NAME_CLK_GFX = 2
AMDSMI_METRIC_NAME_CLK_SOC = 3
AMDSMI_METRIC_NAME_CLK_MEM = 4
AMDSMI_METRIC_NAME_CLK_VCLK = 5
AMDSMI_METRIC_NAME_CLK_DCLK = 6
AMDSMI_METRIC_NAME_USAGE_GFX = 7
AMDSMI_METRIC_NAME_USAGE_MEM = 8
AMDSMI_METRIC_NAME_USAGE_MM = 9
AMDSMI_METRIC_NAME_USAGE_VCN = 10
AMDSMI_METRIC_NAME_USAGE_JPEG = 11
AMDSMI_METRIC_NAME_VOLT_GFX = 12
AMDSMI_METRIC_NAME_VOLT_SOC = 13
AMDSMI_METRIC_NAME_VOLT_MEM = 14
AMDSMI_METRIC_NAME_TEMP_HOTSPOT_CURR = 15
AMDSMI_METRIC_NAME_TEMP_HOTSPOT_LIMIT = 16
AMDSMI_METRIC_NAME_TEMP_MEM_CURR = 17
AMDSMI_METRIC_NAME_TEMP_MEM_LIMIT = 18
AMDSMI_METRIC_NAME_TEMP_VR_CURR = 19
AMDSMI_METRIC_NAME_TEMP_SHUTDOWN = 20
AMDSMI_METRIC_NAME_POWER_CURR = 21
AMDSMI_METRIC_NAME_POWER_LIMIT = 22
AMDSMI_METRIC_NAME_ENERGY_SOCKET = 23
AMDSMI_METRIC_NAME_ENERGY_CCD = 24
AMDSMI_METRIC_NAME_ENERGY_XCD = 25
AMDSMI_METRIC_NAME_ENERGY_AID = 26
AMDSMI_METRIC_NAME_ENERGY_MEM = 27
AMDSMI_METRIC_NAME_THROTTLE_SOCKET_ACTIVE = 28
AMDSMI_METRIC_NAME_THROTTLE_VR_ACTIVE = 29
AMDSMI_METRIC_NAME_THROTTLE_MEM_ACTIVE = 30
AMDSMI_METRIC_NAME_PCIE_BANDWIDTH = 31
AMDSMI_METRIC_NAME_PCIE_L0_TO_RECOVERY_COUNT = 32
AMDSMI_METRIC_NAME_PCIE_REPLAY_COUNT = 33
AMDSMI_METRIC_NAME_PCIE_REPLAY_ROLLOVER_COUNT = 34
AMDSMI_METRIC_NAME_PCIE_NAK_SENT_COUNT = 35
AMDSMI_METRIC_NAME_PCIE_NAK_RECEIVED_COUNT = 36
AMDSMI_METRIC_NAME_CLK_GFX_MAX_LIMIT = 37
AMDSMI_METRIC_NAME_CLK_SOC_MAX_LIMIT = 38
AMDSMI_METRIC_NAME_CLK_MEM_MAX_LIMIT = 39
AMDSMI_METRIC_NAME_CLK_VCLK_MAX_LIMIT = 40
AMDSMI_METRIC_NAME_CLK_DCLK_MAX_LIMIT = 41
AMDSMI_METRIC_NAME_CLK_GFX_MIN_LIMIT = 42
AMDSMI_METRIC_NAME_CLK_SOC_MIN_LIMIT = 43
AMDSMI_METRIC_NAME_CLK_MEM_MIN_LIMIT = 44
AMDSMI_METRIC_NAME_CLK_VCLK_MIN_LIMIT = 45
AMDSMI_METRIC_NAME_CLK_DCLK_MIN_LIMIT = 46
AMDSMI_METRIC_NAME_CLK_GFX_LOCKED = 47
AMDSMI_METRIC_NAME_CLK_GFX_DS_DISABLED = 48
AMDSMI_METRIC_NAME_CLK_MEM_DS_DISABLED = 49
AMDSMI_METRIC_NAME_CLK_SOC_DS_DISABLED = 50
AMDSMI_METRIC_NAME_CLK_VCLK_DS_DISABLED = 51
AMDSMI_METRIC_NAME_CLK_DCLK_DS_DISABLED = 52
AMDSMI_METRIC_NAME_PCIE_LINK_SPEED = 53
AMDSMI_METRIC_NAME_PCIE_LINK_WIDTH = 54
AMDSMI_METRIC_NAME_UNKNOWN = 55
c__EA_amdsmi_metric_name_t = ctypes.c_uint32 # enum
amdsmi_metric_name_t = c__EA_amdsmi_metric_name_t
amdsmi_metric_name_t__enumvalues = c__EA_amdsmi_metric_name_t__enumvalues

# values for enumeration 'c__EA_amdsmi_metric_unit_t'
c__EA_amdsmi_metric_unit_t__enumvalues = {
    0: 'AMDSMI_METRIC_UNIT_COUNTER',
    1: 'AMDSMI_METRIC_UNIT_UINT',
    2: 'AMDSMI_METRIC_UNIT_BOOL',
    3: 'AMDSMI_METRIC_UNIT_MHZ',
    4: 'AMDSMI_METRIC_UNIT_PERCENT',
    5: 'AMDSMI_METRIC_UNIT_MILLIVOLT',
    6: 'AMDSMI_METRIC_UNIT_CELSIUS',
    7: 'AMDSMI_METRIC_UNIT_WATT',
    8: 'AMDSMI_METRIC_UNIT_JOULE',
    9: 'AMDSMI_METRIC_UNIT_GBPS',
    10: 'AMDSMI_METRIC_UNIT_MBITPS',
    11: 'AMDSMI_METRIC_UNIT_PCIE_GEN',
    12: 'AMDSMI_METRIC_UNIT_PCIE_LANES',
    13: 'AMDSMI_METRIC_UNIT_UNKNOWN',
}
AMDSMI_METRIC_UNIT_COUNTER = 0
AMDSMI_METRIC_UNIT_UINT = 1
AMDSMI_METRIC_UNIT_BOOL = 2
AMDSMI_METRIC_UNIT_MHZ = 3
AMDSMI_METRIC_UNIT_PERCENT = 4
AMDSMI_METRIC_UNIT_MILLIVOLT = 5
AMDSMI_METRIC_UNIT_CELSIUS = 6
AMDSMI_METRIC_UNIT_WATT = 7
AMDSMI_METRIC_UNIT_JOULE = 8
AMDSMI_METRIC_UNIT_GBPS = 9
AMDSMI_METRIC_UNIT_MBITPS = 10
AMDSMI_METRIC_UNIT_PCIE_GEN = 11
AMDSMI_METRIC_UNIT_PCIE_LANES = 12
AMDSMI_METRIC_UNIT_UNKNOWN = 13
c__EA_amdsmi_metric_unit_t = ctypes.c_uint32 # enum
amdsmi_metric_unit_t = c__EA_amdsmi_metric_unit_t
amdsmi_metric_unit_t__enumvalues = c__EA_amdsmi_metric_unit_t__enumvalues

# values for enumeration 'c__EA_amdsmi_metric_type_t'
c__EA_amdsmi_metric_type_t__enumvalues = {
    1: 'AMDSMI_METRIC_TYPE_COUNTER',
    2: 'AMDSMI_METRIC_TYPE_CHIPLET',
    4: 'AMDSMI_METRIC_TYPE_INST',
    8: 'AMDSMI_METRIC_TYPE_ACC',
}
AMDSMI_METRIC_TYPE_COUNTER = 1
AMDSMI_METRIC_TYPE_CHIPLET = 2
AMDSMI_METRIC_TYPE_INST = 4
AMDSMI_METRIC_TYPE_ACC = 8
c__EA_amdsmi_metric_type_t = ctypes.c_uint32 # enum
amdsmi_metric_type_t = c__EA_amdsmi_metric_type_t
amdsmi_metric_type_t__enumvalues = c__EA_amdsmi_metric_type_t__enumvalues

# values for enumeration 'c__EA_amdsmi_memory_partition_type_t'
c__EA_amdsmi_memory_partition_type_t__enumvalues = {
    0: 'AMDSMI_MEMORY_PARTITION_UNKNOWN',
    1: 'AMDSMI_MEMORY_PARTITION_NPS1',
    2: 'AMDSMI_MEMORY_PARTITION_NPS2',
    4: 'AMDSMI_MEMORY_PARTITION_NPS4',
    8: 'AMDSMI_MEMORY_PARTITION_NPS8',
}
AMDSMI_MEMORY_PARTITION_UNKNOWN = 0
AMDSMI_MEMORY_PARTITION_NPS1 = 1
AMDSMI_MEMORY_PARTITION_NPS2 = 2
AMDSMI_MEMORY_PARTITION_NPS4 = 4
AMDSMI_MEMORY_PARTITION_NPS8 = 8
c__EA_amdsmi_memory_partition_type_t = ctypes.c_uint32 # enum
amdsmi_memory_partition_type_t = c__EA_amdsmi_memory_partition_type_t
amdsmi_memory_partition_type_t__enumvalues = c__EA_amdsmi_memory_partition_type_t__enumvalues

# values for enumeration 'c__EA_amdsmi_accelerator_partition_type_t'
c__EA_amdsmi_accelerator_partition_type_t__enumvalues = {
    0: 'AMDSMI_ACCELERATOR_PARTITION_INVALID',
    1: 'AMDSMI_ACCELERATOR_PARTITION_SPX',
    2: 'AMDSMI_ACCELERATOR_PARTITION_DPX',
    3: 'AMDSMI_ACCELERATOR_PARTITION_TPX',
    4: 'AMDSMI_ACCELERATOR_PARTITION_QPX',
    5: 'AMDSMI_ACCELERATOR_PARTITION_CPX',
    6: 'AMDSMI_ACCELERATOR_PARTITION_MAX',
}
AMDSMI_ACCELERATOR_PARTITION_INVALID = 0
AMDSMI_ACCELERATOR_PARTITION_SPX = 1
AMDSMI_ACCELERATOR_PARTITION_DPX = 2
AMDSMI_ACCELERATOR_PARTITION_TPX = 3
AMDSMI_ACCELERATOR_PARTITION_QPX = 4
AMDSMI_ACCELERATOR_PARTITION_CPX = 5
AMDSMI_ACCELERATOR_PARTITION_MAX = 6
c__EA_amdsmi_accelerator_partition_type_t = ctypes.c_uint32 # enum
amdsmi_accelerator_partition_type_t = c__EA_amdsmi_accelerator_partition_type_t
amdsmi_accelerator_partition_type_t__enumvalues = c__EA_amdsmi_accelerator_partition_type_t__enumvalues

# values for enumeration 'c__EA_amdsmi_accelerator_partition_resource_type_t'
c__EA_amdsmi_accelerator_partition_resource_type_t__enumvalues = {
    0: 'AMDSMI_ACCELERATOR_XCC',
    1: 'AMDSMI_ACCELERATOR_ENCODER',
    2: 'AMDSMI_ACCELERATOR_DECODER',
    3: 'AMDSMI_ACCELERATOR_DMA',
    4: 'AMDSMI_ACCELERATOR_JPEG',
    5: 'AMDSMI_ACCELERATOR_MAX',
}
AMDSMI_ACCELERATOR_XCC = 0
AMDSMI_ACCELERATOR_ENCODER = 1
AMDSMI_ACCELERATOR_DECODER = 2
AMDSMI_ACCELERATOR_DMA = 3
AMDSMI_ACCELERATOR_JPEG = 4
AMDSMI_ACCELERATOR_MAX = 5
c__EA_amdsmi_accelerator_partition_resource_type_t = ctypes.c_uint32 # enum
amdsmi_accelerator_partition_resource_type_t = c__EA_amdsmi_accelerator_partition_resource_type_t
amdsmi_accelerator_partition_resource_type_t__enumvalues = c__EA_amdsmi_accelerator_partition_resource_type_t__enumvalues

# values for enumeration 'c__EA_amdsmi_driver_model_type_t'
c__EA_amdsmi_driver_model_type_t__enumvalues = {
    0: 'AMDSMI_DRIVER_MODEL_TYPE_WDDM',
    1: 'AMDSMI_DRIVER_MODEL_TYPE_WDM',
    2: 'AMDSMI_DRIVER_MODEL_TYPE_MCDM',
    3: 'AMDSMI_DRIVER_MODEL_TYPE__MAX',
}
AMDSMI_DRIVER_MODEL_TYPE_WDDM = 0
AMDSMI_DRIVER_MODEL_TYPE_WDM = 1
AMDSMI_DRIVER_MODEL_TYPE_MCDM = 2
AMDSMI_DRIVER_MODEL_TYPE__MAX = 3
c__EA_amdsmi_driver_model_type_t = ctypes.c_uint32 # enum
amdsmi_driver_model_type_t = c__EA_amdsmi_driver_model_type_t
amdsmi_driver_model_type_t__enumvalues = c__EA_amdsmi_driver_model_type_t__enumvalues
class union_c__UA_amdsmi_bdf_t(Union):
    pass

class struct_bdf_(Structure):
    pass

struct_bdf_._pack_ = 1 # source:False
struct_bdf_._fields_ = [
    ('function_number', ctypes.c_uint64, 3),
    ('device_number', ctypes.c_uint64, 5),
    ('bus_number', ctypes.c_uint64, 8),
    ('domain_number', ctypes.c_uint64, 48),
]

union_c__UA_amdsmi_bdf_t._pack_ = 1 # source:False
union_c__UA_amdsmi_bdf_t._fields_ = [
    ('bdf', struct_bdf_),
    ('as_uint', ctypes.c_uint64),
]

amdsmi_bdf_t = union_c__UA_amdsmi_bdf_t
class struct_c__SA_amdsmi_pcie_info_t(Structure):
    pass

class struct_pcie_static_(Structure):
    pass

struct_pcie_static_._pack_ = 1 # source:False
struct_pcie_static_._fields_ = [
    ('max_pcie_width', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('max_pcie_speed', ctypes.c_uint32),
    ('pcie_interface_version', ctypes.c_uint32),
    ('slot_type', amdsmi_card_form_factor_t),
    ('max_pcie_interface_version', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('reserved', ctypes.c_uint64 * 9),
]

class struct_pcie_metric_(Structure):
    pass

struct_pcie_metric_._pack_ = 1 # source:False
struct_pcie_metric_._fields_ = [
    ('pcie_width', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('pcie_speed', ctypes.c_uint32),
    ('pcie_bandwidth', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pcie_replay_count', ctypes.c_uint64),
    ('pcie_l0_to_recovery_count', ctypes.c_uint64),
    ('pcie_replay_roll_over_count', ctypes.c_uint64),
    ('pcie_nak_sent_count', ctypes.c_uint64),
    ('pcie_nak_received_count', ctypes.c_uint64),
    ('pcie_lc_perf_other_end_recovery_count', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('reserved', ctypes.c_uint64 * 12),
]

struct_c__SA_amdsmi_pcie_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_pcie_info_t._fields_ = [
    ('pcie_static', struct_pcie_static_),
    ('pcie_metric', struct_pcie_metric_),
    ('reserved', ctypes.c_uint64 * 32),
]

amdsmi_pcie_info_t = struct_c__SA_amdsmi_pcie_info_t
class struct_c__SA_amdsmi_power_cap_info_t(Structure):
    pass

struct_c__SA_amdsmi_power_cap_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_power_cap_info_t._fields_ = [
    ('power_cap', ctypes.c_uint64),
    ('default_power_cap', ctypes.c_uint64),
    ('dpm_cap', ctypes.c_uint64),
    ('min_power_cap', ctypes.c_uint64),
    ('max_power_cap', ctypes.c_uint64),
    ('reserved', ctypes.c_uint64 * 3),
]

amdsmi_power_cap_info_t = struct_c__SA_amdsmi_power_cap_info_t
class struct_c__SA_amdsmi_vbios_info_t(Structure):
    pass

struct_c__SA_amdsmi_vbios_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_vbios_info_t._fields_ = [
    ('name', ctypes.c_char * 256),
    ('build_date', ctypes.c_char * 32),
    ('part_number', ctypes.c_char * 256),
    ('version', ctypes.c_char * 256),
    ('reserved', ctypes.c_uint64 * 68),
]

amdsmi_vbios_info_t = struct_c__SA_amdsmi_vbios_info_t
class struct_c__SA_amdsmi_gpu_cache_info_t(Structure):
    pass

class struct_cache_(Structure):
    pass

struct_cache_._pack_ = 1 # source:False
struct_cache_._fields_ = [
    ('cache_properties', ctypes.c_uint32),
    ('cache_size', ctypes.c_uint32),
    ('cache_level', ctypes.c_uint32),
    ('max_num_cu_shared', ctypes.c_uint32),
    ('num_cache_instance', ctypes.c_uint32),
    ('reserved', ctypes.c_uint32 * 3),
]

struct_c__SA_amdsmi_gpu_cache_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_gpu_cache_info_t._fields_ = [
    ('num_cache_types', ctypes.c_uint32),
    ('cache', struct_cache_ * 10),
    ('reserved', ctypes.c_uint32 * 15),
]

amdsmi_gpu_cache_info_t = struct_c__SA_amdsmi_gpu_cache_info_t
class struct_c__SA_amdsmi_fw_info_t(Structure):
    pass

class struct_c__SA_amdsmi_fw_info_t_0(Structure):
    pass

struct_c__SA_amdsmi_fw_info_t_0._pack_ = 1 # source:False
struct_c__SA_amdsmi_fw_info_t_0._fields_ = [
    ('fw_id', amdsmi_fw_block_t),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('fw_version', ctypes.c_uint64),
    ('reserved', ctypes.c_uint64 * 2),
]

struct_c__SA_amdsmi_fw_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_fw_info_t._fields_ = [
    ('num_fw_info', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 7),
    ('fw_info_list', struct_c__SA_amdsmi_fw_info_t_0 * 80),
    ('reserved', ctypes.c_uint64 * 7),
]

amdsmi_fw_info_t = struct_c__SA_amdsmi_fw_info_t
class struct_c__SA_amdsmi_asic_info_t(Structure):
    pass

struct_c__SA_amdsmi_asic_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_asic_info_t._fields_ = [
    ('market_name', ctypes.c_char * 256),
    ('vendor_name', ctypes.c_char * 256),
    ('asic_serial', ctypes.c_char * 256),
    ('reserved', ctypes.c_uint64 * 64),
    ('vendor_id', ctypes.c_uint32),
    ('subvendor_id', ctypes.c_uint32),
    ('device_id', ctypes.c_uint64),
    ('rev_id', ctypes.c_uint32),
    ('oam_id', ctypes.c_uint32),
    ('num_of_compute_units', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('target_graphics_version', ctypes.c_uint64),
    ('subsystem_id', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('reserved_2', ctypes.c_uint64 * 10),
]

amdsmi_asic_info_t = struct_c__SA_amdsmi_asic_info_t
class struct_c__SA_amdsmi_driver_info_t(Structure):
    pass

struct_c__SA_amdsmi_driver_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_driver_info_t._fields_ = [
    ('driver_version', ctypes.c_char * 256),
    ('driver_date', ctypes.c_char * 32),
    ('driver_name', ctypes.c_char * 256),
    ('reserved', ctypes.c_uint64 * 68),
]

amdsmi_driver_info_t = struct_c__SA_amdsmi_driver_info_t
class struct_c__SA_amdsmi_power_info_t(Structure):
    pass

struct_c__SA_amdsmi_power_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_power_info_t._fields_ = [
    ('socket_power', ctypes.c_uint64),
    ('gfx_voltage', ctypes.c_uint64),
    ('soc_voltage', ctypes.c_uint64),
    ('mem_voltage', ctypes.c_uint64),
    ('reserved', ctypes.c_uint64 * 4),
]

amdsmi_power_info_t = struct_c__SA_amdsmi_power_info_t
class struct_c__SA_amdsmi_engine_usage_t(Structure):
    pass

struct_c__SA_amdsmi_engine_usage_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_engine_usage_t._fields_ = [
    ('gfx_activity', ctypes.c_uint32),
    ('umc_activity', ctypes.c_uint32),
    ('mm_activity', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('reserved', ctypes.c_uint64 * 6),
]

amdsmi_engine_usage_t = struct_c__SA_amdsmi_engine_usage_t
class struct_c__SA_amdsmi_clk_info_t(Structure):
    pass

struct_c__SA_amdsmi_clk_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_clk_info_t._fields_ = [
    ('clk', ctypes.c_uint32),
    ('min_clk', ctypes.c_uint32),
    ('max_clk', ctypes.c_uint32),
    ('clk_locked', ctypes.c_ubyte),
    ('clk_deep_sleep', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('reserved', ctypes.c_uint64 * 2),
]

amdsmi_clk_info_t = struct_c__SA_amdsmi_clk_info_t
class struct_c__SA_amdsmi_error_count_t(Structure):
    pass

struct_c__SA_amdsmi_error_count_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_error_count_t._fields_ = [
    ('correctable_count', ctypes.c_uint64),
    ('uncorrectable_count', ctypes.c_uint64),
    ('deferred_count', ctypes.c_uint64),
    ('reserved', ctypes.c_uint64 * 5),
]

amdsmi_error_count_t = struct_c__SA_amdsmi_error_count_t
class struct_c__SA_amdsmi_ras_feature_t(Structure):
    pass

struct_c__SA_amdsmi_ras_feature_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_ras_feature_t._fields_ = [
    ('ras_eeprom_version', ctypes.c_uint32),
    ('supported_ecc_correction_schema', ctypes.c_uint32),
    ('reserved', ctypes.c_uint64 * 3),
]

amdsmi_ras_feature_t = struct_c__SA_amdsmi_ras_feature_t
class struct_c__SA_amdsmi_vf_handle_t(Structure):
    pass

struct_c__SA_amdsmi_vf_handle_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_vf_handle_t._fields_ = [
    ('handle', ctypes.c_uint64),
]

amdsmi_vf_handle_t = struct_c__SA_amdsmi_vf_handle_t
class struct_c__SA_amdsmi_event_entry_t(Structure):
    pass

struct_c__SA_amdsmi_event_entry_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_event_entry_t._fields_ = [
    ('fcn_id', amdsmi_vf_handle_t),
    ('dev_id', ctypes.c_uint64),
    ('timestamp', ctypes.c_uint64),
    ('data', ctypes.c_uint64),
    ('category', ctypes.c_uint32),
    ('subcode', ctypes.c_uint32),
    ('level', ctypes.c_uint32),
    ('date', ctypes.c_char * 32),
    ('message', ctypes.c_char * 256),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('reserved', ctypes.c_uint64 * 6),
]

amdsmi_event_entry_t = struct_c__SA_amdsmi_event_entry_t
class struct_c__SA_amdsmi_board_info_t(Structure):
    pass

struct_c__SA_amdsmi_board_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_board_info_t._fields_ = [
    ('model_number', ctypes.c_char * 256),
    ('product_serial', ctypes.c_char * 256),
    ('fru_id', ctypes.c_char * 256),
    ('product_name', ctypes.c_char * 256),
    ('manufacturer_name', ctypes.c_char * 256),
    ('reserved', ctypes.c_uint64 * 64),
]

amdsmi_board_info_t = struct_c__SA_amdsmi_board_info_t
class struct_c__SA_amdsmi_pf_fb_info_t(Structure):
    pass

struct_c__SA_amdsmi_pf_fb_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_pf_fb_info_t._fields_ = [
    ('total_fb_size', ctypes.c_uint32),
    ('pf_fb_reserved', ctypes.c_uint32),
    ('pf_fb_offset', ctypes.c_uint32),
    ('fb_alignment', ctypes.c_uint32),
    ('max_vf_fb_usable', ctypes.c_uint32),
    ('min_vf_fb_usable', ctypes.c_uint32),
    ('reserved', ctypes.c_uint64 * 5),
]

amdsmi_pf_fb_info_t = struct_c__SA_amdsmi_pf_fb_info_t
class struct_c__SA_amdsmi_vf_fb_info_t(Structure):
    pass

struct_c__SA_amdsmi_vf_fb_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_vf_fb_info_t._fields_ = [
    ('fb_offset', ctypes.c_uint32),
    ('fb_size', ctypes.c_uint32),
    ('reserved', ctypes.c_uint64 * 3),
]

amdsmi_vf_fb_info_t = struct_c__SA_amdsmi_vf_fb_info_t
class struct_c__SA_amdsmi_partition_info_t(Structure):
    pass

struct_c__SA_amdsmi_partition_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_partition_info_t._fields_ = [
    ('id', amdsmi_vf_handle_t),
    ('fb', amdsmi_vf_fb_info_t),
    ('reserved', ctypes.c_uint64 * 3),
]

amdsmi_partition_info_t = struct_c__SA_amdsmi_partition_info_t
class struct_c__SA_amdsmi_guard_info_t(Structure):
    pass

class struct_c__SA_amdsmi_guard_info_t_0(Structure):
    pass

struct_c__SA_amdsmi_guard_info_t_0._pack_ = 1 # source:False
struct_c__SA_amdsmi_guard_info_t_0._fields_ = [
    ('state', amdsmi_guard_state_t),
    ('amount', ctypes.c_uint32),
    ('interval', ctypes.c_uint64),
    ('threshold', ctypes.c_uint32),
    ('active', ctypes.c_uint32),
    ('reserved', ctypes.c_uint32 * 4),
]

struct_c__SA_amdsmi_guard_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_guard_info_t._fields_ = [
    ('enabled', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 7),
    ('guard', struct_c__SA_amdsmi_guard_info_t_0 * 4),
    ('reserved', ctypes.c_uint32 * 6),
]

amdsmi_guard_info_t = struct_c__SA_amdsmi_guard_info_t
class struct_c__SA_amdsmi_vf_info_t(Structure):
    pass

struct_c__SA_amdsmi_vf_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_vf_info_t._fields_ = [
    ('fb', amdsmi_vf_fb_info_t),
    ('gfx_timeslice', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('reserved', ctypes.c_uint64 * 27),
]

amdsmi_vf_info_t = struct_c__SA_amdsmi_vf_info_t
class struct_c__SA_amdsmi_sched_info_t(Structure):
    pass

struct_c__SA_amdsmi_sched_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_sched_info_t._fields_ = [
    ('flr_count', ctypes.c_uint64),
    ('boot_up_time', ctypes.c_uint64),
    ('shutdown_time', ctypes.c_uint64),
    ('reset_time', ctypes.c_uint64),
    ('state', amdsmi_vf_sched_state_t),
    ('last_boot_start', ctypes.c_char * 32),
    ('last_boot_end', ctypes.c_char * 32),
    ('last_shutdown_start', ctypes.c_char * 32),
    ('last_shutdown_end', ctypes.c_char * 32),
    ('last_reset_start', ctypes.c_char * 32),
    ('last_reset_end', ctypes.c_char * 32),
    ('current_active_time', ctypes.c_char * 32),
    ('current_running_time', ctypes.c_char * 32),
    ('total_active_time', ctypes.c_char * 32),
    ('total_running_time', ctypes.c_char * 32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('reserved', ctypes.c_uint64 * 11),
]

amdsmi_sched_info_t = struct_c__SA_amdsmi_sched_info_t
class struct_c__SA_amdsmi_vf_data_t(Structure):
    pass

struct_c__SA_amdsmi_vf_data_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_vf_data_t._fields_ = [
    ('sched', amdsmi_sched_info_t),
    ('guard', amdsmi_guard_info_t),
    ('reserved', ctypes.c_uint64 * 8),
]

amdsmi_vf_data_t = struct_c__SA_amdsmi_vf_data_t
class struct_c__SA_amdsmi_profile_caps_info_t(Structure):
    pass

struct_c__SA_amdsmi_profile_caps_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_profile_caps_info_t._fields_ = [
    ('total', ctypes.c_uint64),
    ('available', ctypes.c_uint64),
    ('optimal', ctypes.c_uint64),
    ('min_value', ctypes.c_uint64),
    ('max_value', ctypes.c_uint64),
    ('reserved', ctypes.c_uint64 * 2),
]

amdsmi_profile_caps_info_t = struct_c__SA_amdsmi_profile_caps_info_t
class struct_c__SA_amdsmi_profile_info_t(Structure):
    pass

class struct_c__SA_amdsmi_profile_info_t_0(Structure):
    pass

struct_c__SA_amdsmi_profile_info_t_0._pack_ = 1 # source:False
struct_c__SA_amdsmi_profile_info_t_0._fields_ = [
    ('vf_count', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('profile_caps', struct_c__SA_amdsmi_profile_caps_info_t * 4),
]

struct_c__SA_amdsmi_profile_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_profile_info_t._fields_ = [
    ('profile_count', ctypes.c_ubyte),
    ('current_profile_index', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 6),
    ('profiles', struct_c__SA_amdsmi_profile_info_t_0 * 16),
    ('reserved', ctypes.c_uint32 * 6),
]

amdsmi_profile_info_t = struct_c__SA_amdsmi_profile_info_t
class struct_c__SA_amdsmi_guest_data_t(Structure):
    pass

struct_c__SA_amdsmi_guest_data_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_guest_data_t._fields_ = [
    ('driver_version', ctypes.c_char * 64),
    ('fb_usage', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('reserved', ctypes.c_uint64 * 23),
]

amdsmi_guest_data_t = struct_c__SA_amdsmi_guest_data_t
class struct_c__SA_amdsmi_dfc_fw_header_t(Structure):
    pass

struct_c__SA_amdsmi_dfc_fw_header_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_dfc_fw_header_t._fields_ = [
    ('dfc_fw_version', ctypes.c_uint32),
    ('dfc_fw_total_entries', ctypes.c_uint32),
    ('dfc_gart_wr_guest_min', ctypes.c_uint32),
    ('dfc_gart_wr_guest_max', ctypes.c_uint32),
    ('reserved', ctypes.c_uint32 * 12),
]

amdsmi_dfc_fw_header_t = struct_c__SA_amdsmi_dfc_fw_header_t
class struct_c__SA_amdsmi_dfc_fw_white_list_t(Structure):
    pass

struct_c__SA_amdsmi_dfc_fw_white_list_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_dfc_fw_white_list_t._fields_ = [
    ('oldest', ctypes.c_uint32),
    ('latest', ctypes.c_uint32),
]

amdsmi_dfc_fw_white_list_t = struct_c__SA_amdsmi_dfc_fw_white_list_t
class struct_c__SA_amdsmi_dfc_fw_ta_uuid_t(Structure):
    pass

struct_c__SA_amdsmi_dfc_fw_ta_uuid_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_dfc_fw_ta_uuid_t._fields_ = [
    ('ta_uuid', ctypes.c_ubyte * 16),
]

amdsmi_dfc_fw_ta_uuid_t = struct_c__SA_amdsmi_dfc_fw_ta_uuid_t
class struct_c__SA_amdsmi_dfc_fw_data_t(Structure):
    pass

class union_c__SA_amdsmi_dfc_fw_data_t_0(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('white_list', struct_c__SA_amdsmi_dfc_fw_white_list_t * 16),
    ('ta_white_list', struct_c__SA_amdsmi_dfc_fw_ta_uuid_t * 8),
     ]

struct_c__SA_amdsmi_dfc_fw_data_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_dfc_fw_data_t._fields_ = [
    ('dfc_fw_type', ctypes.c_uint32),
    ('verification_enabled', ctypes.c_uint32),
    ('customer_ordinal', ctypes.c_uint32),
    ('reserved', ctypes.c_uint32 * 13),
    ('c__SA_amdsmi_dfc_fw_data_t_0', union_c__SA_amdsmi_dfc_fw_data_t_0),
    ('black_list', ctypes.c_uint32 * 64),
]

amdsmi_dfc_fw_data_t = struct_c__SA_amdsmi_dfc_fw_data_t
class struct_c__SA_amdsmi_dfc_fw_t(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('header', amdsmi_dfc_fw_header_t),
    ('data', struct_c__SA_amdsmi_dfc_fw_data_t * 9),
     ]

amdsmi_dfc_fw_t = struct_c__SA_amdsmi_dfc_fw_t
class struct_c__SA_amdsmi_eeprom_table_record_t(Structure):
    pass

class union_c__SA_amdsmi_eeprom_table_record_t_0(Union):
    pass

union_c__SA_amdsmi_eeprom_table_record_t_0._pack_ = 1 # source:False
union_c__SA_amdsmi_eeprom_table_record_t_0._fields_ = [
    ('bank', ctypes.c_ubyte),
    ('cu', ctypes.c_ubyte),
]

struct_c__SA_amdsmi_eeprom_table_record_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_eeprom_table_record_t._fields_ = [
    ('retired_page', ctypes.c_uint64),
    ('ts', ctypes.c_uint64),
    ('err_type', ctypes.c_ubyte),
    ('c__SA_amdsmi_eeprom_table_record_t_0', union_c__SA_amdsmi_eeprom_table_record_t_0),
    ('mem_channel', ctypes.c_ubyte),
    ('mcumc_id', ctypes.c_ubyte),
    ('reserved', ctypes.c_uint32 * 3),
]

amdsmi_eeprom_table_record_t = struct_c__SA_amdsmi_eeprom_table_record_t
class struct_c__SA_amdsmi_fw_load_error_record_t(Structure):
    pass

struct_c__SA_amdsmi_fw_load_error_record_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_fw_load_error_record_t._fields_ = [
    ('timestamp', ctypes.c_uint64),
    ('vf_idx', ctypes.c_uint32),
    ('fw_id', ctypes.c_uint32),
    ('status', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('reserved', ctypes.c_uint32 * 3),
]

amdsmi_fw_load_error_record_t = struct_c__SA_amdsmi_fw_load_error_record_t
class struct_c__SA_amdsmi_fw_error_record_t(Structure):
    pass

struct_c__SA_amdsmi_fw_error_record_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_fw_error_record_t._fields_ = [
    ('num_err_records', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 7),
    ('err_records', struct_c__SA_amdsmi_fw_load_error_record_t * 10),
    ('reserved', ctypes.c_uint64 * 7),
]

amdsmi_fw_error_record_t = struct_c__SA_amdsmi_fw_error_record_t
class struct_c__SA_amdsmi_link_metrics_t(Structure):
    pass

class struct_links_(Structure):
    pass

struct_links_._pack_ = 1 # source:False
struct_links_._fields_ = [
    ('bdf', amdsmi_bdf_t),
    ('bit_rate', ctypes.c_uint32),
    ('max_bandwidth', ctypes.c_uint32),
    ('link_type', amdsmi_link_type_t),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('read', ctypes.c_uint64),
    ('write', ctypes.c_uint64),
    ('reserved', ctypes.c_uint64 * 2),
]

struct_c__SA_amdsmi_link_metrics_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_link_metrics_t._fields_ = [
    ('num_links', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('links', struct_links_ * 64),
    ('reserved', ctypes.c_uint64 * 7),
]

amdsmi_link_metrics_t = struct_c__SA_amdsmi_link_metrics_t
class struct_c__SA_amdsmi_link_topology_t(Structure):
    pass

struct_c__SA_amdsmi_link_topology_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_link_topology_t._fields_ = [
    ('weight', ctypes.c_uint64),
    ('link_status', amdsmi_link_status_t),
    ('link_type', amdsmi_link_type_t),
    ('num_hops', ctypes.c_ubyte),
    ('fb_sharing', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('reserved', ctypes.c_uint32 * 10),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

amdsmi_link_topology_t = struct_c__SA_amdsmi_link_topology_t
class union_c__UA_amdsmi_xgmi_fb_sharing_caps_t(Union):
    pass

class struct_cap_(Structure):
    pass

struct_cap_._pack_ = 1 # source:False
struct_cap_._fields_ = [
    ('mode_custom_cap', ctypes.c_uint32, 1),
    ('mode_1_cap', ctypes.c_uint32, 1),
    ('mode_2_cap', ctypes.c_uint32, 1),
    ('mode_4_cap', ctypes.c_uint32, 1),
    ('mode_8_cap', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 27),
]

union_c__UA_amdsmi_xgmi_fb_sharing_caps_t._pack_ = 1 # source:False
union_c__UA_amdsmi_xgmi_fb_sharing_caps_t._fields_ = [
    ('cap', struct_cap_),
    ('xgmi_fb_sharing_cap_mask', ctypes.c_uint32),
]

amdsmi_xgmi_fb_sharing_caps_t = union_c__UA_amdsmi_xgmi_fb_sharing_caps_t
class struct_c__SA_amdsmi_vram_info_t(Structure):
    pass

struct_c__SA_amdsmi_vram_info_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_vram_info_t._fields_ = [
    ('vram_type', amdsmi_vram_type_t),
    ('vram_vendor', amdsmi_vram_vendor_t),
    ('vram_size', ctypes.c_uint32),
    ('vram_bit_width', ctypes.c_uint32),
    ('reserved', ctypes.c_uint64 * 6),
]

amdsmi_vram_info_t = struct_c__SA_amdsmi_vram_info_t
class struct_c__SA_amdsmi_metric_t(Structure):
    pass

struct_c__SA_amdsmi_metric_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_metric_t._fields_ = [
    ('unit', amdsmi_metric_unit_t),
    ('name', amdsmi_metric_name_t),
    ('category', amdsmi_metric_category_t),
    ('flags', ctypes.c_uint32),
    ('vf_mask', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('val', ctypes.c_uint64),
    ('reserved', ctypes.c_uint32 * 8),
]

amdsmi_metric_t = struct_c__SA_amdsmi_metric_t
class struct_c__SA_amdsmi_version_t(Structure):
    pass

struct_c__SA_amdsmi_version_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_version_t._fields_ = [
    ('major', ctypes.c_uint32),
    ('minor', ctypes.c_uint32),
    ('release', ctypes.c_uint32),
]

amdsmi_version_t = struct_c__SA_amdsmi_version_t
class union_c__UA_amdsmi_nps_caps_t(Union):
    pass

class struct_nps_flags_(Structure):
    pass

struct_nps_flags_._pack_ = 1 # source:False
struct_nps_flags_._fields_ = [
    ('nps1_cap', ctypes.c_uint32, 1),
    ('nps2_cap', ctypes.c_uint32, 1),
    ('nps4_cap', ctypes.c_uint32, 1),
    ('nps8_cap', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 28),
]

union_c__UA_amdsmi_nps_caps_t._pack_ = 1 # source:False
union_c__UA_amdsmi_nps_caps_t._fields_ = [
    ('nps_flags', struct_nps_flags_),
    ('nps_cap_mask', ctypes.c_uint32),
]

amdsmi_nps_caps_t = union_c__UA_amdsmi_nps_caps_t
class struct_c__SA_amdsmi_memory_partition_config_t(Structure):
    pass

class struct_numa_range_(Structure):
    pass

struct_numa_range_._pack_ = 1 # source:False
struct_numa_range_._fields_ = [
    ('memory_type', amdsmi_vram_type_t),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('start', ctypes.c_uint64),
    ('end', ctypes.c_uint64),
]

struct_c__SA_amdsmi_memory_partition_config_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_memory_partition_config_t._fields_ = [
    ('partition_caps', amdsmi_nps_caps_t),
    ('mp_mode', amdsmi_memory_partition_type_t),
    ('num_numa_ranges', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('numa_range', struct_numa_range_ * 32),
    ('reserved', ctypes.c_uint64 * 11),
]

amdsmi_memory_partition_config_t = struct_c__SA_amdsmi_memory_partition_config_t
class struct_c__SA_amdsmi_accelerator_partition_profile_t(Structure):
    pass

struct_c__SA_amdsmi_accelerator_partition_profile_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_accelerator_partition_profile_t._fields_ = [
    ('profile_type', amdsmi_accelerator_partition_type_t),
    ('num_partitions', ctypes.c_uint32),
    ('memory_caps', amdsmi_nps_caps_t),
    ('profile_index', ctypes.c_uint32),
    ('num_resources', ctypes.c_uint32),
    ('resources', ctypes.c_uint32 * 32 * 8),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('reserved', ctypes.c_uint64 * 13),
]

amdsmi_accelerator_partition_profile_t = struct_c__SA_amdsmi_accelerator_partition_profile_t
class struct_c__SA_amdsmi_accelerator_partition_resource_profile_t(Structure):
    pass

struct_c__SA_amdsmi_accelerator_partition_resource_profile_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_accelerator_partition_resource_profile_t._fields_ = [
    ('profile_index', ctypes.c_uint32),
    ('resource_type', amdsmi_accelerator_partition_resource_type_t),
    ('partition_resource', ctypes.c_uint32),
    ('num_partitions_share_resource', ctypes.c_uint32),
    ('reserved', ctypes.c_uint64 * 6),
]

amdsmi_accelerator_partition_resource_profile_t = struct_c__SA_amdsmi_accelerator_partition_resource_profile_t
class struct_c__SA_amdsmi_accelerator_partition_profile_config_t(Structure):
    pass

struct_c__SA_amdsmi_accelerator_partition_profile_config_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_accelerator_partition_profile_config_t._fields_ = [
    ('num_profiles', ctypes.c_uint32),
    ('num_resource_profiles', ctypes.c_uint32),
    ('resource_profiles', struct_c__SA_amdsmi_accelerator_partition_resource_profile_t * 32),
    ('default_profile_index', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('profiles', struct_c__SA_amdsmi_accelerator_partition_profile_t * 32),
    ('reserved', ctypes.c_uint64 * 30),
]

amdsmi_accelerator_partition_profile_config_t = struct_c__SA_amdsmi_accelerator_partition_profile_config_t
class struct_c__SA_amdsmi_dpm_policy_entry_t(Structure):
    pass

struct_c__SA_amdsmi_dpm_policy_entry_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_dpm_policy_entry_t._fields_ = [
    ('policy_id', ctypes.c_uint32),
    ('policy_description', ctypes.c_char * 32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('reserved', ctypes.c_uint64 * 3),
]

amdsmi_dpm_policy_entry_t = struct_c__SA_amdsmi_dpm_policy_entry_t
class struct_c__SA_amdsmi_dpm_policy_t(Structure):
    pass

struct_c__SA_amdsmi_dpm_policy_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_dpm_policy_t._fields_ = [
    ('num_supported', ctypes.c_uint32),
    ('cur', ctypes.c_uint32),
    ('policies', struct_c__SA_amdsmi_dpm_policy_entry_t * 32),
    ('reserved', ctypes.c_uint64 * 7),
]

amdsmi_dpm_policy_t = struct_c__SA_amdsmi_dpm_policy_t
class struct_c__SA_amdsmi_cper_guid_t(Structure):
    pass

struct_c__SA_amdsmi_cper_guid_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_cper_guid_t._fields_ = [
    ('b', ctypes.c_ubyte * 16),
]

amdsmi_cper_guid_t = struct_c__SA_amdsmi_cper_guid_t

# values for enumeration 'c__EA_amdsmi_cper_sev_t'
c__EA_amdsmi_cper_sev_t__enumvalues = {
    0: 'AMDSMI_CPER_SEV_NON_FATAL_UNCORRECTED',
    1: 'AMDSMI_CPER_SEV_FATAL',
    2: 'AMDSMI_CPER_SEV_NON_FATAL_CORRECTED',
    3: 'AMDSMI_CPER_SEV_NUM',
    10: 'AMDSMI_CPER_SEV_UNUSED',
}
AMDSMI_CPER_SEV_NON_FATAL_UNCORRECTED = 0
AMDSMI_CPER_SEV_FATAL = 1
AMDSMI_CPER_SEV_NON_FATAL_CORRECTED = 2
AMDSMI_CPER_SEV_NUM = 3
AMDSMI_CPER_SEV_UNUSED = 10
c__EA_amdsmi_cper_sev_t = ctypes.c_uint32 # enum
amdsmi_cper_sev_t = c__EA_amdsmi_cper_sev_t
amdsmi_cper_sev_t__enumvalues = c__EA_amdsmi_cper_sev_t__enumvalues
class struct_c__SA_amdsmi_cper_timestamp_t(Structure):
    pass

struct_c__SA_amdsmi_cper_timestamp_t._pack_ = 1 # source:False
struct_c__SA_amdsmi_cper_timestamp_t._fields_ = [
    ('seconds', ctypes.c_ubyte),
    ('minutes', ctypes.c_ubyte),
    ('hours', ctypes.c_ubyte),
    ('flag', ctypes.c_ubyte),
    ('day', ctypes.c_ubyte),
    ('month', ctypes.c_ubyte),
    ('year', ctypes.c_ubyte),
    ('century', ctypes.c_ubyte),
]

amdsmi_cper_timestamp_t = struct_c__SA_amdsmi_cper_timestamp_t
class struct_c__SA_amdsmi_cper_hdr(Structure):
    pass

class union_c__SA_amdsmi_cper_hdr_0(Union):
    pass

class struct_c__SA_amdsmi_cper_hdr_0_0(Structure):
    pass

struct_c__SA_amdsmi_cper_hdr_0_0._pack_ = 1 # source:False
struct_c__SA_amdsmi_cper_hdr_0_0._fields_ = [
    ('platform_id', ctypes.c_uint32, 1),
    ('timestamp', ctypes.c_uint32, 1),
    ('partition_id', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 29),
]

union_c__SA_amdsmi_cper_hdr_0._pack_ = 1 # source:False
union_c__SA_amdsmi_cper_hdr_0._fields_ = [
    ('valid_bits', struct_c__SA_amdsmi_cper_hdr_0_0),
    ('valid_mask', ctypes.c_uint32),
]

struct_c__SA_amdsmi_cper_hdr._pack_ = 1 # source:False
struct_c__SA_amdsmi_cper_hdr._fields_ = [
    ('signature', ctypes.c_char * 4),
    ('revision', ctypes.c_uint16),
    ('signature_end', ctypes.c_uint32),
    ('sec_cnt', ctypes.c_uint16),
    ('error_severity', amdsmi_cper_sev_t),
    ('c__SA_amdsmi_cper_hdr_0', union_c__SA_amdsmi_cper_hdr_0),
    ('record_length', ctypes.c_uint32),
    ('timestamp', amdsmi_cper_timestamp_t),
    ('platform_id', ctypes.c_char * 16),
    ('partition_id', amdsmi_cper_guid_t),
    ('creator_id', ctypes.c_char * 16),
    ('notify_type', amdsmi_cper_guid_t),
    ('record_id', ctypes.c_char * 8),
    ('flags', ctypes.c_uint32),
    ('persistence_info', ctypes.c_uint64),
    ('reserved', ctypes.c_ubyte * 12),
]

amdsmi_cper_hdr = struct_c__SA_amdsmi_cper_hdr
uint64_t = ctypes.c_uint64
amdsmi_init = _libraries['libamdsmi.so'].amdsmi_init
amdsmi_init.restype = amdsmi_status_t
amdsmi_init.argtypes = [uint64_t]
amdsmi_shut_down = _libraries['libamdsmi.so'].amdsmi_shut_down
amdsmi_shut_down.restype = amdsmi_status_t
amdsmi_shut_down.argtypes = []
amdsmi_get_processor_handles = _libraries['libamdsmi.so'].amdsmi_get_processor_handles
amdsmi_get_processor_handles.restype = amdsmi_status_t
amdsmi_get_processor_handles.argtypes = [amdsmi_socket_handle, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.POINTER(None))]
amdsmi_get_processor_type = _libraries['libamdsmi.so'].amdsmi_get_processor_type
amdsmi_get_processor_type.restype = amdsmi_status_t
amdsmi_get_processor_type.argtypes = [amdsmi_processor_handle, ctypes.POINTER(c__EA_processor_type_t)]
amdsmi_get_socket_handles = _libraries['libamdsmi.so'].amdsmi_get_socket_handles
amdsmi_get_socket_handles.restype = amdsmi_status_t
amdsmi_get_socket_handles.argtypes = [ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.POINTER(None))]
size_t = ctypes.c_uint64
amdsmi_get_socket_info = _libraries['libamdsmi.so'].amdsmi_get_socket_info
amdsmi_get_socket_info.restype = amdsmi_status_t
amdsmi_get_socket_info.argtypes = [amdsmi_socket_handle, size_t, ctypes.POINTER(ctypes.c_char)]
amdsmi_get_processor_handle_from_bdf = _libraries['libamdsmi.so'].amdsmi_get_processor_handle_from_bdf
amdsmi_get_processor_handle_from_bdf.restype = amdsmi_status_t
amdsmi_get_processor_handle_from_bdf.argtypes = [amdsmi_bdf_t, ctypes.POINTER(ctypes.POINTER(None))]
amdsmi_get_index_from_processor_handle = _libraries['libamdsmi.so'].amdsmi_get_index_from_processor_handle
amdsmi_get_index_from_processor_handle.restype = amdsmi_status_t
amdsmi_get_index_from_processor_handle.argtypes = [amdsmi_processor_handle, ctypes.POINTER(ctypes.c_uint32)]
amdsmi_get_vf_handle_from_bdf = _libraries['libamdsmi.so'].amdsmi_get_vf_handle_from_bdf
amdsmi_get_vf_handle_from_bdf.restype = amdsmi_status_t
amdsmi_get_vf_handle_from_bdf.argtypes = [amdsmi_bdf_t, ctypes.POINTER(struct_c__SA_amdsmi_vf_handle_t)]
amdsmi_get_gpu_device_bdf = _libraries['libamdsmi.so'].amdsmi_get_gpu_device_bdf
amdsmi_get_gpu_device_bdf.restype = amdsmi_status_t
amdsmi_get_gpu_device_bdf.argtypes = [amdsmi_processor_handle, ctypes.POINTER(union_c__UA_amdsmi_bdf_t)]
uint32_t = ctypes.c_uint32
amdsmi_get_processor_handle_from_index = _libraries['libamdsmi.so'].amdsmi_get_processor_handle_from_index
amdsmi_get_processor_handle_from_index.restype = amdsmi_status_t
amdsmi_get_processor_handle_from_index.argtypes = [uint32_t, ctypes.POINTER(ctypes.POINTER(None))]
amdsmi_get_vf_bdf = _libraries['libamdsmi.so'].amdsmi_get_vf_bdf
amdsmi_get_vf_bdf.restype = amdsmi_status_t
amdsmi_get_vf_bdf.argtypes = [amdsmi_vf_handle_t, ctypes.POINTER(union_c__UA_amdsmi_bdf_t)]
amdsmi_get_vf_handle_from_vf_index = _libraries['libamdsmi.so'].amdsmi_get_vf_handle_from_vf_index
amdsmi_get_vf_handle_from_vf_index.restype = amdsmi_status_t
amdsmi_get_vf_handle_from_vf_index.argtypes = [amdsmi_processor_handle, uint32_t, ctypes.POINTER(struct_c__SA_amdsmi_vf_handle_t)]
amdsmi_get_vf_handle_from_uuid = _libraries['libamdsmi.so'].amdsmi_get_vf_handle_from_uuid
amdsmi_get_vf_handle_from_uuid.restype = amdsmi_status_t
amdsmi_get_vf_handle_from_uuid.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_c__SA_amdsmi_vf_handle_t)]
amdsmi_get_processor_handle_from_uuid = _libraries['libamdsmi.so'].amdsmi_get_processor_handle_from_uuid
amdsmi_get_processor_handle_from_uuid.restype = amdsmi_status_t
amdsmi_get_processor_handle_from_uuid.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.POINTER(None))]
amdsmi_get_gpu_device_uuid = _libraries['libamdsmi.so'].amdsmi_get_gpu_device_uuid
amdsmi_get_gpu_device_uuid.restype = amdsmi_status_t
amdsmi_get_gpu_device_uuid.argtypes = [amdsmi_processor_handle, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_char)]
amdsmi_get_vf_uuid = _libraries['libamdsmi.so'].amdsmi_get_vf_uuid
amdsmi_get_vf_uuid.restype = amdsmi_status_t
amdsmi_get_vf_uuid.argtypes = [amdsmi_vf_handle_t, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_char)]
amdsmi_get_gpu_driver_info = _libraries['libamdsmi.so'].amdsmi_get_gpu_driver_info
amdsmi_get_gpu_driver_info.restype = amdsmi_status_t
amdsmi_get_gpu_driver_info.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_driver_info_t)]
amdsmi_get_gpu_driver_model = _libraries['libamdsmi.so'].amdsmi_get_gpu_driver_model
amdsmi_get_gpu_driver_model.restype = amdsmi_status_t
amdsmi_get_gpu_driver_model.argtypes = [amdsmi_processor_handle, ctypes.POINTER(c__EA_amdsmi_driver_model_type_t)]
amdsmi_get_lib_version = _libraries['libamdsmi.so'].amdsmi_get_lib_version
amdsmi_get_lib_version.restype = amdsmi_status_t
amdsmi_get_lib_version.argtypes = [ctypes.POINTER(struct_c__SA_amdsmi_version_t)]
amdsmi_get_gpu_asic_info = _libraries['libamdsmi.so'].amdsmi_get_gpu_asic_info
amdsmi_get_gpu_asic_info.restype = amdsmi_status_t
amdsmi_get_gpu_asic_info.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_asic_info_t)]
amdsmi_get_gpu_vram_info = _libraries['libamdsmi.so'].amdsmi_get_gpu_vram_info
amdsmi_get_gpu_vram_info.restype = amdsmi_status_t
amdsmi_get_gpu_vram_info.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_vram_info_t)]
amdsmi_get_power_cap_info = _libraries['libamdsmi.so'].amdsmi_get_power_cap_info
amdsmi_get_power_cap_info.restype = amdsmi_status_t
amdsmi_get_power_cap_info.argtypes = [amdsmi_processor_handle, uint32_t, ctypes.POINTER(struct_c__SA_amdsmi_power_cap_info_t)]
amdsmi_get_pcie_info = _libraries['libamdsmi.so'].amdsmi_get_pcie_info
amdsmi_get_pcie_info.restype = amdsmi_status_t
amdsmi_get_pcie_info.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_pcie_info_t)]
amdsmi_get_fb_layout = _libraries['libamdsmi.so'].amdsmi_get_fb_layout
amdsmi_get_fb_layout.restype = amdsmi_status_t
amdsmi_get_fb_layout.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_pf_fb_info_t)]
amdsmi_get_gpu_vbios_info = _libraries['libamdsmi.so'].amdsmi_get_gpu_vbios_info
amdsmi_get_gpu_vbios_info.restype = amdsmi_status_t
amdsmi_get_gpu_vbios_info.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_vbios_info_t)]
amdsmi_get_gpu_board_info = _libraries['libamdsmi.so'].amdsmi_get_gpu_board_info
amdsmi_get_gpu_board_info.restype = amdsmi_status_t
amdsmi_get_gpu_board_info.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_board_info_t)]
amdsmi_get_fw_info = _libraries['libamdsmi.so'].amdsmi_get_fw_info
amdsmi_get_fw_info.restype = amdsmi_status_t
amdsmi_get_fw_info.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_fw_info_t)]
amdsmi_get_fw_error_records = _libraries['libamdsmi.so'].amdsmi_get_fw_error_records
amdsmi_get_fw_error_records.restype = amdsmi_status_t
amdsmi_get_fw_error_records.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_fw_error_record_t)]
amdsmi_get_dfc_fw_table = _libraries['libamdsmi.so'].amdsmi_get_dfc_fw_table
amdsmi_get_dfc_fw_table.restype = amdsmi_status_t
amdsmi_get_dfc_fw_table.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_dfc_fw_t)]
amdsmi_get_gpu_activity = _libraries['libamdsmi.so'].amdsmi_get_gpu_activity
amdsmi_get_gpu_activity.restype = amdsmi_status_t
amdsmi_get_gpu_activity.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_engine_usage_t)]
amdsmi_get_power_info = _libraries['libamdsmi.so'].amdsmi_get_power_info
amdsmi_get_power_info.restype = amdsmi_status_t
amdsmi_get_power_info.argtypes = [amdsmi_processor_handle, uint32_t, ctypes.POINTER(struct_c__SA_amdsmi_power_info_t)]
amdsmi_set_power_cap = _libraries['libamdsmi.so'].amdsmi_set_power_cap
amdsmi_set_power_cap.restype = amdsmi_status_t
amdsmi_set_power_cap.argtypes = [amdsmi_processor_handle, uint32_t, uint64_t]
amdsmi_is_gpu_power_management_enabled = _libraries['libamdsmi.so'].amdsmi_is_gpu_power_management_enabled
amdsmi_is_gpu_power_management_enabled.restype = amdsmi_status_t
amdsmi_is_gpu_power_management_enabled.argtypes = [amdsmi_processor_handle, ctypes.POINTER(ctypes.c_bool)]
amdsmi_get_clock_info = _libraries['libamdsmi.so'].amdsmi_get_clock_info
amdsmi_get_clock_info.restype = amdsmi_status_t
amdsmi_get_clock_info.argtypes = [amdsmi_processor_handle, amdsmi_clk_type_t, ctypes.POINTER(struct_c__SA_amdsmi_clk_info_t)]
amdsmi_get_temp_metric = _libraries['libamdsmi.so'].amdsmi_get_temp_metric
amdsmi_get_temp_metric.restype = amdsmi_status_t
amdsmi_get_temp_metric.argtypes = [amdsmi_processor_handle, amdsmi_temperature_type_t, amdsmi_temperature_metric_t, ctypes.POINTER(ctypes.c_int64)]
amdsmi_get_gpu_cache_info = _libraries['libamdsmi.so'].amdsmi_get_gpu_cache_info
amdsmi_get_gpu_cache_info.restype = amdsmi_status_t
amdsmi_get_gpu_cache_info.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_gpu_cache_info_t)]
amdsmi_get_gpu_metrics = _libraries['libamdsmi.so'].amdsmi_get_gpu_metrics
amdsmi_get_gpu_metrics.restype = amdsmi_status_t
amdsmi_get_gpu_metrics.argtypes = [amdsmi_processor_handle, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_c__SA_amdsmi_metric_t)]
amdsmi_get_soc_pstate = _libraries['libamdsmi.so'].amdsmi_get_soc_pstate
amdsmi_get_soc_pstate.restype = amdsmi_status_t
amdsmi_get_soc_pstate.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_dpm_policy_t)]
amdsmi_set_soc_pstate = _libraries['libamdsmi.so'].amdsmi_set_soc_pstate
amdsmi_set_soc_pstate.restype = amdsmi_status_t
amdsmi_set_soc_pstate.argtypes = [amdsmi_processor_handle, uint32_t]
amdsmi_get_gpu_total_ecc_count = _libraries['libamdsmi.so'].amdsmi_get_gpu_total_ecc_count
amdsmi_get_gpu_total_ecc_count.restype = amdsmi_status_t
amdsmi_get_gpu_total_ecc_count.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_error_count_t)]
amdsmi_get_gpu_ecc_count = _libraries['libamdsmi.so'].amdsmi_get_gpu_ecc_count
amdsmi_get_gpu_ecc_count.restype = amdsmi_status_t
amdsmi_get_gpu_ecc_count.argtypes = [amdsmi_processor_handle, amdsmi_gpu_block_t, ctypes.POINTER(struct_c__SA_amdsmi_error_count_t)]
amdsmi_get_gpu_ecc_enabled = _libraries['libamdsmi.so'].amdsmi_get_gpu_ecc_enabled
amdsmi_get_gpu_ecc_enabled.restype = amdsmi_status_t
amdsmi_get_gpu_ecc_enabled.argtypes = [amdsmi_processor_handle, ctypes.POINTER(ctypes.c_uint64)]
amdsmi_get_gpu_bad_page_info = _libraries['libamdsmi.so'].amdsmi_get_gpu_bad_page_info
amdsmi_get_gpu_bad_page_info.restype = amdsmi_status_t
amdsmi_get_gpu_bad_page_info.argtypes = [amdsmi_processor_handle, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(struct_c__SA_amdsmi_eeprom_table_record_t)]
amdsmi_get_gpu_ras_feature_info = _libraries['libamdsmi.so'].amdsmi_get_gpu_ras_feature_info
amdsmi_get_gpu_ras_feature_info.restype = amdsmi_status_t
amdsmi_get_gpu_ras_feature_info.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_ras_feature_t)]
amdsmi_get_num_vf = _libraries['libamdsmi.so'].amdsmi_get_num_vf
amdsmi_get_num_vf.restype = amdsmi_status_t
amdsmi_get_num_vf.argtypes = [amdsmi_processor_handle, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_uint32)]
amdsmi_set_num_vf = _libraries['libamdsmi.so'].amdsmi_set_num_vf
amdsmi_set_num_vf.restype = amdsmi_status_t
amdsmi_set_num_vf.argtypes = [amdsmi_processor_handle, uint32_t]
amdsmi_get_vf_partition_info = _libraries['libamdsmi.so'].amdsmi_get_vf_partition_info
amdsmi_get_vf_partition_info.restype = amdsmi_status_t
amdsmi_get_vf_partition_info.argtypes = [amdsmi_processor_handle, ctypes.c_uint32, ctypes.POINTER(struct_c__SA_amdsmi_partition_info_t)]
amdsmi_get_vf_info = _libraries['libamdsmi.so'].amdsmi_get_vf_info
amdsmi_get_vf_info.restype = amdsmi_status_t
amdsmi_get_vf_info.argtypes = [amdsmi_vf_handle_t, ctypes.POINTER(struct_c__SA_amdsmi_vf_info_t)]
amdsmi_get_vf_data = _libraries['libamdsmi.so'].amdsmi_get_vf_data
amdsmi_get_vf_data.restype = amdsmi_status_t
amdsmi_get_vf_data.argtypes = [amdsmi_vf_handle_t, ctypes.POINTER(struct_c__SA_amdsmi_vf_data_t)]
amdsmi_event_create = _libraries['libamdsmi.so'].amdsmi_event_create
amdsmi_event_create.restype = amdsmi_status_t
amdsmi_event_create.argtypes = [ctypes.POINTER(ctypes.POINTER(None)), uint32_t, uint64_t, ctypes.POINTER(ctypes.POINTER(None))]
int64_t = ctypes.c_int64
amdsmi_event_read = _libraries['libamdsmi.so'].amdsmi_event_read
amdsmi_event_read.restype = amdsmi_status_t
amdsmi_event_read.argtypes = [amdsmi_event_set, int64_t, ctypes.POINTER(struct_c__SA_amdsmi_event_entry_t)]
amdsmi_event_destroy = _libraries['libamdsmi.so'].amdsmi_event_destroy
amdsmi_event_destroy.restype = amdsmi_status_t
amdsmi_event_destroy.argtypes = [amdsmi_event_set]
amdsmi_get_guest_data = _libraries['libamdsmi.so'].amdsmi_get_guest_data
amdsmi_get_guest_data.restype = amdsmi_status_t
amdsmi_get_guest_data.argtypes = [amdsmi_vf_handle_t, ctypes.POINTER(struct_c__SA_amdsmi_guest_data_t)]
amdsmi_get_vf_fw_info = _libraries['libamdsmi.so'].amdsmi_get_vf_fw_info
amdsmi_get_vf_fw_info.restype = amdsmi_status_t
amdsmi_get_vf_fw_info.argtypes = [amdsmi_vf_handle_t, ctypes.POINTER(struct_c__SA_amdsmi_fw_info_t)]
amdsmi_get_partition_profile_info = _libraries['libamdsmi.so'].amdsmi_get_partition_profile_info
amdsmi_get_partition_profile_info.restype = amdsmi_status_t
amdsmi_get_partition_profile_info.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_profile_info_t)]
amdsmi_get_link_metrics = _libraries['libamdsmi.so'].amdsmi_get_link_metrics
amdsmi_get_link_metrics.restype = amdsmi_status_t
amdsmi_get_link_metrics.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_link_metrics_t)]
amdsmi_get_link_topology = _libraries['libamdsmi.so'].amdsmi_get_link_topology
amdsmi_get_link_topology.restype = amdsmi_status_t
amdsmi_get_link_topology.argtypes = [amdsmi_processor_handle, amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_link_topology_t)]
amdsmi_get_xgmi_fb_sharing_caps = _libraries['libamdsmi.so'].amdsmi_get_xgmi_fb_sharing_caps
amdsmi_get_xgmi_fb_sharing_caps.restype = amdsmi_status_t
amdsmi_get_xgmi_fb_sharing_caps.argtypes = [amdsmi_processor_handle, ctypes.POINTER(union_c__UA_amdsmi_xgmi_fb_sharing_caps_t)]
amdsmi_get_xgmi_fb_sharing_mode_info = _libraries['libamdsmi.so'].amdsmi_get_xgmi_fb_sharing_mode_info
amdsmi_get_xgmi_fb_sharing_mode_info.restype = amdsmi_status_t
amdsmi_get_xgmi_fb_sharing_mode_info.argtypes = [amdsmi_processor_handle, amdsmi_processor_handle, amdsmi_xgmi_fb_sharing_mode_t, ctypes.POINTER(ctypes.c_ubyte)]
amdsmi_set_xgmi_fb_sharing_mode = _libraries['libamdsmi.so'].amdsmi_set_xgmi_fb_sharing_mode
amdsmi_set_xgmi_fb_sharing_mode.restype = amdsmi_status_t
amdsmi_set_xgmi_fb_sharing_mode.argtypes = [amdsmi_processor_handle, amdsmi_xgmi_fb_sharing_mode_t]
amdsmi_set_xgmi_fb_sharing_mode_v2 = _libraries['libamdsmi.so'].amdsmi_set_xgmi_fb_sharing_mode_v2
amdsmi_set_xgmi_fb_sharing_mode_v2.restype = amdsmi_status_t
amdsmi_set_xgmi_fb_sharing_mode_v2.argtypes = [ctypes.POINTER(ctypes.POINTER(None)), uint32_t, amdsmi_xgmi_fb_sharing_mode_t]
amdsmi_clear_vf_fb = _libraries['libamdsmi.so'].amdsmi_clear_vf_fb
amdsmi_clear_vf_fb.restype = amdsmi_status_t
amdsmi_clear_vf_fb.argtypes = [amdsmi_vf_handle_t]
amdsmi_status_code_to_string = _libraries['libamdsmi.so'].amdsmi_status_code_to_string
amdsmi_status_code_to_string.restype = amdsmi_status_t
amdsmi_status_code_to_string.argtypes = [amdsmi_status_t, ctypes.POINTER(ctypes.POINTER(ctypes.c_char))]
amdsmi_get_gpu_memory_partition_config = _libraries['libamdsmi.so'].amdsmi_get_gpu_memory_partition_config
amdsmi_get_gpu_memory_partition_config.restype = amdsmi_status_t
amdsmi_get_gpu_memory_partition_config.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_memory_partition_config_t)]
amdsmi_set_gpu_memory_partition_mode = _libraries['libamdsmi.so'].amdsmi_set_gpu_memory_partition_mode
amdsmi_set_gpu_memory_partition_mode.restype = amdsmi_status_t
amdsmi_set_gpu_memory_partition_mode.argtypes = [amdsmi_processor_handle, amdsmi_memory_partition_type_t]
amdsmi_get_gpu_accelerator_partition_profile_config = _libraries['libamdsmi.so'].amdsmi_get_gpu_accelerator_partition_profile_config
amdsmi_get_gpu_accelerator_partition_profile_config.restype = amdsmi_status_t
amdsmi_get_gpu_accelerator_partition_profile_config.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_accelerator_partition_profile_config_t)]
amdsmi_get_gpu_accelerator_partition_profile = _libraries['libamdsmi.so'].amdsmi_get_gpu_accelerator_partition_profile
amdsmi_get_gpu_accelerator_partition_profile.restype = amdsmi_status_t
amdsmi_get_gpu_accelerator_partition_profile.argtypes = [amdsmi_processor_handle, ctypes.POINTER(struct_c__SA_amdsmi_accelerator_partition_profile_t), ctypes.POINTER(ctypes.c_uint32)]
amdsmi_set_gpu_accelerator_partition_profile = _libraries['libamdsmi.so'].amdsmi_set_gpu_accelerator_partition_profile
amdsmi_set_gpu_accelerator_partition_profile.restype = amdsmi_status_t
amdsmi_set_gpu_accelerator_partition_profile.argtypes = [amdsmi_processor_handle, uint32_t]
amdsmi_gpu_get_cper_entries = _libraries['libamdsmi.so'].amdsmi_gpu_get_cper_entries
amdsmi_gpu_get_cper_entries.restype = amdsmi_status_t
amdsmi_gpu_get_cper_entries.argtypes = [amdsmi_processor_handle, uint32_t, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.POINTER(struct_c__SA_amdsmi_cper_hdr)), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64)]
__all__ = \
    ['AMDSMI_ACCELERATOR_DECODER', 'AMDSMI_ACCELERATOR_DMA',
    'AMDSMI_ACCELERATOR_ENCODER', 'AMDSMI_ACCELERATOR_JPEG',
    'AMDSMI_ACCELERATOR_MAX', 'AMDSMI_ACCELERATOR_PARTITION_CPX',
    'AMDSMI_ACCELERATOR_PARTITION_DPX',
    'AMDSMI_ACCELERATOR_PARTITION_INVALID',
    'AMDSMI_ACCELERATOR_PARTITION_MAX',
    'AMDSMI_ACCELERATOR_PARTITION_QPX',
    'AMDSMI_ACCELERATOR_PARTITION_SPX',
    'AMDSMI_ACCELERATOR_PARTITION_TPX', 'AMDSMI_ACCELERATOR_XCC',
    'AMDSMI_CACHE_PROPERTY_CPU_CACHE',
    'AMDSMI_CACHE_PROPERTY_DATA_CACHE',
    'AMDSMI_CACHE_PROPERTY_ENABLED',
    'AMDSMI_CACHE_PROPERTY_INST_CACHE',
    'AMDSMI_CACHE_PROPERTY_SIMD_CACHE', 'AMDSMI_CARD_FORM_FACTOR_CEM',
    'AMDSMI_CARD_FORM_FACTOR_OAM', 'AMDSMI_CARD_FORM_FACTOR_PCIE',
    'AMDSMI_CARD_FORM_FACTOR_UNKNOWN', 'AMDSMI_CLK_TYPE_DCEF',
    'AMDSMI_CLK_TYPE_DCLK0', 'AMDSMI_CLK_TYPE_DCLK1',
    'AMDSMI_CLK_TYPE_DF', 'AMDSMI_CLK_TYPE_FIRST',
    'AMDSMI_CLK_TYPE_GFX', 'AMDSMI_CLK_TYPE_MEM',
    'AMDSMI_CLK_TYPE_PCIE', 'AMDSMI_CLK_TYPE_SOC',
    'AMDSMI_CLK_TYPE_SYS', 'AMDSMI_CLK_TYPE_VCLK0',
    'AMDSMI_CLK_TYPE_VCLK1', 'AMDSMI_CLK_TYPE__MAX',
    'AMDSMI_CPER_SEV_FATAL', 'AMDSMI_CPER_SEV_NON_FATAL_CORRECTED',
    'AMDSMI_CPER_SEV_NON_FATAL_UNCORRECTED', 'AMDSMI_CPER_SEV_NUM',
    'AMDSMI_CPER_SEV_UNUSED', 'AMDSMI_DRIVER_AMDGPU',
    'AMDSMI_DRIVER_AMDGPUV', 'AMDSMI_DRIVER_KMD',
    'AMDSMI_DRIVER_LIBGV', 'AMDSMI_DRIVER_MODEL_TYPE_MCDM',
    'AMDSMI_DRIVER_MODEL_TYPE_WDDM', 'AMDSMI_DRIVER_MODEL_TYPE_WDM',
    'AMDSMI_DRIVER_MODEL_TYPE__MAX', 'AMDSMI_DRIVER_VMWGPUV',
    'AMDSMI_DRIVER__MAX', 'AMDSMI_EVENT_CATEGORY_DRIVER',
    'AMDSMI_EVENT_CATEGORY_ECC', 'AMDSMI_EVENT_CATEGORY_FW',
    'AMDSMI_EVENT_CATEGORY_GPU', 'AMDSMI_EVENT_CATEGORY_GPUMON',
    'AMDSMI_EVENT_CATEGORY_GUARD', 'AMDSMI_EVENT_CATEGORY_IOV',
    'AMDSMI_EVENT_CATEGORY_MMSCH', 'AMDSMI_EVENT_CATEGORY_NON_USED',
    'AMDSMI_EVENT_CATEGORY_PP', 'AMDSMI_EVENT_CATEGORY_RESET',
    'AMDSMI_EVENT_CATEGORY_SCHED', 'AMDSMI_EVENT_CATEGORY_VBIOS',
    'AMDSMI_EVENT_CATEGORY_VF', 'AMDSMI_EVENT_CATEGORY_XGMI',
    'AMDSMI_EVENT_CATEGORY__MAX',
    'AMDSMI_EVENT_DRIVER_ALLOC_DMA_MEM_FAIL',
    'AMDSMI_EVENT_DRIVER_ALLOC_FB_MEM_FAIL',
    'AMDSMI_EVENT_DRIVER_ALLOC_IOVA_ALIGN_FAIL',
    'AMDSMI_EVENT_DRIVER_ALLOC_SYSTEM_MEM_FAIL',
    'AMDSMI_EVENT_DRIVER_BUFFER_OVERFLOW',
    'AMDSMI_EVENT_DRIVER_CREATE_DEBUGFS_DIR_FAIL',
    'AMDSMI_EVENT_DRIVER_CREATE_DEBUGFS_FILE_FAIL',
    'AMDSMI_EVENT_DRIVER_CREATE_DEVICE_FILE_FAIL',
    'AMDSMI_EVENT_DRIVER_CREATE_DRIVER_FILE_FAIL',
    'AMDSMI_EVENT_DRIVER_CREATE_EVENT_FAIL',
    'AMDSMI_EVENT_DRIVER_CREATE_GFX_WORKQUEUE_FAIL',
    'AMDSMI_EVENT_DRIVER_CREATE_MM_WORKQUEUE_FAIL',
    'AMDSMI_EVENT_DRIVER_CREATE_MUTEX_FAIL',
    'AMDSMI_EVENT_DRIVER_CREATE_RWLOCK_FAIL',
    'AMDSMI_EVENT_DRIVER_CREATE_RWSEMA_FAIL',
    'AMDSMI_EVENT_DRIVER_CREATE_SPIN_LOCK_FAIL',
    'AMDSMI_EVENT_DRIVER_CREATE_THREAD_FAIL',
    'AMDSMI_EVENT_DRIVER_CREATE_TIMER_FAIL',
    'AMDSMI_EVENT_DRIVER_DEV_INIT_FAIL',
    'AMDSMI_EVENT_DRIVER_DOORBELL_MAP_FAIL',
    'AMDSMI_EVENT_DRIVER_ERROR_LOGGING_FAILED',
    'AMDSMI_EVENT_DRIVER_FB_MAP_FAIL',
    'AMDSMI_EVENT_DRIVER_FULL_ACCESS_TIMEOUT',
    'AMDSMI_EVENT_DRIVER_GET_READ_LOCK_FAIL',
    'AMDSMI_EVENT_DRIVER_GET_READ_SEMA_FAIL',
    'AMDSMI_EVENT_DRIVER_GET_WRITE_LOCK_FAIL',
    'AMDSMI_EVENT_DRIVER_GET_WRITE_SEMA_FAIL',
    'AMDSMI_EVENT_DRIVER_HRTIMER_START_FAIL',
    'AMDSMI_EVENT_DRIVER_HW_INIT_FAIL',
    'AMDSMI_EVENT_DRIVER_INIT_CONFIG_ERROR',
    'AMDSMI_EVENT_DRIVER_INTERRUPT_INIT_FAIL',
    'AMDSMI_EVENT_DRIVER_INVALID_VALUE',
    'AMDSMI_EVENT_DRIVER_MMIO_FAIL',
    'AMDSMI_EVENT_DRIVER_NO_ACCESS_PCI_REGION',
    'AMDSMI_EVENT_DRIVER_NO_FB_MANAGER',
    'AMDSMI_EVENT_DRIVER_PCI_ENABLE_DEVICE_FAIL',
    'AMDSMI_EVENT_DRIVER_PCI_REGISTER_DRIVER_FAIL',
    'AMDSMI_EVENT_DRIVER_DIAG_DATA_BUS_ADDR_REQ_FAIL',
    'AMDSMI_EVENT_DRIVER_DIAG_DATA_INIT_FAIL',
    'AMDSMI_EVENT_DRIVER_DIAG_DATA_MEM_REQ_FAIL',
    'AMDSMI_EVENT_DRIVER_DIAG_DATA_VADDR_REQ_FAIL',
    'AMDSMI_EVENT_DRIVER_ROM_MAP_FAIL',
    'AMDSMI_EVENT_DRIVER_SPIN_LOCK_BUSY',
    'AMDSMI_EVENT_DRIVER_SW_INIT_FAIL', 'AMDSMI_EVENT_DRIVER__MAX',
    'AMDSMI_EVENT_ECC_ACA_DUMP',
    'AMDSMI_EVENT_ECC_ACA_UNKNOWN_BLOCK_INSTANCE',
    'AMDSMI_EVENT_ECC_CE', 'AMDSMI_EVENT_ECC_DUP_ENTRIES',
    'AMDSMI_EVENT_ECC_EEPROM_APPEND',
    'AMDSMI_EVENT_ECC_EEPROM_CHK_MISMATCH',
    'AMDSMI_EVENT_ECC_EEPROM_ENTRIES_FOUND',
    'AMDSMI_EVENT_ECC_EEPROM_REACH_THD',
    'AMDSMI_EVENT_ECC_EEPROM_RESET',
    'AMDSMI_EVENT_ECC_EEPROM_RESET_FAILED',
    'AMDSMI_EVENT_ECC_EEPROM_WRONG_HDR',
    'AMDSMI_EVENT_ECC_EEPROM_WRONG_VER',
    'AMDSMI_EVENT_ECC_FATAL_ERROR', 'AMDSMI_EVENT_ECC_GFX_CE',
    'AMDSMI_EVENT_ECC_GFX_CE_TOTAL',
    'AMDSMI_EVENT_ECC_GFX_CHIPLET_CE',
    'AMDSMI_EVENT_ECC_GFX_CHIPLET_UE', 'AMDSMI_EVENT_ECC_GFX_UE',
    'AMDSMI_EVENT_ECC_GFX_UE_TOTAL', 'AMDSMI_EVENT_ECC_IN_CRI_REG',
    'AMDSMI_EVENT_ECC_IN_PF_FB', 'AMDSMI_EVENT_ECC_IN_SAME_ROW',
    'AMDSMI_EVENT_ECC_IN_VF_CRI', 'AMDSMI_EVENT_ECC_MMHUB_CE',
    'AMDSMI_EVENT_ECC_MMHUB_CE_TOTAL',
    'AMDSMI_EVENT_ECC_MMHUB_CHIPLET_CE',
    'AMDSMI_EVENT_ECC_MMHUB_CHIPLET_UE', 'AMDSMI_EVENT_ECC_MMHUB_UE',
    'AMDSMI_EVENT_ECC_MMHUB_UE_TOTAL',
    'AMDSMI_EVENT_ECC_POISON_CONSUMPTION',
    'AMDSMI_EVENT_ECC_REACH_THD', 'AMDSMI_EVENT_ECC_SDMA_CE',
    'AMDSMI_EVENT_ECC_SDMA_CE_TOTAL',
    'AMDSMI_EVENT_ECC_SDMA_CHIPLET_CE',
    'AMDSMI_EVENT_ECC_SDMA_CHIPLET_UE', 'AMDSMI_EVENT_ECC_SDMA_UE',
    'AMDSMI_EVENT_ECC_SDMA_UE_TOTAL', 'AMDSMI_EVENT_ECC_THD_CHANGED',
    'AMDSMI_EVENT_ECC_UCE', 'AMDSMI_EVENT_ECC_UMC_CE_TOTAL',
    'AMDSMI_EVENT_ECC_UMC_CHIPLET_CE',
    'AMDSMI_EVENT_ECC_UMC_CHIPLET_DE',
    'AMDSMI_EVENT_ECC_UMC_CHIPLET_UE', 'AMDSMI_EVENT_ECC_UMC_DE',
    'AMDSMI_EVENT_ECC_UMC_DE_TOTAL', 'AMDSMI_EVENT_ECC_UMC_UE',
    'AMDSMI_EVENT_ECC_UMC_UE_TOTAL', 'AMDSMI_EVENT_ECC_UNKNOWN',
    'AMDSMI_EVENT_ECC_UNKNOWN_CHIPLET_CE',
    'AMDSMI_EVENT_ECC_UNKNOWN_CHIPLET_DE',
    'AMDSMI_EVENT_ECC_UNKNOWN_CHIPLET_UE', 'AMDSMI_EVENT_ECC_VF_CE',
    'AMDSMI_EVENT_ECC_VF_UE', 'AMDSMI_EVENT_ECC_WRONG_SOCKET_ID',
    'AMDSMI_EVENT_ECC_XGMI_WAFL_CE',
    'AMDSMI_EVENT_ECC_XGMI_WAFL_CE_TOTAL',
    'AMDSMI_EVENT_ECC_XGMI_WAFL_CHIPLET_CE',
    'AMDSMI_EVENT_ECC_XGMI_WAFL_CHIPLET_UE',
    'AMDSMI_EVENT_ECC_XGMI_WAFL_UE',
    'AMDSMI_EVENT_ECC_XGMI_WAFL_UE_TOTAL', 'AMDSMI_EVENT_ECC__MAX',
    'AMDSMI_EVENT_FW_ASD_LOAD_FAIL',
    'AMDSMI_EVENT_FW_ASD_UNLOAD_FAIL',
    'AMDSMI_EVENT_FW_AUTOLOAD_FAIL', 'AMDSMI_EVENT_FW_BL_FAIL',
    'AMDSMI_EVENT_FW_CMD_ALLOC_BUF_FAIL',
    'AMDSMI_EVENT_FW_CMD_BUF_PREP_FAIL',
    'AMDSMI_EVENT_FW_CMD_FENCE_WAIT_FAIL',
    'AMDSMI_EVENT_FW_CMD_SUBMIT_FAIL', 'AMDSMI_EVENT_FW_EXIT_FAIL',
    'AMDSMI_EVENT_FW_FW_APPLY_SECURITY_POLICY_FAIL',
    'AMDSMI_EVENT_FW_FW_LOAD_FAIL',
    'AMDSMI_EVENT_FW_GET_PSP_TRACELOG_FAIL',
    'AMDSMI_EVENT_FW_INIT_FAIL', 'AMDSMI_EVENT_FW_MAILBOX_ERROR',
    'AMDSMI_EVENT_FW_MIGRATION_EXPORT_FAIL',
    'AMDSMI_EVENT_FW_MIGRATION_GET_PSP_INFO_FAIL',
    'AMDSMI_EVENT_FW_MIGRATION_IMPORT_FAIL',
    'AMDSMI_EVENT_FW_NOT_SUPPORTED_FEATURE',
    'AMDSMI_EVENT_FW_RAS_BOOT_FAIL', 'AMDSMI_EVENT_FW_RAS_LOAD_FAIL',
    'AMDSMI_EVENT_FW_RAS_TA_ERR_INJECT_FAIL',
    'AMDSMI_EVENT_FW_RAS_TA_INVOKE_FAIL',
    'AMDSMI_EVENT_FW_RAS_UNLOAD_FAIL',
    'AMDSMI_EVENT_FW_RING_INIT_FAIL',
    'AMDSMI_EVENT_FW_SET_SNAPSHOT_ADDR_FAIL',
    'AMDSMI_EVENT_FW_SNAPSHOT_TRIGGER_FAIL',
    'AMDSMI_EVENT_FW_START_RING_FAIL',
    'AMDSMI_EVENT_FW_TMR_INIT_FAIL', 'AMDSMI_EVENT_FW_TMR_LOAD_FAIL',
    'AMDSMI_EVENT_FW_TOC_LOAD_FAIL', 'AMDSMI_EVENT_FW_VFGATE_FAIL',
    'AMDSMI_EVENT_FW_XGMI_LOAD_FAIL',
    'AMDSMI_EVENT_FW_XGMI_TA_INVOKE_FAIL',
    'AMDSMI_EVENT_FW_XGMI_UNLOAD_FAIL', 'AMDSMI_EVENT_FW__MAX',
    'AMDSMI_EVENT_GPUMON_INVALID_FB_SIZE',
    'AMDSMI_EVENT_GPUMON_INVALID_GFX_PART',
    'AMDSMI_EVENT_GPUMON_INVALID_GFX_TIMESLICE',
    'AMDSMI_EVENT_GPUMON_INVALID_MM_TIMESLICE',
    'AMDSMI_EVENT_GPUMON_INVALID_OPTION',
    'AMDSMI_EVENT_GPUMON_INVALID_VF_INDEX',
    'AMDSMI_EVENT_GPUMON_INVALID_VF_NUM',
    'AMDSMI_EVENT_GPUMON_NOT_SUPPORTED',
    'AMDSMI_EVENT_GPUMON_NO_AVAILABLE_SLOT',
    'AMDSMI_EVENT_GPUMON_NO_SUITABLE_SPACE',
    'AMDSMI_EVENT_GPUMON_OVERLAPPING_FB',
    'AMDSMI_EVENT_GPUMON_OVERSIZE_ALLOCATION',
    'AMDSMI_EVENT_GPUMON_VF_BUSY', 'AMDSMI_EVENT_GPUMON__MAX',
    'AMDSMI_EVENT_GPU_DEVICE_LOST', 'AMDSMI_EVENT_GPU_GC_ENGINE_BUSY',
    'AMDSMI_EVENT_GPU_MMSCH_ABNORMAL_STATE',
    'AMDSMI_EVENT_GPU_NOT_INITIALIZED',
    'AMDSMI_EVENT_GPU_NOT_SUPPORTED',
    'AMDSMI_EVENT_GPU_RLCV_ABNORMAL_STATE',
    'AMDSMI_EVENT_GPU_RLC_ENGINE_BUSY', 'AMDSMI_EVENT_GPU_RMA',
    'AMDSMI_EVENT_GPU_SDMA_ENGINE_BUSY', 'AMDSMI_EVENT_GPU__MAX',
    'AMDSMI_EVENT_GUARD_EVENT_OVERFLOW',
    'AMDSMI_EVENT_GUARD_RESET_FAIL', 'AMDSMI_EVENT_GUARD__MAX',
    'AMDSMI_EVENT_IOV_ASIC_NO_SRIOV_SUPPORT',
    'AMDSMI_EVENT_IOV_CMD_ERROR', 'AMDSMI_EVENT_IOV_CMD_TIMEOUT',
    'AMDSMI_EVENT_IOV_ENABLE_SRIOV_FAIL',
    'AMDSMI_EVENT_IOV_INIT_IV_RING_FAIL',
    'AMDSMI_EVENT_IOV_NO_GPU_IOV_CAP',
    'AMDSMI_EVENT_IOV_SRIOV_STRIDE_ERROR',
    'AMDSMI_EVENT_IOV_WS_ALREADY_SHUTDOWN',
    'AMDSMI_EVENT_IOV_WS_IDLE_TIMEOUT',
    'AMDSMI_EVENT_IOV_WS_INFINITE_LOOP',
    'AMDSMI_EVENT_IOV_WS_LOAD_TIMEOUT',
    'AMDSMI_EVENT_IOV_WS_REENTRANT_ERROR',
    'AMDSMI_EVENT_IOV_WS_RUN_TIMEOUT',
    'AMDSMI_EVENT_IOV_WS_SAVE_TIMEOUT',
    'AMDSMI_EVENT_IOV_WS_SHUTDOWN_TIMEOUT', 'AMDSMI_EVENT_IOV__MAX',
    'AMDSMI_EVENT_MMSCH_IGNORED_JOB',
    'AMDSMI_EVENT_MMSCH_UNSUPPORTED_VCN_FW',
    'AMDSMI_EVENT_MMSCH__MAX',
    'AMDSMI_EVENT_PP_ACTIVATE_DPM_POLICY_FAIL',
    'AMDSMI_EVENT_PP_I2C_SLAVE_NOT_PRESENT',
    'AMDSMI_EVENT_PP_SET_DPM_POLICY_FAIL',
    'AMDSMI_EVENT_PP_THROTTLER_EVENT', 'AMDSMI_EVENT_PP__MAX',
    'AMDSMI_EVENT_RESET_FLR', 'AMDSMI_EVENT_RESET_FLR_FAILED',
    'AMDSMI_EVENT_RESET_GPU', 'AMDSMI_EVENT_RESET_GPU_FAILED',
    'AMDSMI_EVENT_RESET__MAX', 'AMDSMI_EVENT_SCHED_DEAD_VF',
    'AMDSMI_EVENT_SCHED_DISABLE_AUTO_HW_SWITCH_FAIL',
    'AMDSMI_EVENT_SCHED_ENABLE_AUTO_HW_SWITCH_FAIL',
    'AMDSMI_EVENT_SCHED_EVENT_QUEUE_FULL',
    'AMDSMI_EVENT_SCHED_FINI_GPU_FAIL',
    'AMDSMI_EVENT_SCHED_GFX_IDLE_REG_FAIL',
    'AMDSMI_EVENT_SCHED_GFX_INIT_REG_FAIL',
    'AMDSMI_EVENT_SCHED_GFX_LOAD_REG_FAIL',
    'AMDSMI_EVENT_SCHED_GFX_RUN_REG_FAIL',
    'AMDSMI_EVENT_SCHED_GFX_SAVE_REG_FAIL',
    'AMDSMI_EVENT_SCHED_IDLE_GPU_FAIL',
    'AMDSMI_EVENT_SCHED_IGNORE_EVENT',
    'AMDSMI_EVENT_SCHED_INIT_GPU_FAIL',
    'AMDSMI_EVENT_SCHED_LOAD_GPU_STATE_FAIL',
    'AMDSMI_EVENT_SCHED_MM_IDLE_REG_FAIL',
    'AMDSMI_EVENT_SCHED_MM_INIT_REG_FAIL',
    'AMDSMI_EVENT_SCHED_MM_LOAD_REG_FAIL',
    'AMDSMI_EVENT_SCHED_MM_RUN_REG_FAIL',
    'AMDSMI_EVENT_SCHED_MM_SAVE_REG_FAIL',
    'AMDSMI_EVENT_SCHED_PF_SWITCH_FAIL',
    'AMDSMI_EVENT_SCHED_RESET_VF_NUM_FAIL',
    'AMDSMI_EVENT_SCHED_RUN_GPU_FAIL',
    'AMDSMI_EVENT_SCHED_SAVE_GPU_STATE_FAIL',
    'AMDSMI_EVENT_SCHED_SHUTDOWN_VF_FAIL',
    'AMDSMI_EVENT_SCHED_WORLD_SWITCH_FAIL', 'AMDSMI_EVENT_SCHED__MAX',
    'AMDSMI_EVENT_VBIOS_CHECKSUM_ERR',
    'AMDSMI_EVENT_VBIOS_GET_FW_INFO_FAIL',
    'AMDSMI_EVENT_VBIOS_GET_TBL_REVISION_FAIL',
    'AMDSMI_EVENT_VBIOS_HASH_INVALID',
    'AMDSMI_EVENT_VBIOS_HASH_UPDATED',
    'AMDSMI_EVENT_VBIOS_IMAGE_MISSING', 'AMDSMI_EVENT_VBIOS_INVALID',
    'AMDSMI_EVENT_VBIOS_IP_DISCOVERY_BINARY_CHECKSUM_FAIL',
    'AMDSMI_EVENT_VBIOS_IP_DISCOVERY_FAIL',
    'AMDSMI_EVENT_VBIOS_IP_DISCOVERY_TABLE_CHECKSUM_FAIL',
    'AMDSMI_EVENT_VBIOS_PARSER_TBL_FAIL',
    'AMDSMI_EVENT_VBIOS_POST_FAIL', 'AMDSMI_EVENT_VBIOS_READ_FAIL',
    'AMDSMI_EVENT_VBIOS_READ_IMG_HEADER_FAIL',
    'AMDSMI_EVENT_VBIOS_READ_IMG_SIZE_FAIL',
    'AMDSMI_EVENT_VBIOS_TIMEOUT', 'AMDSMI_EVENT_VBIOS__MAX',
    'AMDSMI_EVENT_VF_AMDGPU_INIT_FAIL',
    'AMDSMI_EVENT_VF_AMDGPU_LATE_INIT_FAIL',
    'AMDSMI_EVENT_VF_ASIC_RESUME_FAIL',
    'AMDSMI_EVENT_VF_ATOMBIOS_GET_CLOCK_FAIL',
    'AMDSMI_EVENT_VF_ATOMBIOS_INIT_FAIL',
    'AMDSMI_EVENT_VF_FENCE_INIT_FAIL',
    'AMDSMI_EVENT_VF_GPU_POST_ERROR',
    'AMDSMI_EVENT_VF_GPU_RESET_FAIL', 'AMDSMI_EVENT_VF_IB_INIT_FAIL',
    'AMDSMI_EVENT_VF_NO_VBIOS', 'AMDSMI_EVENT_VF__MAX',
    'AMDSMI_EVENT_XGMI_FB_SHARING_SETTING_ERROR',
    'AMDSMI_EVENT_XGMI_FB_SHARING_SETTING_RESET',
    'AMDSMI_EVENT_XGMI_TOPOLOGY_HW_INIT_UPDATE',
    'AMDSMI_EVENT_XGMI_TOPOLOGY_UPDATE_DONE',
    'AMDSMI_EVENT_XGMI_TOPOLOGY_UPDATE_FAILED',
    'AMDSMI_EVENT_XGMI__MAX', 'AMDSMI_FW_ID_ASD',
    'AMDSMI_FW_ID_CP_CE', 'AMDSMI_FW_ID_CP_ME',
    'AMDSMI_FW_ID_CP_MEC1', 'AMDSMI_FW_ID_CP_MEC2',
    'AMDSMI_FW_ID_CP_MEC_JT1', 'AMDSMI_FW_ID_CP_MEC_JT2',
    'AMDSMI_FW_ID_CP_MES', 'AMDSMI_FW_ID_CP_PFP',
    'AMDSMI_FW_ID_CP_PM4', 'AMDSMI_FW_ID_DFC', 'AMDSMI_FW_ID_DMCU',
    'AMDSMI_FW_ID_DMCU_ERAM', 'AMDSMI_FW_ID_DMCU_ISR',
    'AMDSMI_FW_ID_DRV_CAP', 'AMDSMI_FW_ID_FIRST',
    'AMDSMI_FW_ID_IMU_DRAM', 'AMDSMI_FW_ID_IMU_IRAM',
    'AMDSMI_FW_ID_ISP', 'AMDSMI_FW_ID_MC', 'AMDSMI_FW_ID_MES_STACK',
    'AMDSMI_FW_ID_MES_THREAD1', 'AMDSMI_FW_ID_MES_THREAD1_STACK',
    'AMDSMI_FW_ID_MMSCH', 'AMDSMI_FW_ID_P2S_TABLE',
    'AMDSMI_FW_ID_PPTABLE', 'AMDSMI_FW_ID_PSP_BL',
    'AMDSMI_FW_ID_PSP_DBG', 'AMDSMI_FW_ID_PSP_INTF',
    'AMDSMI_FW_ID_PSP_KEYDB', 'AMDSMI_FW_ID_PSP_RAS',
    'AMDSMI_FW_ID_PSP_SOC', 'AMDSMI_FW_ID_PSP_SOSDRV',
    'AMDSMI_FW_ID_PSP_SPL', 'AMDSMI_FW_ID_PSP_SYSDRV',
    'AMDSMI_FW_ID_PSP_TOC', 'AMDSMI_FW_ID_REG_ACCESS_WHITELIST',
    'AMDSMI_FW_ID_RLC', 'AMDSMI_FW_ID_RLCV_LX7', 'AMDSMI_FW_ID_RLC_P',
    'AMDSMI_FW_ID_RLC_RESTORE_LIST_CNTL',
    'AMDSMI_FW_ID_RLC_RESTORE_LIST_GPM_MEM',
    'AMDSMI_FW_ID_RLC_RESTORE_LIST_SRM_MEM',
    'AMDSMI_FW_ID_RLC_SAVE_RESTORE_LIST', 'AMDSMI_FW_ID_RLC_SRLG',
    'AMDSMI_FW_ID_RLC_SRLS', 'AMDSMI_FW_ID_RLC_V',
    'AMDSMI_FW_ID_RLX6', 'AMDSMI_FW_ID_RLX6_CORE1',
    'AMDSMI_FW_ID_RLX6_DRAM_BOOT',
    'AMDSMI_FW_ID_RLX6_DRAM_BOOT_CORE1', 'AMDSMI_FW_ID_RS64_ME',
    'AMDSMI_FW_ID_RS64_MEC', 'AMDSMI_FW_ID_RS64_MEC_P0_DATA',
    'AMDSMI_FW_ID_RS64_MEC_P1_DATA', 'AMDSMI_FW_ID_RS64_MEC_P2_DATA',
    'AMDSMI_FW_ID_RS64_MEC_P3_DATA', 'AMDSMI_FW_ID_RS64_ME_P0_DATA',
    'AMDSMI_FW_ID_RS64_ME_P1_DATA', 'AMDSMI_FW_ID_RS64_PFP',
    'AMDSMI_FW_ID_RS64_PFP_P0_DATA', 'AMDSMI_FW_ID_RS64_PFP_P1_DATA',
    'AMDSMI_FW_ID_SDMA0', 'AMDSMI_FW_ID_SDMA1', 'AMDSMI_FW_ID_SDMA2',
    'AMDSMI_FW_ID_SDMA3', 'AMDSMI_FW_ID_SDMA4', 'AMDSMI_FW_ID_SDMA5',
    'AMDSMI_FW_ID_SDMA6', 'AMDSMI_FW_ID_SDMA7',
    'AMDSMI_FW_ID_SDMA_TH0', 'AMDSMI_FW_ID_SDMA_TH1',
    'AMDSMI_FW_ID_SEC_POLICY_STAGE2', 'AMDSMI_FW_ID_SMC',
    'AMDSMI_FW_ID_SMU', 'AMDSMI_FW_ID_TA_RAS', 'AMDSMI_FW_ID_UVD',
    'AMDSMI_FW_ID_VCE', 'AMDSMI_FW_ID_VCN', 'AMDSMI_FW_ID_XGMI',
    'AMDSMI_FW_ID__MAX', 'AMDSMI_GPU_BLOCK_ATHUB',
    'AMDSMI_GPU_BLOCK_DF', 'AMDSMI_GPU_BLOCK_FIRST',
    'AMDSMI_GPU_BLOCK_FUSE', 'AMDSMI_GPU_BLOCK_GFX',
    'AMDSMI_GPU_BLOCK_HDP', 'AMDSMI_GPU_BLOCK_IH',
    'AMDSMI_GPU_BLOCK_INVALID', 'AMDSMI_GPU_BLOCK_JPEG',
    'AMDSMI_GPU_BLOCK_LAST', 'AMDSMI_GPU_BLOCK_MCA',
    'AMDSMI_GPU_BLOCK_MMHUB', 'AMDSMI_GPU_BLOCK_MP0',
    'AMDSMI_GPU_BLOCK_MP1', 'AMDSMI_GPU_BLOCK_MPIO',
    'AMDSMI_GPU_BLOCK_PCIE_BIF', 'AMDSMI_GPU_BLOCK_SDMA',
    'AMDSMI_GPU_BLOCK_SEM', 'AMDSMI_GPU_BLOCK_SMN',
    'AMDSMI_GPU_BLOCK_UMC', 'AMDSMI_GPU_BLOCK_VCN',
    'AMDSMI_GPU_BLOCK_XGMI_WAFL', 'AMDSMI_GUARD_EVENT_ALL_INT',
    'AMDSMI_GUARD_EVENT_EXCLUSIVE_MOD',
    'AMDSMI_GUARD_EVENT_EXCLUSIVE_TIMEOUT', 'AMDSMI_GUARD_EVENT_FLR',
    'AMDSMI_GUARD_EVENT__MAX', 'AMDSMI_GUARD_STATE_FULL',
    'AMDSMI_GUARD_STATE_NORMAL', 'AMDSMI_GUARD_STATE_OVERFLOW',
    'AMDSMI_GUEST_FW_ID_ASD', 'AMDSMI_GUEST_FW_ID_CE',
    'AMDSMI_GUEST_FW_ID_DMCU', 'AMDSMI_GUEST_FW_ID_MC',
    'AMDSMI_GUEST_FW_ID_ME', 'AMDSMI_GUEST_FW_ID_MEC',
    'AMDSMI_GUEST_FW_ID_MEC2', 'AMDSMI_GUEST_FW_ID_PFP',
    'AMDSMI_GUEST_FW_ID_RLC', 'AMDSMI_GUEST_FW_ID_RLC_SRLC',
    'AMDSMI_GUEST_FW_ID_RLC_SRLG', 'AMDSMI_GUEST_FW_ID_RLC_SRLS',
    'AMDSMI_GUEST_FW_ID_SDMA', 'AMDSMI_GUEST_FW_ID_SDMA2',
    'AMDSMI_GUEST_FW_ID_SMC', 'AMDSMI_GUEST_FW_ID_SOS',
    'AMDSMI_GUEST_FW_ID_TA_RAS', 'AMDSMI_GUEST_FW_ID_TA_XGMI',
    'AMDSMI_GUEST_FW_ID_UVD', 'AMDSMI_GUEST_FW_ID_VCE',
    'AMDSMI_GUEST_FW_ID_VCN', 'AMDSMI_GUEST_FW_ID__MAX',
    'AMDSMI_INIT_ALL_PROCESSORS', 'AMDSMI_INIT_AMD_APUS',
    'AMDSMI_INIT_AMD_CPUS', 'AMDSMI_INIT_AMD_GPUS',
    'AMDSMI_INIT_NON_AMD_CPUS', 'AMDSMI_INIT_NON_AMD_GPUS',
    'AMDSMI_LINK_STATUS_DISABLED', 'AMDSMI_LINK_STATUS_ENABLED',
    'AMDSMI_LINK_STATUS_ERROR', 'AMDSMI_LINK_TYPE_INTERNAL',
    'AMDSMI_LINK_TYPE_NOT_APPLICABLE', 'AMDSMI_LINK_TYPE_PCIE',
    'AMDSMI_LINK_TYPE_UNKNOWN', 'AMDSMI_LINK_TYPE_XGMI',
    'AMDSMI_MEMORY_PARTITION_NPS1', 'AMDSMI_MEMORY_PARTITION_NPS2',
    'AMDSMI_MEMORY_PARTITION_NPS4', 'AMDSMI_MEMORY_PARTITION_NPS8',
    'AMDSMI_MEMORY_PARTITION_UNKNOWN',
    'AMDSMI_METRIC_CATEGORY_ACC_COUNTER',
    'AMDSMI_METRIC_CATEGORY_ACTIVITY',
    'AMDSMI_METRIC_CATEGORY_ENERGY',
    'AMDSMI_METRIC_CATEGORY_FREQUENCY', 'AMDSMI_METRIC_CATEGORY_PCIE',
    'AMDSMI_METRIC_CATEGORY_POWER',
    'AMDSMI_METRIC_CATEGORY_TEMPERATURE',
    'AMDSMI_METRIC_CATEGORY_THROTTLE',
    'AMDSMI_METRIC_CATEGORY_UNKNOWN', 'AMDSMI_METRIC_NAME_CLK_DCLK',
    'AMDSMI_METRIC_NAME_CLK_DCLK_DS_DISABLED',
    'AMDSMI_METRIC_NAME_CLK_DCLK_MAX_LIMIT',
    'AMDSMI_METRIC_NAME_CLK_DCLK_MIN_LIMIT',
    'AMDSMI_METRIC_NAME_CLK_GFX',
    'AMDSMI_METRIC_NAME_CLK_GFX_DS_DISABLED',
    'AMDSMI_METRIC_NAME_CLK_GFX_LOCKED',
    'AMDSMI_METRIC_NAME_CLK_GFX_MAX_LIMIT',
    'AMDSMI_METRIC_NAME_CLK_GFX_MIN_LIMIT',
    'AMDSMI_METRIC_NAME_CLK_MEM',
    'AMDSMI_METRIC_NAME_CLK_MEM_DS_DISABLED',
    'AMDSMI_METRIC_NAME_CLK_MEM_MAX_LIMIT',
    'AMDSMI_METRIC_NAME_CLK_MEM_MIN_LIMIT',
    'AMDSMI_METRIC_NAME_CLK_SOC',
    'AMDSMI_METRIC_NAME_CLK_SOC_DS_DISABLED',
    'AMDSMI_METRIC_NAME_CLK_SOC_MAX_LIMIT',
    'AMDSMI_METRIC_NAME_CLK_SOC_MIN_LIMIT',
    'AMDSMI_METRIC_NAME_CLK_VCLK',
    'AMDSMI_METRIC_NAME_CLK_VCLK_DS_DISABLED',
    'AMDSMI_METRIC_NAME_CLK_VCLK_MAX_LIMIT',
    'AMDSMI_METRIC_NAME_CLK_VCLK_MIN_LIMIT',
    'AMDSMI_METRIC_NAME_ENERGY_AID', 'AMDSMI_METRIC_NAME_ENERGY_CCD',
    'AMDSMI_METRIC_NAME_ENERGY_MEM',
    'AMDSMI_METRIC_NAME_ENERGY_SOCKET',
    'AMDSMI_METRIC_NAME_ENERGY_XCD',
    'AMDSMI_METRIC_NAME_FW_TIMESTAMP',
    'AMDSMI_METRIC_NAME_METRIC_ACC_COUNTER',
    'AMDSMI_METRIC_NAME_PCIE_BANDWIDTH',
    'AMDSMI_METRIC_NAME_PCIE_L0_TO_RECOVERY_COUNT',
    'AMDSMI_METRIC_NAME_PCIE_LINK_SPEED',
    'AMDSMI_METRIC_NAME_PCIE_LINK_WIDTH',
    'AMDSMI_METRIC_NAME_PCIE_NAK_RECEIVED_COUNT',
    'AMDSMI_METRIC_NAME_PCIE_NAK_SENT_COUNT',
    'AMDSMI_METRIC_NAME_PCIE_REPLAY_COUNT',
    'AMDSMI_METRIC_NAME_PCIE_REPLAY_ROLLOVER_COUNT',
    'AMDSMI_METRIC_NAME_POWER_CURR', 'AMDSMI_METRIC_NAME_POWER_LIMIT',
    'AMDSMI_METRIC_NAME_TEMP_HOTSPOT_CURR',
    'AMDSMI_METRIC_NAME_TEMP_HOTSPOT_LIMIT',
    'AMDSMI_METRIC_NAME_TEMP_MEM_CURR',
    'AMDSMI_METRIC_NAME_TEMP_MEM_LIMIT',
    'AMDSMI_METRIC_NAME_TEMP_SHUTDOWN',
    'AMDSMI_METRIC_NAME_TEMP_VR_CURR',
    'AMDSMI_METRIC_NAME_THROTTLE_MEM_ACTIVE',
    'AMDSMI_METRIC_NAME_THROTTLE_SOCKET_ACTIVE',
    'AMDSMI_METRIC_NAME_THROTTLE_VR_ACTIVE',
    'AMDSMI_METRIC_NAME_UNKNOWN', 'AMDSMI_METRIC_NAME_USAGE_GFX',
    'AMDSMI_METRIC_NAME_USAGE_JPEG', 'AMDSMI_METRIC_NAME_USAGE_MEM',
    'AMDSMI_METRIC_NAME_USAGE_MM', 'AMDSMI_METRIC_NAME_USAGE_VCN',
    'AMDSMI_METRIC_NAME_VOLT_GFX', 'AMDSMI_METRIC_NAME_VOLT_MEM',
    'AMDSMI_METRIC_NAME_VOLT_SOC', 'AMDSMI_METRIC_TYPE_ACC',
    'AMDSMI_METRIC_TYPE_CHIPLET', 'AMDSMI_METRIC_TYPE_COUNTER',
    'AMDSMI_METRIC_TYPE_INST', 'AMDSMI_METRIC_UNIT_BOOL',
    'AMDSMI_METRIC_UNIT_CELSIUS', 'AMDSMI_METRIC_UNIT_COUNTER',
    'AMDSMI_METRIC_UNIT_GBPS', 'AMDSMI_METRIC_UNIT_JOULE',
    'AMDSMI_METRIC_UNIT_MBITPS', 'AMDSMI_METRIC_UNIT_MHZ',
    'AMDSMI_METRIC_UNIT_MILLIVOLT', 'AMDSMI_METRIC_UNIT_PCIE_GEN',
    'AMDSMI_METRIC_UNIT_PCIE_LANES', 'AMDSMI_METRIC_UNIT_PERCENT',
    'AMDSMI_METRIC_UNIT_UINT', 'AMDSMI_METRIC_UNIT_UNKNOWN',
    'AMDSMI_METRIC_UNIT_WATT', 'AMDSMI_MM_UVD', 'AMDSMI_MM_VCE',
    'AMDSMI_MM_VCN', 'AMDSMI_MM__MAX',
    'AMDSMI_PROCESSOR_TYPE_AMD_APU', 'AMDSMI_PROCESSOR_TYPE_AMD_CPU',
    'AMDSMI_PROCESSOR_TYPE_AMD_CPU_CORE',
    'AMDSMI_PROCESSOR_TYPE_AMD_GPU',
    'AMDSMI_PROCESSOR_TYPE_NON_AMD_CPU',
    'AMDSMI_PROCESSOR_TYPE_NON_AMD_GPU',
    'AMDSMI_PROCESSOR_TYPE_UNKNOWN',
    'AMDSMI_PROFILE_CAPABILITY_COMPUTE',
    'AMDSMI_PROFILE_CAPABILITY_DECODE',
    'AMDSMI_PROFILE_CAPABILITY_ENCODE',
    'AMDSMI_PROFILE_CAPABILITY_MEMORY',
    'AMDSMI_PROFILE_CAPABILITY__MAX',
    'AMDSMI_RAS_ECC_SUPPORT_CORRECTABLE',
    'AMDSMI_RAS_ECC_SUPPORT_PARITY', 'AMDSMI_RAS_ECC_SUPPORT_POISON',
    'AMDSMI_RAS_ECC_SUPPORT_UNCORRECTABLE', 'AMDSMI_SCHED_BLOCK_GFX',
    'AMDSMI_SCHED_BLOCK_UVD', 'AMDSMI_SCHED_BLOCK_UVD1',
    'AMDSMI_SCHED_BLOCK_VCE', 'AMDSMI_SCHED_BLOCK_VCN',
    'AMDSMI_SCHED_BLOCK_VCN1', 'AMDSMI_STATUS_ADDRESS_FAULT',
    'AMDSMI_STATUS_AMDGPU_RESTART_ERR', 'AMDSMI_STATUS_API_FAILED',
    'AMDSMI_STATUS_ARG_PTR_NULL', 'AMDSMI_STATUS_BUSY',
    'AMDSMI_STATUS_DRIVER_NOT_LOADED', 'AMDSMI_STATUS_DRM_ERROR',
    'AMDSMI_STATUS_FAIL_LOAD_MODULE',
    'AMDSMI_STATUS_FAIL_LOAD_SYMBOL', 'AMDSMI_STATUS_FILE_ERROR',
    'AMDSMI_STATUS_FILE_NOT_FOUND', 'AMDSMI_STATUS_HSMP_TIMEOUT',
    'AMDSMI_STATUS_INIT_ERROR', 'AMDSMI_STATUS_INPUT_OUT_OF_BOUNDS',
    'AMDSMI_STATUS_INSUFFICIENT_SIZE',
    'AMDSMI_STATUS_INTERNAL_EXCEPTION', 'AMDSMI_STATUS_INTERRUPT',
    'AMDSMI_STATUS_INVAL', 'AMDSMI_STATUS_IO',
    'AMDSMI_STATUS_MAP_ERROR', 'AMDSMI_STATUS_MORE_DATA',
    'AMDSMI_STATUS_NON_AMD_CPU', 'AMDSMI_STATUS_NOT_FOUND',
    'AMDSMI_STATUS_NOT_INIT', 'AMDSMI_STATUS_NOT_SUPPORTED',
    'AMDSMI_STATUS_NOT_YET_IMPLEMENTED', 'AMDSMI_STATUS_NO_DATA',
    'AMDSMI_STATUS_NO_DRV', 'AMDSMI_STATUS_NO_ENERGY_DRV',
    'AMDSMI_STATUS_NO_HSMP_DRV', 'AMDSMI_STATUS_NO_HSMP_MSG_SUP',
    'AMDSMI_STATUS_NO_HSMP_SUP', 'AMDSMI_STATUS_NO_MSR_DRV',
    'AMDSMI_STATUS_NO_PERM', 'AMDSMI_STATUS_NO_SLOT',
    'AMDSMI_STATUS_OUT_OF_RESOURCES',
    'AMDSMI_STATUS_REFCOUNT_OVERFLOW', 'AMDSMI_STATUS_RETRY',
    'AMDSMI_STATUS_SETTING_UNAVAILABLE', 'AMDSMI_STATUS_SUCCESS',
    'AMDSMI_STATUS_TIMEOUT', 'AMDSMI_STATUS_UNEXPECTED_DATA',
    'AMDSMI_STATUS_UNEXPECTED_SIZE', 'AMDSMI_STATUS_UNKNOWN_ERROR',
    'AMDSMI_TEMPERATURE_TYPE_EDGE', 'AMDSMI_TEMPERATURE_TYPE_FIRST',
    'AMDSMI_TEMPERATURE_TYPE_HBM_0', 'AMDSMI_TEMPERATURE_TYPE_HBM_1',
    'AMDSMI_TEMPERATURE_TYPE_HBM_2', 'AMDSMI_TEMPERATURE_TYPE_HBM_3',
    'AMDSMI_TEMPERATURE_TYPE_HOTSPOT',
    'AMDSMI_TEMPERATURE_TYPE_JUNCTION', 'AMDSMI_TEMPERATURE_TYPE_PLX',
    'AMDSMI_TEMPERATURE_TYPE_VRAM', 'AMDSMI_TEMPERATURE_TYPE__MAX',
    'AMDSMI_TEMP_CRITICAL', 'AMDSMI_TEMP_CRITICAL_HYST',
    'AMDSMI_TEMP_CRIT_MIN', 'AMDSMI_TEMP_CRIT_MIN_HYST',
    'AMDSMI_TEMP_CURRENT', 'AMDSMI_TEMP_EMERGENCY',
    'AMDSMI_TEMP_EMERGENCY_HYST', 'AMDSMI_TEMP_FIRST',
    'AMDSMI_TEMP_HIGHEST', 'AMDSMI_TEMP_LAST', 'AMDSMI_TEMP_LOWEST',
    'AMDSMI_TEMP_MAX', 'AMDSMI_TEMP_MAX_HYST', 'AMDSMI_TEMP_MIN',
    'AMDSMI_TEMP_MIN_HYST', 'AMDSMI_TEMP_OFFSET',
    'AMDSMI_TEMP_SHUTDOWN', 'AMDSMI_VF_CONFIG_ENG_COMPUTE_BW_SET',
    'AMDSMI_VF_CONFIG_ENG_ENCODE_BW_UVD1_SET',
    'AMDSMI_VF_CONFIG_ENG_ENCODE_BW_UVD_SET',
    'AMDSMI_VF_CONFIG_ENG_ENCODE_BW_VCE_SET',
    'AMDSMI_VF_CONFIG_ENG_ENCODE_BW_VCN1_SET',
    'AMDSMI_VF_CONFIG_ENG_ENCODE_BW_VCN_SET',
    'AMDSMI_VF_CONFIG_FB_OFFSET_SET', 'AMDSMI_VF_CONFIG_FB_SIZE_SET',
    'AMDSMI_VF_CONFIG_GFX_TIMESLICE_US_SET',
    'AMDSMI_VF_CONFIG_GUARD_THRESHOLD_ALL_INT_SET',
    'AMDSMI_VF_CONFIG_GUARD_THRESHOLD_EXCL_MOD_SET',
    'AMDSMI_VF_CONFIG_GUARD_THRESHOLD_EXCL_TIMEOUT_SET',
    'AMDSMI_VF_CONFIG_GUARD_THRESHOLD_FLR_SET',
    'AMDSMI_VF_CONFIG__MAX', 'AMDSMI_VF_STATE_ACTIVE',
    'AMDSMI_VF_STATE_AVAILABLE', 'AMDSMI_VF_STATE_DEFAULT_AVAILABLE',
    'AMDSMI_VF_STATE_FULLACCESS', 'AMDSMI_VF_STATE_SUSPENDED',
    'AMDSMI_VF_STATE_UNAVAILABLE', 'AMDSMI_VRAM_TYPE_DDR2',
    'AMDSMI_VRAM_TYPE_DDR3', 'AMDSMI_VRAM_TYPE_DDR4',
    'AMDSMI_VRAM_TYPE_GDDR1', 'AMDSMI_VRAM_TYPE_GDDR2',
    'AMDSMI_VRAM_TYPE_GDDR3', 'AMDSMI_VRAM_TYPE_GDDR4',
    'AMDSMI_VRAM_TYPE_GDDR5', 'AMDSMI_VRAM_TYPE_GDDR6',
    'AMDSMI_VRAM_TYPE_GDDR7', 'AMDSMI_VRAM_TYPE_HBM',
    'AMDSMI_VRAM_TYPE_HBM2', 'AMDSMI_VRAM_TYPE_HBM2E',
    'AMDSMI_VRAM_TYPE_HBM3', 'AMDSMI_VRAM_TYPE_UNKNOWN',
    'AMDSMI_VRAM_VENDOR_ELPIDA', 'AMDSMI_VRAM_VENDOR_ESMT',
    'AMDSMI_VRAM_VENDOR_ETRON', 'AMDSMI_VRAM_VENDOR_HYNIX',
    'AMDSMI_VRAM_VENDOR_INFINEON', 'AMDSMI_VRAM_VENDOR_MICRON',
    'AMDSMI_VRAM_VENDOR_MOSEL', 'AMDSMI_VRAM_VENDOR_NANYA',
    'AMDSMI_VRAM_VENDOR_SAMSUNG', 'AMDSMI_VRAM_VENDOR_UNKNOWN',
    'AMDSMI_VRAM_VENDOR_WINBOND', 'AMDSMI_XGMI_FB_SHARING_MODE_1',
    'AMDSMI_XGMI_FB_SHARING_MODE_2', 'AMDSMI_XGMI_FB_SHARING_MODE_4',
    'AMDSMI_XGMI_FB_SHARING_MODE_8',
    'AMDSMI_XGMI_FB_SHARING_MODE_CUSTOM',
    'AMDSMI_XGMI_FB_SHARING_MODE_UNKNOWN',
    'GUEST_FW_LOAD_STATUS_BAD_SIG',
    'GUEST_FW_LOAD_STATUS_ERR_GENERIC',
    'GUEST_FW_LOAD_STATUS_FW_LOAD_FAIL',
    'GUEST_FW_LOAD_STATUS_OBSOLETE_FW', 'GUEST_FW_LOAD_STATUS_OK',
    'amdsmi_accelerator_partition_profile_config_t',
    'amdsmi_accelerator_partition_profile_t',
    'amdsmi_accelerator_partition_resource_profile_t',
    'amdsmi_accelerator_partition_resource_type_t',
    'amdsmi_accelerator_partition_resource_type_t__enumvalues',
    'amdsmi_accelerator_partition_type_t',
    'amdsmi_accelerator_partition_type_t__enumvalues',
    'amdsmi_asic_info_t', 'amdsmi_bdf_t', 'amdsmi_board_info_t',
    'amdsmi_cache_property_type_t',
    'amdsmi_cache_property_type_t__enumvalues',
    'amdsmi_card_form_factor_t',
    'amdsmi_card_form_factor_t__enumvalues', 'amdsmi_clear_vf_fb',
    'amdsmi_clk_info_t', 'amdsmi_clk_type_t',
    'amdsmi_clk_type_t__enumvalues', 'amdsmi_cper_guid_t',
    'amdsmi_cper_hdr', 'amdsmi_cper_sev_t',
    'amdsmi_cper_sev_t__enumvalues', 'amdsmi_cper_timestamp_t',
    'amdsmi_dfc_fw_data_t', 'amdsmi_dfc_fw_header_t',
    'amdsmi_dfc_fw_t', 'amdsmi_dfc_fw_ta_uuid_t',
    'amdsmi_dfc_fw_white_list_t', 'amdsmi_dpm_policy_entry_t',
    'amdsmi_dpm_policy_t', 'amdsmi_driver_info_t',
    'amdsmi_driver_model_type_t',
    'amdsmi_driver_model_type_t__enumvalues', 'amdsmi_driver_t',
    'amdsmi_driver_t__enumvalues',
    'amdsmi_ecc_correction_schema_support_t',
    'amdsmi_ecc_correction_schema_support_t__enumvalues',
    'amdsmi_eeprom_table_record_t', 'amdsmi_engine_usage_t',
    'amdsmi_error_count_t', 'amdsmi_event_category_t',
    'amdsmi_event_category_t__enumvalues', 'amdsmi_event_create',
    'amdsmi_event_destroy', 'amdsmi_event_driver_t',
    'amdsmi_event_driver_t__enumvalues', 'amdsmi_event_ecc_t',
    'amdsmi_event_ecc_t__enumvalues', 'amdsmi_event_entry_t',
    'amdsmi_event_fw_t', 'amdsmi_event_fw_t__enumvalues',
    'amdsmi_event_gpu_t', 'amdsmi_event_gpu_t__enumvalues',
    'amdsmi_event_gpumon_t', 'amdsmi_event_gpumon_t__enumvalues',
    'amdsmi_event_guard_t', 'amdsmi_event_guard_t__enumvalues',
    'amdsmi_event_iov_t', 'amdsmi_event_iov_t__enumvalues',
    'amdsmi_event_mmsch_t', 'amdsmi_event_mmsch_t__enumvalues',
    'amdsmi_event_pp_t', 'amdsmi_event_pp_t__enumvalues',
    'amdsmi_event_read', 'amdsmi_event_reset_t',
    'amdsmi_event_reset_t__enumvalues', 'amdsmi_event_sched_t',
    'amdsmi_event_sched_t__enumvalues', 'amdsmi_event_set',
    'amdsmi_event_vbios_t', 'amdsmi_event_vbios_t__enumvalues',
    'amdsmi_event_vf_max_t', 'amdsmi_event_vf_max_t__enumvalues',
    'amdsmi_event_xgmi_t', 'amdsmi_event_xgmi_t__enumvalues',
    'amdsmi_fw_block_t', 'amdsmi_fw_block_t__enumvalues',
    'amdsmi_fw_error_record_t', 'amdsmi_fw_info_t',
    'amdsmi_fw_load_error_record_t', 'amdsmi_get_clock_info',
    'amdsmi_get_dfc_fw_table', 'amdsmi_get_fb_layout',
    'amdsmi_get_fw_error_records', 'amdsmi_get_fw_info',
    'amdsmi_get_gpu_accelerator_partition_profile',
    'amdsmi_get_gpu_accelerator_partition_profile_config',
    'amdsmi_get_gpu_activity', 'amdsmi_get_gpu_asic_info',
    'amdsmi_get_gpu_bad_page_info', 'amdsmi_get_gpu_board_info',
    'amdsmi_get_gpu_cache_info', 'amdsmi_get_gpu_device_bdf',
    'amdsmi_get_gpu_device_uuid', 'amdsmi_get_gpu_driver_info',
    'amdsmi_get_gpu_driver_model', 'amdsmi_get_gpu_ecc_count',
    'amdsmi_get_gpu_ecc_enabled',
    'amdsmi_get_gpu_memory_partition_config',
    'amdsmi_get_gpu_metrics', 'amdsmi_get_gpu_ras_feature_info',
    'amdsmi_get_gpu_total_ecc_count', 'amdsmi_get_gpu_vbios_info',
    'amdsmi_get_gpu_vram_info', 'amdsmi_get_guest_data',
    'amdsmi_get_index_from_processor_handle',
    'amdsmi_get_lib_version', 'amdsmi_get_link_metrics',
    'amdsmi_get_link_topology', 'amdsmi_get_num_vf',
    'amdsmi_get_partition_profile_info', 'amdsmi_get_pcie_info',
    'amdsmi_get_power_cap_info', 'amdsmi_get_power_info',
    'amdsmi_get_processor_handle_from_bdf',
    'amdsmi_get_processor_handle_from_index',
    'amdsmi_get_processor_handle_from_uuid',
    'amdsmi_get_processor_handles', 'amdsmi_get_processor_type',
    'amdsmi_get_soc_pstate', 'amdsmi_get_socket_handles',
    'amdsmi_get_socket_info', 'amdsmi_get_temp_metric',
    'amdsmi_get_vf_bdf', 'amdsmi_get_vf_data',
    'amdsmi_get_vf_fw_info', 'amdsmi_get_vf_handle_from_bdf',
    'amdsmi_get_vf_handle_from_uuid',
    'amdsmi_get_vf_handle_from_vf_index', 'amdsmi_get_vf_info',
    'amdsmi_get_vf_partition_info', 'amdsmi_get_vf_uuid',
    'amdsmi_get_xgmi_fb_sharing_caps',
    'amdsmi_get_xgmi_fb_sharing_mode_info', 'amdsmi_gpu_block_t',
    'amdsmi_gpu_block_t__enumvalues', 'amdsmi_gpu_cache_info_t',
    'amdsmi_gpu_get_cper_entries', 'amdsmi_guard_info_t',
    'amdsmi_guard_state_t', 'amdsmi_guard_state_t__enumvalues',
    'amdsmi_guard_type_t', 'amdsmi_guard_type_t__enumvalues',
    'amdsmi_guest_data_t', 'amdsmi_guest_fw_engine_id_t',
    'amdsmi_guest_fw_engine_id_t__enumvalues',
    'amdsmi_guest_fw_load_status_t',
    'amdsmi_guest_fw_load_status_t__enumvalues', 'amdsmi_init',
    'amdsmi_init_flags_t', 'amdsmi_init_flags_t__enumvalues',
    'amdsmi_is_gpu_power_management_enabled', 'amdsmi_link_metrics_t',
    'amdsmi_link_status_t', 'amdsmi_link_status_t__enumvalues',
    'amdsmi_link_topology_t', 'amdsmi_link_type_t',
    'amdsmi_link_type_t__enumvalues',
    'amdsmi_memory_partition_config_t',
    'amdsmi_memory_partition_type_t',
    'amdsmi_memory_partition_type_t__enumvalues',
    'amdsmi_metric_category_t',
    'amdsmi_metric_category_t__enumvalues', 'amdsmi_metric_name_t',
    'amdsmi_metric_name_t__enumvalues', 'amdsmi_metric_t',
    'amdsmi_metric_type_t', 'amdsmi_metric_type_t__enumvalues',
    'amdsmi_metric_unit_t', 'amdsmi_metric_unit_t__enumvalues',
    'amdsmi_mm_ip_t', 'amdsmi_mm_ip_t__enumvalues',
    'amdsmi_nps_caps_t', 'amdsmi_partition_info_t',
    'amdsmi_pcie_info_t', 'amdsmi_pf_fb_info_t',
    'amdsmi_power_cap_info_t', 'amdsmi_power_info_t',
    'amdsmi_processor_handle', 'amdsmi_profile_capability_type_t',
    'amdsmi_profile_capability_type_t__enumvalues',
    'amdsmi_profile_caps_info_t', 'amdsmi_profile_info_t',
    'amdsmi_ras_feature_t', 'amdsmi_sched_block_t',
    'amdsmi_sched_block_t__enumvalues', 'amdsmi_sched_info_t',
    'amdsmi_set_gpu_accelerator_partition_profile',
    'amdsmi_set_gpu_memory_partition_mode', 'amdsmi_set_num_vf',
    'amdsmi_set_power_cap', 'amdsmi_set_soc_pstate',
    'amdsmi_set_xgmi_fb_sharing_mode',
    'amdsmi_set_xgmi_fb_sharing_mode_v2', 'amdsmi_shut_down',
    'amdsmi_socket_handle', 'amdsmi_status_code_to_string',
    'amdsmi_status_t', 'amdsmi_status_t__enumvalues',
    'amdsmi_temperature_metric_t',
    'amdsmi_temperature_metric_t__enumvalues',
    'amdsmi_temperature_type_t',
    'amdsmi_temperature_type_t__enumvalues', 'amdsmi_vbios_info_t',
    'amdsmi_version_t', 'amdsmi_vf_config_flags_t',
    'amdsmi_vf_config_flags_t__enumvalues', 'amdsmi_vf_data_t',
    'amdsmi_vf_fb_info_t', 'amdsmi_vf_handle_t', 'amdsmi_vf_info_t',
    'amdsmi_vf_sched_state_t', 'amdsmi_vf_sched_state_t__enumvalues',
    'amdsmi_vram_info_t', 'amdsmi_vram_type_t',
    'amdsmi_vram_type_t__enumvalues', 'amdsmi_vram_vendor_t',
    'amdsmi_vram_vendor_t__enumvalues',
    'amdsmi_xgmi_fb_sharing_caps_t', 'amdsmi_xgmi_fb_sharing_mode_t',
    'amdsmi_xgmi_fb_sharing_mode_t__enumvalues',
    'c__EA_amdsmi_accelerator_partition_resource_type_t',
    'c__EA_amdsmi_accelerator_partition_type_t',
    'c__EA_amdsmi_cache_property_type_t',
    'c__EA_amdsmi_card_form_factor_t', 'c__EA_amdsmi_clk_type_t',
    'c__EA_amdsmi_cper_sev_t', 'c__EA_amdsmi_driver_model_type_t',
    'c__EA_amdsmi_driver_t',
    'c__EA_amdsmi_ecc_correction_schema_support_t',
    'c__EA_amdsmi_event_category_t', 'c__EA_amdsmi_event_driver_t',
    'c__EA_amdsmi_event_ecc_t', 'c__EA_amdsmi_event_fw_t',
    'c__EA_amdsmi_event_gpu_t', 'c__EA_amdsmi_event_gpumon_t',
    'c__EA_amdsmi_event_guard_t', 'c__EA_amdsmi_event_iov_t',
    'c__EA_amdsmi_event_mmsch_t', 'c__EA_amdsmi_event_pp_t',
    'c__EA_amdsmi_event_reset_t', 'c__EA_amdsmi_event_sched_t',
    'c__EA_amdsmi_event_vbios_t', 'c__EA_amdsmi_event_vf_max_t',
    'c__EA_amdsmi_event_xgmi_t', 'c__EA_amdsmi_fw_block_t',
    'c__EA_amdsmi_gpu_block_t', 'c__EA_amdsmi_guard_state_t',
    'c__EA_amdsmi_guard_type_t', 'c__EA_amdsmi_guest_fw_engine_id_t',
    'c__EA_amdsmi_guest_fw_load_status_t',
    'c__EA_amdsmi_init_flags_t', 'c__EA_amdsmi_link_status_t',
    'c__EA_amdsmi_link_type_t',
    'c__EA_amdsmi_memory_partition_type_t',
    'c__EA_amdsmi_metric_category_t', 'c__EA_amdsmi_metric_name_t',
    'c__EA_amdsmi_metric_type_t', 'c__EA_amdsmi_metric_unit_t',
    'c__EA_amdsmi_mm_ip_t', 'c__EA_amdsmi_profile_capability_type_t',
    'c__EA_amdsmi_sched_block_t', 'c__EA_amdsmi_status_t',
    'c__EA_amdsmi_temperature_metric_t',
    'c__EA_amdsmi_temperature_type_t',
    'c__EA_amdsmi_vf_config_flags_t', 'c__EA_amdsmi_vf_sched_state_t',
    'c__EA_amdsmi_vram_type_t', 'c__EA_amdsmi_vram_vendor_t',
    'c__EA_amdsmi_xgmi_fb_sharing_mode_t', 'c__EA_processor_type_t',
    'int64_t', 'processor_type_t', 'processor_type_t__enumvalues',
    'size_t', 'struct_bdf_',
    'struct_c__SA_amdsmi_accelerator_partition_profile_config_t',
    'struct_c__SA_amdsmi_accelerator_partition_profile_t',
    'struct_c__SA_amdsmi_accelerator_partition_resource_profile_t',
    'struct_c__SA_amdsmi_asic_info_t',
    'struct_c__SA_amdsmi_board_info_t',
    'struct_c__SA_amdsmi_clk_info_t',
    'struct_c__SA_amdsmi_cper_guid_t', 'struct_c__SA_amdsmi_cper_hdr',
    'struct_c__SA_amdsmi_cper_hdr_0_0',
    'struct_c__SA_amdsmi_cper_timestamp_t',
    'struct_c__SA_amdsmi_dfc_fw_data_t',
    'struct_c__SA_amdsmi_dfc_fw_header_t',
    'struct_c__SA_amdsmi_dfc_fw_t',
    'struct_c__SA_amdsmi_dfc_fw_ta_uuid_t',
    'struct_c__SA_amdsmi_dfc_fw_white_list_t',
    'struct_c__SA_amdsmi_dpm_policy_entry_t',
    'struct_c__SA_amdsmi_dpm_policy_t',
    'struct_c__SA_amdsmi_driver_info_t',
    'struct_c__SA_amdsmi_eeprom_table_record_t',
    'struct_c__SA_amdsmi_engine_usage_t',
    'struct_c__SA_amdsmi_error_count_t',
    'struct_c__SA_amdsmi_event_entry_t',
    'struct_c__SA_amdsmi_fw_error_record_t',
    'struct_c__SA_amdsmi_fw_info_t',
    'struct_c__SA_amdsmi_fw_info_t_0',
    'struct_c__SA_amdsmi_fw_load_error_record_t',
    'struct_c__SA_amdsmi_gpu_cache_info_t',
    'struct_c__SA_amdsmi_guard_info_t',
    'struct_c__SA_amdsmi_guard_info_t_0',
    'struct_c__SA_amdsmi_guest_data_t',
    'struct_c__SA_amdsmi_link_metrics_t',
    'struct_c__SA_amdsmi_link_topology_t',
    'struct_c__SA_amdsmi_memory_partition_config_t',
    'struct_c__SA_amdsmi_metric_t',
    'struct_c__SA_amdsmi_partition_info_t',
    'struct_c__SA_amdsmi_pcie_info_t',
    'struct_c__SA_amdsmi_pf_fb_info_t',
    'struct_c__SA_amdsmi_power_cap_info_t',
    'struct_c__SA_amdsmi_power_info_t',
    'struct_c__SA_amdsmi_profile_caps_info_t',
    'struct_c__SA_amdsmi_profile_info_t',
    'struct_c__SA_amdsmi_profile_info_t_0',
    'struct_c__SA_amdsmi_ras_feature_t',
    'struct_c__SA_amdsmi_sched_info_t',
    'struct_c__SA_amdsmi_vbios_info_t',
    'struct_c__SA_amdsmi_version_t', 'struct_c__SA_amdsmi_vf_data_t',
    'struct_c__SA_amdsmi_vf_fb_info_t',
    'struct_c__SA_amdsmi_vf_handle_t',
    'struct_c__SA_amdsmi_vf_info_t',
    'struct_c__SA_amdsmi_vram_info_t', 'struct_cache_', 'struct_cap_',
    'struct_links_', 'struct_nps_flags_', 'struct_numa_range_',
    'struct_pcie_metric_', 'struct_pcie_static_', 'uint32_t',
    'uint64_t', 'union_c__SA_amdsmi_cper_hdr_0',
    'union_c__SA_amdsmi_dfc_fw_data_t_0',
    'union_c__SA_amdsmi_eeprom_table_record_t_0',
    'union_c__UA_amdsmi_bdf_t', 'union_c__UA_amdsmi_nps_caps_t',
    'union_c__UA_amdsmi_xgmi_fb_sharing_caps_t']
