#!/bin/bash

#
# Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE

REPO_ROOT=$(git rev-parse --show-toplevel)
VERSION_FILE="$REPO_ROOT/VERSION"
HEADER_FILE="$REPO_ROOT/interface/amdsmi.h"

if [ ! -f "$VERSION_FILE" ]; then
    echo "VERSION file not found!"
    exit 1
fi

current_branch=$(git rev-parse --abbrev-ref HEAD)
if git log --branches --not --remotes | grep -q .; then
    original_version=$(git show origin/$current_branch:"VERSION")
else
    original_version=$(git show HEAD:"VERSION")
fi

original_major=$(echo "$original_version" | grep 'major=' | cut -d '=' -f 2)
original_minor=$(echo "$original_version" | grep 'minor=' | cut -d '=' -f 2)
original_release=$(echo "$original_version" | grep 'release=' | cut -d '=' -f 2)

source "$VERSION_FILE"

update_version() {
    local new_major=$1
    local new_minor=$2
    local new_release=$3
    printf "major=%s\n" "$new_major" > "$VERSION_FILE"
    printf "minor=%s\n" "$new_minor" >> "$VERSION_FILE"
    printf "release=%s" "$new_release" >> "$VERSION_FILE"
}

major_change=false

if git log --branches --not --remotes | grep -q .; then
    diff_output=$(git diff origin/$current_branch -- "$HEADER_FILE")
else
    diff_output=$(git diff --cached origin/$current_branch -- "$HEADER_FILE")
fi

# Check if there are any changes in the HEADER_FILE
if [ -z "$diff_output" ]; then
    update_version $original_major $original_minor "$((original_release + 1))"
    git add "$VERSION_FILE"
    exit 0
fi

# 1. Detect deletions or modifications of typedef structs
if echo "$diff_output" | grep -E '^\-.*\btypedef\s+struct\b'; then
    echo "Detected deletion or modification of typedef struct"
    major_change=true
# 2. Detect renaming of typedef struct (deletion of old definition)
elif echo "$diff_output" | grep -P '^-\s*}\s+\w+;' ; then
    echo "Detected renaming of typedef struct (deletion of old definition)"
    major_change=true
# 4. Detect deletions or modifications of struct
elif echo "$diff_output" | grep -E '^\-.*\bstruct\b'; then
    echo "Detected deletion or modification of struct"
    major_change=true
# 5. Detect deletions or modifications of enum
elif echo "$diff_output" | grep -E '^\-.*\benum\b'; then
    echo "Detected deletion or modification of enum"
    major_change=true
# 6. Detect deletions or modifications of functions
elif echo "$diff_output" | grep '^-\s*amdsmi_status_t'; then
    echo "Detected deletion or modification of API function"
    major_change=true
# 7. Detect deletion of enum members
elif echo "$diff_output" | grep -P '^-\s*[A-Za-z_][A-Za-z0-9_]*\s*(=\s*[A-Za-z0-9_]+)?\s*,'; then
    echo "Detected deletion of enum member"
    major_change=true
# 8. Detect deletion of fields within struct or typedef struct
elif echo "$diff_output" | grep -P '^-\s*\w+\s+\w+\s*;' ; then
    echo "Detected deletion of field in struct/typedef struct"
    major_change=true
# 9. Detect deletion of function implementations (e.g., function body)
elif echo "$diff_output" | grep -P '^-\s*\w+\s+\w+\s*\(.*\)\s*\{' ; then
    echo "Detected deletion of function implementation"
    major_change=true
# 10. Detect deletions or modifications of #define macros
elif echo "$diff_output" | grep -E '^\-\s*#define\b'; then
    echo "Detected deletion or modification of #define macro"
    major_change=true
fi

if [ "$major_change" = true ]; then
    major=$((original_major + 1))
    minor=0
    release=0
    update_version $major $minor $release
else
    major=$original_major
    minor=$((original_minor + 1))
    release=0
    update_version $major $minor $release
fi
git add "$VERSION_FILE"

exit 0